{"version":3,"sources":["../src/notification.js"],"names":["define","Y","$","log","notificationModule","types","fieldName","fetchNotifications","require","ajax","promises","call","methodname","args","contextid","done","addNotifications","notifications","each","i","notification","renderNotification","template","variables","setupTargetRegion","targetRegion","length","newRegion","attr","prepend","addNotification","error","extend","closebutton","announce","type","message","templates","render","html","js","runTemplateJS","fail","exception","debug","alert","title","yesLabel","use","M","core","show","confirm","question","noLabel","yesCallback","noCallback","modal","on","ex","stack","debuginfo","backtrace","stacktrace","ln","match","fn","lineNumber","fileName","substr","name","errorcode","init"],"mappings":"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","file":"notification.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A system for displaying notifications to users from the session.\n *\n * Wrapper for the YUI M.core.notification class. Allows us to\n * use the YUI version in AMD code until it is replaced.\n *\n * @module     core/notification\n * @class      notification\n * @package    core\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\ndefine(['core/yui', 'jquery', 'core/log'],\nfunction(Y, $, log) {\n    var notificationModule = {\n        types: {\n            'success':  'core/notification_success',\n            'info':     'core/notification_info',\n            'warning':  'core/notification_warning',\n            'error':    'core/notification_error',\n        },\n\n        fieldName: 'user-notifications',\n\n        fetchNotifications: function() {\n            require(['core/ajax'], function(ajax) {\n                var promises = ajax.call([{\n                    methodname: 'core_fetch_notifications',\n                    args: {\n                        contextid: notificationModule.contextid\n                    }\n                }]);\n\n                promises[0]\n                    .done(notificationModule.addNotifications)\n                    ;\n            });\n        },\n\n        addNotifications: function(notifications) {\n            if (!notifications) {\n                notifications = [];\n            }\n\n            $.each(notifications, function(i, notification) {\n                notificationModule.renderNotification(notification.template, notification.variables);\n            });\n        },\n\n        setupTargetRegion: function() {\n            var targetRegion = $('#' + notificationModule.fieldName);\n            if (targetRegion.length) {\n                return false;\n            }\n\n            var newRegion = $('<span>').attr('id', notificationModule.fieldName);\n\n            targetRegion = $('#region-main');\n            if (targetRegion.length) {\n                return targetRegion.prepend(newRegion);\n            }\n\n            targetRegion = $('[role=\"main\"]');\n            if (targetRegion.length) {\n                return targetRegion.prepend(newRegion);\n            }\n\n            targetRegion = $('body');\n            return targetRegion.prepend(newRegion);\n        },\n\n        addNotification: function(notification) {\n            var template = notificationModule.types.error;\n\n            notification = $.extend({\n                    closebutton:    true,\n                    announce:       true,\n                    type:           'error'\n                }, notification);\n\n            if (notification.template) {\n                template = notification.template;\n                delete notification.template;\n            } else if (notification.type) {\n                if (typeof notificationModule.types[notification.type] !== 'undefined') {\n                    template = notificationModule.types[notification.type];\n                }\n                delete notification.type;\n            }\n\n            return notificationModule.renderNotification(template, notification);\n        },\n\n        renderNotification: function(template, variables) {\n            if (typeof variables.message === 'undefined' || !variables.message) {\n                log.debug('Notification received without content. Skipping.');\n                return;\n            }\n            require(['core/templates'], function(templates) {\n                templates.render(template, variables)\n                    .done(function(html, js) {\n                        $('#' + notificationModule.fieldName).prepend(html);\n                        templates.runTemplateJS(js);\n                    })\n                    .fail(notificationModule.exception)\n                    ;\n            });\n        },\n\n        alert: function(title, message, yesLabel) {\n            // Here we are wrapping YUI. This allows us to start transitioning, but\n            // wait for a good alternative without having inconsistent dialogues.\n            Y.use('moodle-core-notification-alert', function() {\n                var alert = new M.core.alert({\n                    title: title,\n                    message: message,\n                    yesLabel: yesLabel\n                });\n\n                alert.show();\n            });\n        },\n\n        confirm: function(title, question, yesLabel, noLabel, yesCallback, noCallback) {\n            // Here we are wrapping YUI. This allows us to start transitioning, but\n            // wait for a good alternative without having inconsistent dialogues.\n            Y.use('moodle-core-notification-confirm', function() {\n                var modal = new M.core.confirm({\n                    title: title,\n                    question: question,\n                    yesLabel: yesLabel,\n                    noLabel: noLabel\n                });\n\n                modal.on('complete-yes', function() {\n                    yesCallback();\n                });\n                if (noCallback) {\n                    modal.on('complete-no', function() {\n                        noCallback();\n                    });\n                }\n                modal.show();\n            });\n        },\n\n        exception: function(ex) {\n            // Fudge some parameters.\n            if (typeof ex.stack == 'undefined') {\n                ex.stack = '';\n            }\n            if (ex.debuginfo) {\n                ex.stack += ex.debuginfo + '\\n';\n            }\n            if (!ex.backtrace && ex.stacktrace) {\n                ex.backtrace = ex.stacktrace;\n            }\n            if (ex.backtrace) {\n                ex.stack += ex.backtrace;\n                var ln = ex.backtrace.match(/line ([^ ]*) of/);\n                var fn = ex.backtrace.match(/ of ([^:]*): /);\n                if (ln && ln[1]) {\n                    ex.lineNumber = ln[1];\n                }\n                if (fn && fn[1]) {\n                    ex.fileName = fn[1];\n                    if (ex.fileName.length > 30) {\n                        ex.fileName = '...' + ex.fileName.substr(ex.fileName.length - 27);\n                    }\n                }\n            }\n            if (typeof ex.name == 'undefined' && ex.errorcode) {\n                ex.name = ex.errorcode;\n            }\n\n            Y.use('moodle-core-notification-exception', function() {\n                var modal = new M.core.exception(ex);\n\n                modal.show();\n            });\n        }\n    };\n\n    return /** @alias module:core/notification */{\n        init: function(contextid, notifications) {\n            notificationModule.contextid = contextid;\n\n            // Setup the message target region if it isn't setup already\n            notificationModule.setupTargetRegion();\n\n            // Add provided notifications.\n            notificationModule.addNotifications(notifications);\n\n            // Poll for any new notifications.\n            notificationModule.fetchNotifications();\n        },\n\n        /**\n         * Poll the server for any new notifications.\n         *\n         * @method fetchNotifications\n         */\n        fetchNotifications: notificationModule.fetchNotifications,\n\n        /**\n         * Add a notification to the page.\n         *\n         * Note: This does not cause the notification to be added to the session.\n         *\n         * @method addNotification\n         * @param {Object}  notification                The notification to add.\n         * @param {string}  notification.message        The body of the notification\n         * @param {string}  notification.type           The type of notification to add (error, warning, info, success).\n         * @param {Boolean} notification.closebutton    Whether to show the close button.\n         * @param {Boolean} notification.announce       Whether to announce to screen readers.\n         */\n        addNotification: notificationModule.addNotification,\n\n        /**\n         * Wrap M.core.alert.\n         *\n         * @method alert\n         * @param {string} title\n         * @param {string} message\n         * @param {string} yesLabel\n         */\n        alert: notificationModule.alert,\n\n        /**\n         * Wrap M.core.confirm.\n         *\n         * @method confirm\n         * @param {string} title\n         * @param {string} question\n         * @param {string} yesLabel\n         * @param {string} noLabel\n         * @param {function} yesCallback\n         * @param {function} noCallback Optional parameter to be called if the user presses cancel.\n         */\n        confirm: notificationModule.confirm,\n\n        /**\n         * Wrap M.core.exception.\n         *\n         * @method exception\n         * @param {Error} ex\n         */\n        exception: notificationModule.exception\n    };\n});\n"]}