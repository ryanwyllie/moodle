{"version":3,"sources":["../src/ajax.js"],"names":["define","$","config","Log","unloading","requestSuccess","responses","request","response","requests","exception","i","error","length","deferred","reject","Error","resolve","data","requestFail","jqXHR","textStatus","call","async","loginrequired","window","bind","ajaxRequestData","promises","methodInfo","requestInfo","push","index","methodname","args","Deferred","promise","done","fail","sort","join","JSON","stringify","settings","type","context","dataType","processData","contentType","script","url","wwwroot","sesskey","ajax","success"],"mappings":"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","file":"ajax.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Standard Ajax wrapper for Moodle. It calls the central Ajax script,\n * which can call any existing webservice using the current session.\n * In addition, it can batch multiple requests and return multiple responses.\n *\n * @module     core/ajax\n * @class      ajax\n * @package    core\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\ndefine(['jquery', 'core/config', 'core/log'], function($, config, Log) {\n\n    // Keeps track of when the user leaves the page so we know not to show an error.\n    var unloading = false;\n\n    /**\n     * Success handler. Called when the ajax call succeeds. Checks each response and\n     * resolves or rejects the deferred from that request.\n     *\n     * @method requestSuccess\n     * @private\n     * @param {Object[]} responses Array of responses containing error, exception and data attributes.\n     */\n    var requestSuccess = function(responses) {\n        // Call each of the success handlers.\n        var requests = this;\n        var exception = null;\n        var i = 0;\n        var request;\n        var response;\n\n        if (responses.error) {\n            // There was an error with the request as a whole.\n            // We need to reject each promise.\n            // Unfortunately this may lead to duplicate dialogues, but each Promise must be rejected.\n            for (; i < requests.length; i++) {\n                request = requests[i];\n                request.deferred.reject(responses);\n            }\n\n            return;\n        }\n\n        for (i = 0; i < requests.length; i++) {\n            request = requests[i];\n\n            response = responses[i];\n            // We may not have responses for all the requests.\n            if (typeof response !== \"undefined\") {\n                if (response.error === false) {\n                    // Call the done handler if it was provided.\n                    request.deferred.resolve(response.data);\n                } else {\n                    exception = response.exception;\n                    break;\n                }\n            } else {\n                // This is not an expected case.\n                exception = new Error('missing response');\n                break;\n            }\n        }\n        // Something failed, reject the remaining promises.\n        if (exception !== null) {\n            for (; i < requests.length; i++) {\n                request = requests[i];\n                request.deferred.reject(exception);\n            }\n        }\n    };\n\n    /**\n     * Fail handler. Called when the ajax call fails. Rejects all deferreds.\n     *\n     * @method requestFail\n     * @private\n     * @param {jqXHR} jqXHR The ajax object.\n     * @param {string} textStatus The status string.\n     * @param {Error|Object} exception The error thrown.\n     */\n    var requestFail = function(jqXHR, textStatus, exception) {\n        // Reject all the promises.\n        var requests = this;\n\n        var i = 0;\n        for (i = 0; i < requests.length; i++) {\n            var request = requests[i];\n\n            if (unloading) {\n                // No need to trigger an error because we are already navigating.\n                Log.error(\"Page unloaded.\");\n                Log.error(exception);\n            } else {\n                request.deferred.reject(exception);\n            }\n        }\n    };\n\n    return /** @alias module:core/ajax */ {\n        // Public variables and functions.\n        /**\n         * Make a series of ajax requests and return all the responses.\n         *\n         * @method call\n         * @param {Object[]} requests Array of requests with each containing methodname and args properties.\n         *                   done and fail callbacks can be set for each element in the array, or the\n         *                   can be attached to the promises returned by this function.\n         * @param {Boolean} async Optional, defaults to true.\n         *                  If false - this function will not return until the promises are resolved.\n         * @param {Boolean} loginrequired Optional, defaults to true.\n         *                  If false - this function will call the faster nologin ajax script - but\n         *                  will fail unless all functions have been marked as 'loginrequired' => false\n         *                  in services.php\n         * @return {Promise[]} Array of promises that will be resolved when the ajax call returns.\n         */\n        call: function(requests, async, loginrequired) {\n            $(window).bind('beforeunload', function() {\n                unloading = true;\n            });\n            var ajaxRequestData = [],\n                i,\n                promises = [],\n                methodInfo = [],\n                requestInfo = '';\n\n            if (typeof loginrequired === \"undefined\") {\n                loginrequired = true;\n            }\n            if (typeof async === \"undefined\") {\n                async = true;\n            }\n            for (i = 0; i < requests.length; i++) {\n                var request = requests[i];\n                ajaxRequestData.push({\n                    index: i,\n                    methodname: request.methodname,\n                    args: request.args\n                });\n                request.deferred = $.Deferred();\n                promises.push(request.deferred.promise());\n                // Allow setting done and fail handlers as arguments.\n                // This is just a shortcut for the calling code.\n                if (typeof request.done !== \"undefined\") {\n                    request.deferred.done(request.done);\n                }\n                if (typeof request.fail !== \"undefined\") {\n                    request.deferred.fail(request.fail);\n                }\n                request.index = i;\n                methodInfo.push(request.methodname);\n            }\n\n            if (methodInfo.length <= 5) {\n                requestInfo = methodInfo.sort().join();\n            } else {\n                requestInfo = methodInfo.length + '-method-calls';\n            }\n\n            ajaxRequestData = JSON.stringify(ajaxRequestData);\n            var settings = {\n                type: 'POST',\n                data: ajaxRequestData,\n                context: requests,\n                dataType: 'json',\n                processData: false,\n                async: async,\n                contentType: \"application/json\"\n            };\n\n            var script = 'service.php';\n            if (!loginrequired) {\n                script = 'service-nologin.php';\n            }\n            var url = config.wwwroot + '/lib/ajax/' + script +\n                    '?sesskey=' + config.sesskey + '&info=' + requestInfo;\n\n            // Jquery deprecated done and fail with async=false so we need to do this 2 ways.\n            if (async) {\n                $.ajax(url, settings)\n                    .done(requestSuccess)\n                    .fail(requestFail);\n            } else {\n                settings.success = requestSuccess;\n                settings.error = requestFail;\n                $.ajax(url, settings);\n            }\n\n            return promises;\n        }\n    };\n});\n"]}