{"version":3,"sources":["../src/tree.js"],"names":["define","$","SELECTORS","ITEM","GROUP","CLOSED_GROUP","FIRST_ITEM","VISIBLE_ITEM","UNLOADED_AJAX_ITEM","Tree","selector","selectCallback","treeRoot","data","keys","tab","enter","space","pageup","pagedown","end","home","left","up","right","down","asterisk","initialiseNodes","setActiveItem","find","refreshVisibleItemsCache","bindEventHandlers","prototype","getVisibleItems","item","currentActive","attr","isGroupItem","is","getGroupFromItem","children","isGroupCollapsed","isGroupCollapsible","node","removeAllFromTabOrder","setAriaSelectedFalseOnItems","thisTree","each","unloadedNode","collapseGroup","expandGroup","expandAllGroups","groupNode","done","expandAllChildGroups","promise","Deferred","resolve","moduleName","closest","addClass","require","loader","load","finishExpandingGroup","removeClass","group","toggleGroup","handleKeyDown","e","currentIndex","index","altKey","ctrlKey","metaKey","shiftKey","keyCode","first","focus","stopPropagation","last","links","length","not","window","location","href","focusParent","tree","filter","has","prev","eq","next","handleClick","handleFocus","thisObj","on","click","keydown"],"mappings":"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","file":"tree.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Implement an accessible aria tree widget, from a nested unordered list.\n * Based on http://oaa-accessibility.org/example/41/.\n *\n * @module     tool_lp/tree\n * @package    core\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery'], function($) {\n    // Private variables and functions.\n    var SELECTORS = {\n        ITEM: '[role=treeitem]',\n        GROUP: '[role=treeitem]:has([role=group]), [role=treeitem][aria-owns], [role=treeitem][data-requires-ajax=true]',\n        CLOSED_GROUP: '[role=treeitem]:has([role=group])[aria-expanded=false], [role=treeitem][aria-owns][aria-expanded=false], ' +\n                 '[role=treeitem][data-requires-ajax=true][aria-expanded=false]',\n        FIRST_ITEM: '[role=treeitem]:first',\n        VISIBLE_ITEM: '[role=treeitem]:visible',\n        UNLOADED_AJAX_ITEM: '[role=treeitem][data-requires-ajax=true][data-loaded=false][aria-expanded=true]'\n    };\n\n    /**\n     * Constructor.\n     *\n     * @param {String} selector\n     * @param {function} selectCallback Called when the active node is changed.\n     */\n    var Tree = function(selector, selectCallback) {\n        this.treeRoot = $(selector);\n\n        this.treeRoot.data('activeItem', null);\n        this.selectCallback = selectCallback;\n        this.keys = {\n            tab:      9,\n            enter:    13,\n            space:    32,\n            pageup:   33,\n            pagedown: 34,\n            end:      35,\n            home:     36,\n            left:     37,\n            up:       38,\n            right:    39,\n            down:     40,\n            asterisk: 106\n        };\n\n        // Apply the standard default initialisation for all nodes, starting with the tree root.\n        this.initialiseNodes(this.treeRoot);\n        // Make the first item the active item for the tree so that it is added to the tab order.\n        this.setActiveItem(this.treeRoot.find(SELECTORS.FIRST_ITEM));\n        // Create the cache of the visible items.\n        this.refreshVisibleItemsCache();\n        // Create the event handlers for the tree.\n        this.bindEventHandlers();\n    };\n\n    /**\n     * Find all visible tree items and save a cache of them on the tree object.\n     *\n     * @method refreshVisibleItemsCache\n     */\n    Tree.prototype.refreshVisibleItemsCache = function() {\n        this.treeRoot.data('visibleItems', this.treeRoot.find(SELECTORS.VISIBLE_ITEM));\n    };\n\n    /**\n     * Get all visible tree items.\n     *\n     * @method getVisibleItems\n     * @return {Object} visible items\n     */\n    Tree.prototype.getVisibleItems = function() {\n        return this.treeRoot.data('visibleItems');\n    };\n\n    /**\n     * Mark the given item as active within the tree and fire the callback for when the active item is set.\n     *\n     * @method setActiveItem\n     * @param {object} item jquery object representing an item on the tree.\n     */\n    Tree.prototype.setActiveItem = function(item) {\n        var currentActive = this.treeRoot.data('activeItem');\n        if (item === currentActive) {\n            return;\n        }\n\n        // Remove previous active from tab order.\n        if (currentActive) {\n            currentActive.attr('tabindex', '-1');\n            currentActive.attr('aria-selected', 'false');\n        }\n        item.attr('tabindex', '0');\n        item.attr('aria-selected', 'true');\n\n        // Set the new active item.\n        this.treeRoot.data('activeItem', item);\n\n        if (typeof this.selectCallback === 'function') {\n            this.selectCallback(item);\n        }\n    };\n\n    /**\n     * Determines if the given item is a group item (contains child tree items) in the tree.\n     *\n     * @method isGroupItem\n     * @param {object} item jquery object representing an item on the tree.\n     * @returns {bool}\n     */\n    Tree.prototype.isGroupItem = function(item) {\n        return item.is(SELECTORS.GROUP);\n    };\n\n    /**\n     * Determines if the given item is a group item (contains child tree items) in the tree.\n     *\n     * @method isGroupItem\n     * @param {object} item jquery object representing an item on the tree.\n     * @returns {bool}\n     */\n    Tree.prototype.getGroupFromItem = function(item) {\n        return this.treeRoot.find('#' + item.attr('aria-owns')) || item.children('[role=group]');\n    };\n\n    /**\n     * Determines if the given group item (contains child tree items) is collapsed.\n     *\n     * @method isGroupCollapsed\n     * @param {object} item jquery object representing a group item on the tree.\n     * @returns {bool}\n     */\n    Tree.prototype.isGroupCollapsed = function(item) {\n        return item.attr('aria-expanded') === 'false';\n    };\n\n    /**\n     * Determines if the given group item (contains child tree items) can be collapsed.\n     *\n     * @method isGroupCollapsible\n     * @param {object} item jquery object representing a group item on the tree.\n     * @returns {bool}\n     */\n    Tree.prototype.isGroupCollapsible = function(item) {\n        return item.attr('data-collapsible') !== 'false';\n    };\n\n    /**\n     * Performs the tree initialisation for all child items from the given node,\n     * such as removing everything from the tab order and setting aria selected\n     * on items.\n     *\n     * @method initialiseNodes\n     * @param {object} node jquery object representing a node.\n     */\n    Tree.prototype.initialiseNodes = function(node) {\n        this.removeAllFromTabOrder(node);\n        this.setAriaSelectedFalseOnItems(node);\n\n        // Get all ajax nodes that have been rendered as expanded but haven't loaded the child items yet.\n        var thisTree = this;\n        node.find(SELECTORS.UNLOADED_AJAX_ITEM).each(function() {\n            var unloadedNode = $(this);\n            // Collapse and then expand to trigger the ajax loading.\n            thisTree.collapseGroup(unloadedNode);\n            thisTree.expandGroup(unloadedNode);\n        });\n    };\n\n    /**\n     * Removes all child DOM elements of the given node from the tab order.\n     *\n     * @method removeAllFromTabOrder\n     * @param {object} node jquery object representing a node.\n     */\n    Tree.prototype.removeAllFromTabOrder = function(node) {\n        node.find('*').attr('tabindex', '-1');\n        this.getGroupFromItem($(node)).find('*').attr('tabindex', '-1');\n    };\n\n    /**\n     * Find all child tree items from the given node and set the aria selected attribute to false.\n     *\n     * @method setAriaSelectedFalseOnItems\n     * @param {object} node jquery object representing a node.\n     */\n    Tree.prototype.setAriaSelectedFalseOnItems = function(node) {\n        node.find(SELECTORS.ITEM).attr('aria-selected', 'false');\n    };\n\n    /**\n     * Expand all group nodes within the tree.\n     *\n     * @method expandAllGroups\n     */\n    Tree.prototype.expandAllGroups = function() {\n        var thisTree = this;\n\n        this.treeRoot.find(SELECTORS.CLOSED_GROUP).each(function() {\n            var groupNode = $(this);\n\n            thisTree.expandGroup($(this)).done(function() {\n                thisTree.expandAllChildGroups(groupNode);\n            });\n        });\n    };\n\n    /**\n     * Find all child group nodes from the given node and expand them.\n     *\n     * @method expandAllChildGroups\n     * @param {Object} item is the jquery id of the group.\n     */\n    Tree.prototype.expandAllChildGroups = function(item) {\n        var thisTree = this;\n\n        this.getGroupFromItem(item).find(SELECTORS.CLOSED_GROUP).each(function() {\n            var groupNode = $(this);\n\n            thisTree.expandGroup($(this)).done(function() {\n                thisTree.expandAllChildGroups(groupNode);\n            });\n        });\n    };\n\n    /**\n     * Expand a collapsed group.\n     *\n     * Handles expanding nodes that are ajax loaded (marked with a data-requires-ajax attribute).\n     *\n     * @method expandGroup\n     * @param {Object} item is the jquery id of the parent item of the group.\n     * @return {Object} a promise that is resolved when the group has been expanded.\n     */\n    Tree.prototype.expandGroup = function(item) {\n        var promise = $.Deferred();\n        // Ignore nodes that are explicitly maked as not expandable or are already expanded.\n        if (item.attr('data-expandable') !== 'false' && this.isGroupCollapsed(item)) {\n            // If this node requires ajax load and we haven't already loaded it.\n            if (item.attr('data-requires-ajax') === 'true' && item.attr('data-loaded') !== 'true') {\n                item.attr('data-loaded', false);\n                // Get the closes ajax loading module specificed in the tree.\n                var moduleName = item.closest('[data-ajax-loader]').attr('data-ajax-loader');\n                var thisTree = this;\n                // Flag this node as loading.\n                item.addClass('loading');\n                // Require the ajax module (must be AMD) and try to load the items.\n                require([moduleName], function(loader) {\n                    // All ajax module must implement a \"load\" method.\n                    loader.load(item).done(function() {\n                        item.attr('data-loaded', true);\n\n                        // Set defaults on the newly constructed part of the tree.\n                        thisTree.initialiseNodes(item);\n                        thisTree.finishExpandingGroup(item);\n                        // Make sure no child elements of the item we just loaded are tabbable.\n                        item.removeClass('loading');\n                        promise.resolve();\n                    });\n                });\n            } else {\n                this.finishExpandingGroup(item);\n                promise.resolve();\n            }\n        } else {\n            promise.resolve();\n        }\n        return promise;\n    };\n\n    /**\n     * Perform the necessary DOM changes to display a group item.\n     *\n     * @method finishExpandingGroup\n     * @param {Object} item is the jquery id of the parent item of the group.\n     */\n    Tree.prototype.finishExpandingGroup = function(item) {\n        // Expand the group.\n        var group = this.getGroupFromItem(item);\n        group.attr('aria-hidden', 'false');\n        item.attr('aria-expanded', 'true');\n\n        // Update the list of visible items.\n        this.refreshVisibleItemsCache();\n    };\n\n    /**\n     * Collapse an expanded group.\n     *\n     * @method collapseGroup\n     * @param {Object} item is the jquery id of the parent item of the group.\n     */\n    Tree.prototype.collapseGroup = function(item) {\n        // If the item is not collapsible or already collapsed then do nothing.\n        if (!this.isGroupCollapsible(item) || this.isGroupCollapsed(item)) {\n            return;\n        }\n\n        // Collapse the group.\n        var group = this.getGroupFromItem(item);\n        group.attr('aria-hidden', 'true');\n        item.attr('aria-expanded', 'false');\n\n        // Update the list of visible items.\n        this.refreshVisibleItemsCache();\n    };\n\n    /**\n     * Expand or collapse a group.\n     *\n     * @method toggleGroup\n     * @param {Object} item is the jquery id of the parent item of the group.\n     */\n    Tree.prototype.toggleGroup = function(item) {\n        if (item.attr('aria-expanded') === 'true') {\n            this.collapseGroup(item);\n        } else {\n            this.expandGroup(item);\n        }\n    };\n\n    /**\n     * Handle a key down event - ie navigate the tree.\n     *\n     * @method handleKeyDown\n     * @param {Object} item is the jquery id of the parent item of the group.\n     * @param {Event} e The event.\n     * @return {Boolean}\n     */\n     // This function should be simplified. In the meantime..\n     // eslint-disable-next-line complexity\n    Tree.prototype.handleKeyDown = function(item, e) {\n        var currentIndex = this.getVisibleItems().index(item);\n\n        if ((e.altKey || e.ctrlKey || e.metaKey) || (e.shiftKey && e.keyCode != this.keys.tab)) {\n            // Do nothing.\n            return true;\n        }\n\n        switch (e.keyCode) {\n            case this.keys.home: {\n                // Jump to first item in tree.\n                this.getVisibleItems().first().focus();\n\n                e.stopPropagation();\n                return false;\n            }\n            case this.keys.end: {\n                // Jump to last visible item.\n                this.getVisibleItems().last().focus();\n\n                e.stopPropagation();\n                return false;\n            }\n            case this.keys.enter: {\n                var links = item.children('a').length ? item.children('a') : item.children().not(SELECTORS.GROUP).find('a');\n                if (links.length) {\n                    window.location.href = links.first().attr('href');\n                } else if (this.isGroupItem(item)) {\n                    this.toggleGroup(item, true);\n                }\n\n                e.stopPropagation();\n                return false;\n            }\n            case this.keys.space: {\n                if (this.isGroupItem(item)) {\n                    this.toggleGroup(item, true);\n                }\n\n                e.stopPropagation();\n                return false;\n            }\n            case this.keys.left: {\n                var focusParent = function(tree) {\n                    // Get the immediate visible parent group item that contains this element.\n                    tree.getVisibleItems().filter(function() {\n                        return tree.getGroupFromItem($(this)).has(item).length;\n                    }).focus();\n                };\n\n                // If this is a goup item then collapse it and focus the parent group\n                // in accordance with the aria spec.\n                if (this.isGroupItem(item)) {\n                    if (this.isGroupCollapsed(item)) {\n                        focusParent(this);\n                    } else {\n                        this.collapseGroup(item);\n                    }\n                } else {\n                    focusParent(this);\n                }\n\n                e.stopPropagation();\n                return false;\n            }\n            case this.keys.right: {\n                // If this is a group item then expand it and focus the first child item\n                // in accordance with the aria spec.\n                if (this.isGroupItem(item)) {\n                    if (this.isGroupCollapsed(item)) {\n                        this.expandGroup(item);\n                    } else {\n                        // Move to the first item in the child group.\n                        this.getGroupFromItem(item).find(SELECTORS.ITEM).first().focus();\n                    }\n                }\n\n                e.stopPropagation();\n                return false;\n            }\n            case this.keys.up: {\n\n                if (currentIndex > 0) {\n                    var prev = this.getVisibleItems().eq(currentIndex - 1);\n\n                    prev.focus();\n                }\n\n                e.stopPropagation();\n                return false;\n            }\n            case this.keys.down: {\n\n                if (currentIndex < this.getVisibleItems().length - 1) {\n                    var next = this.getVisibleItems().eq(currentIndex + 1);\n\n                    next.focus();\n                }\n\n                e.stopPropagation();\n                return false;\n            }\n            case this.keys.asterisk: {\n                // Expand all groups.\n                this.expandAllGroups();\n                e.stopPropagation();\n                return false;\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Handle a click (select).\n     *\n     * @method handleClick\n     * @param {Object} item The jquery id of the parent item of the group.\n     * @param {Event} e The event.\n     * @return {Boolean}\n     */\n    Tree.prototype.handleClick = function(item, e) {\n\n        if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) {\n            // Do nothing.\n            return true;\n        }\n\n        // Update the active item.\n        item.focus();\n\n        // If the item is a group node.\n        if (this.isGroupItem(item)) {\n            this.toggleGroup(item);\n        }\n\n        e.stopPropagation();\n        return true;\n    };\n\n    /**\n     * Handle a focus event.\n     *\n     * @method handleFocus\n     * @param {Object} item The jquery id of the parent item of the group.\n     * @param {Event} e The event.\n     * @return {Boolean}\n     */\n    Tree.prototype.handleFocus = function(item, e) {\n\n        this.setActiveItem(item);\n\n        e.stopPropagation();\n        return true;\n    };\n\n    /**\n     * Bind the event listeners we require.\n     *\n     * @method bindEventHandlers\n     */\n    Tree.prototype.bindEventHandlers = function() {\n        var thisObj = this;\n\n        // Bind event handlers to the tree items. Use event delegates to allow\n        // for dynamically loaded parts of the tree.\n        this.treeRoot.on({\n            click: function(e) {\n              return thisObj.handleClick($(this), e);\n            },\n            keydown: function(e) {\n              return thisObj.handleKeyDown($(this), e);\n            },\n            focus: function(e) {\n              return thisObj.handleFocus($(this), e);\n            },\n        }, SELECTORS.ITEM);\n    };\n\n    return /** @alias module:tool_lp/tree */ Tree;\n});\n"]}