'use strict';define('core/str',['jquery','core/ajax','core/localstorage'],function($,ajax,storage){var promiseCache=[];return{get_string:function get_string(key,component,param,lang){var request=this.get_strings([{key:key,component:component,param:param,lang:lang}]);return request.then(function(results){return results[0]})},get_strings:function get_strings(requests){var request,deferred=$.Deferred(),results=[],i=0,missing=!1;for(i=0;i<requests.length;i++)if(request=requests[i],'undefined'==typeof request.lang&&(request.lang=$('html').attr('lang').replace(/-/g,'_')),request.cacheKey='core_str/'+request.key+'/'+request.component+'/'+request.lang,'undefined'==typeof M.str[request.component]||'undefined'==typeof M.str[request.component][request.key]){var cached=storage.get(request.cacheKey);cached?('undefined'==typeof M.str[request.component]&&(M.str[request.component]=[]),M.str[request.component][request.key]=cached):missing=!0}if(!missing){for(i=0;i<requests.length;i++)request=requests[i],results[i]=M.util.get_string(request.key,request.component,request.param);deferred.resolve(results)}else{var ajaxrequests=[],fetchpromises=[],doneFunc=function(str){this.resolve(str)},failFunc=function(reason){this.reject(reason)};for(i=0;i<requests.length;i++)if(request=requests[i],'undefined'!=typeof promiseCache[request.cacheKey])fetchpromises.push(promiseCache[request.cacheKey]);else{var fetchpromise=$.Deferred();ajaxrequests.push({methodname:'core_get_string',args:{stringid:request.key,component:request.component,lang:request.lang,stringparams:[]},done:doneFunc.bind(fetchpromise),fail:failFunc.bind(fetchpromise)}),promiseCache[request.cacheKey]=fetchpromise.promise(),fetchpromises.push(promiseCache[request.cacheKey])}0<ajaxrequests.length&&ajax.call(ajaxrequests,!0,!1),$.when.apply(null,fetchpromises).done(function(){var i=0;for(i=0;i<arguments.length;i++)request=requests[i],'undefined'==typeof M.str[request.component]&&(M.str[request.component]=[]),M.str[request.component][request.key]=arguments[i],storage.set('core_str/'+request.key+'/'+request.component+'/'+request.lang,arguments[i]),results[i]=M.util.get_string(request.key,request.component,request.param).trim();deferred.resolve(results)}).fail(function(ex){deferred.reject(ex)})}return deferred.promise()}}});
//# sourceMappingURL=str.min.js.map
