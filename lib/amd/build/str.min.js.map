{"version":3,"sources":["../src/str.js"],"names":["define","$","ajax","storage","promiseCache","get_string","key","component","param","lang","request","get_strings","then","results","requests","deferred","Deferred","i","missing","length","attr","replace","cacheKey","M","str","cached","get","util","resolve","ajaxrequests","fetchpromises","doneFunc","failFunc","reason","reject","push","fetchpromise","methodname","args","stringid","stringparams","done","bind","fail","promise","call","cfg","langrev","when","apply","arguments","set","trim","ex","cache_strings","strings","defaultLang","forEach","string","value","join"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Fetch and render language strings.\n * Hooks into the old M.str global - but can also fetch missing strings on the fly.\n *\n * @module     core/str\n * @class      str\n * @package    core\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\n// Disable no-restriced-properties because M.str is expected here:\n/* eslint-disable no-restricted-properties */\ndefine(['jquery', 'core/ajax', 'core/localstorage'], function($, ajax, storage) {\n\n    var promiseCache = [];\n\n    return /** @alias module:core/str */ {\n        // Public variables and functions.\n        /**\n         * Return a promise object that will be resolved into a string eventually (maybe immediately).\n         *\n         * @method get_string\n         * @param {string} key The language string key\n         * @param {string} component The language string component\n         * @param {string} param The param for variable expansion in the string.\n         * @param {string} lang The users language - if not passed it is deduced.\n         * @return {Promise}\n         */\n         // eslint-disable-next-line camelcase\n        get_string: function(key, component, param, lang) {\n            var request = this.get_strings([{\n                key: key,\n                component: component,\n                param: param,\n                lang: lang\n            }]);\n\n            return request.then(function(results) {\n                return results[0];\n            });\n        },\n\n        /**\n         * Make a batch request to load a set of strings\n         *\n         * @method get_strings\n         * @param {Object[]} requests Array of { key: key, component: component, param: param, lang: lang };\n         *                                      See get_string for more info on these args.\n         * @return {Promise}\n         */\n         // eslint-disable-next-line camelcase\n        get_strings: function(requests) {\n\n            var deferred = $.Deferred();\n            var results = [];\n            var i = 0;\n            var missing = false;\n            var request;\n\n            // Try from local storage. If it's there - put it in M.str and resolve it.\n\n            for (i = 0; i < requests.length; i++) {\n                request = requests[i];\n                if (typeof request.lang === \"undefined\") {\n                    request.lang = $('html').attr('lang').replace(/-/g, '_');\n                }\n                request.cacheKey = 'core_str/' + request.key + '/' + request.component + '/' + request.lang;\n                if (typeof M.str[request.component] === \"undefined\" ||\n                        typeof M.str[request.component][request.key] === \"undefined\") {\n                    // Try and revive it from local storage.\n                    var cached = storage.get(request.cacheKey);\n                    if (cached) {\n                        if (typeof M.str[request.component] === \"undefined\") {\n                            M.str[request.component] = [];\n                        }\n                        M.str[request.component][request.key] = cached;\n                    } else {\n                        // It's really not here.\n                        missing = true;\n                    }\n                }\n            }\n\n            if (!missing) {\n                // We have all the strings already.\n                for (i = 0; i < requests.length; i++) {\n                    request = requests[i];\n\n                    results[i] = M.util.get_string(request.key, request.component, request.param);\n                }\n                deferred.resolve(results);\n            } else {\n                var ajaxrequests = [];\n                var fetchpromises = [];\n\n                // Done handler for ajax call. Must be bound to the current fetchpromise. We do this\n                // to avoid creating a function in a loop.\n                var doneFunc = function(str) {\n                    this.resolve(str);\n                };\n\n                var failFunc = function(reason) {\n                    this.reject(reason);\n                };\n\n                for (i = 0; i < requests.length; i++) {\n                    request = requests[i];\n\n                    // If we ever fetched this string with a promise, reuse it.\n                    if (typeof promiseCache[request.cacheKey] !== 'undefined') {\n                        fetchpromises.push(promiseCache[request.cacheKey]);\n                    } else {\n                        // Add this to the list we need to really fetch.\n                        var fetchpromise = $.Deferred();\n\n                        ajaxrequests.push({\n                            methodname: 'core_get_string',\n                            args: {\n                                stringid: request.key,\n                                component: request.component,\n                                lang: request.lang,\n                                stringparams: []\n                            },\n                            done: doneFunc.bind(fetchpromise),\n                            fail: failFunc.bind(fetchpromise)\n                        });\n\n                        promiseCache[request.cacheKey] = fetchpromise.promise();\n                        fetchpromises.push(promiseCache[request.cacheKey]);\n                    }\n                }\n\n                // Everything might already be queued so we need to check if we have real ajax requests to run.\n                if (ajaxrequests.length > 0) {\n                    ajax.call(ajaxrequests, true, false, false, 0, M.cfg.langrev);\n                }\n\n                $.when.apply(null, fetchpromises).done(\n                    function() {\n                        // Turn the list of arguments (unknown length) into a real array.\n                        var i = 0;\n                        for (i = 0; i < arguments.length; i++) {\n                            request = requests[i];\n                            // Cache all the string templates.\n                            if (typeof M.str[request.component] === \"undefined\") {\n                                M.str[request.component] = [];\n                            }\n                            M.str[request.component][request.key] = arguments[i];\n                            storage.set('core_str/' + request.key + '/' + request.component + '/' + request.lang, arguments[i]);\n                            // And set the results.\n                            results[i] = M.util.get_string(request.key, request.component, request.param).trim();\n                        }\n                        deferred.resolve(results);\n                    }\n                ).fail(\n                    function(ex) {\n                        deferred.reject(ex);\n                    }\n                );\n            }\n\n            return deferred.promise();\n        },\n        /**\n         * Add a list of strings to the caches.\n         *\n         * @method cache_strings\n         * @param {Object[]} strings Array of { key: key, component: component, lang: lang, value: value }\n         */\n         // eslint-disable-next-line camelcase\n        cache_strings: function(strings) {\n            var defaultLang = $('html').attr('lang').replace(/-/g, '_');\n            strings.forEach(function(string) {\n                var lang = !(lang in string) ? defaultLang : string.lang;\n                var key = string.key;\n                var component = string.component;\n                var value = string.value;\n                var cacheKey = ['core_str', key, component, lang].join('/');\n\n                // Check M.str caching.\n                if (!(component in M.str) || !(key in M.str[component])) {\n                    if (!(component in M.str)) {\n                        M.str[component] = {};\n                    }\n\n                    M.str[component][key] = value;\n                }\n\n                // Check local storage.\n                if (!storage.get(cacheKey)) {\n                    storage.set(cacheKey, value);\n                }\n\n                // Check the promises cache.\n                if (!(cacheKey in promiseCache)) {\n                    promiseCache[cacheKey] = $.Deferred().resolve(value).promise();\n                }\n            });\n        }\n    };\n});\n"],"file":"str.min.js"}