{"version":3,"sources":["../src/str.js"],"names":["define","$","ajax","storage","promiseCache","get_string","key","component","param","lang","request","get_strings","then","results","requests","deferred","Deferred","i","missing","length","attr","replace","cacheKey","M","str","cached","get","util","resolve","ajaxrequests","fetchpromises","doneFunc","failFunc","reason","reject","push","fetchpromise","methodname","args","stringid","stringparams","done","bind","fail","promise","call","when","apply","arguments","set","trim","ex"],"mappings":"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","file":"str.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Fetch and render language strings.\n * Hooks into the old M.str global - but can also fetch missing strings on the fly.\n *\n * @module     core/str\n * @class      str\n * @package    core\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\n// Disable no-restriced-properties because M.str is expected here:\n/* eslint-disable no-restricted-properties */\ndefine(['jquery', 'core/ajax', 'core/localstorage'], function($, ajax, storage) {\n\n    var promiseCache = [];\n\n    return /** @alias module:core/str */ {\n        // Public variables and functions.\n        /**\n         * Return a promise object that will be resolved into a string eventually (maybe immediately).\n         *\n         * @method get_string\n         * @param {string} key The language string key\n         * @param {string} component The language string component\n         * @param {string} param The param for variable expansion in the string.\n         * @param {string} lang The users language - if not passed it is deduced.\n         * @return {Promise}\n         */\n         // eslint-disable-next-line camelcase\n        get_string: function(key, component, param, lang) {\n            var request = this.get_strings([{\n                key: key,\n                component: component,\n                param: param,\n                lang: lang\n            }]);\n\n            return request.then(function(results) {\n                return results[0];\n            });\n        },\n\n        /**\n         * Make a batch request to load a set of strings\n         *\n         * @method get_strings\n         * @param {Object[]} requests Array of { key: key, component: component, param: param, lang: lang };\n         *                                      See get_string for more info on these args.\n         * @return {Promise}\n         */\n         // eslint-disable-next-line camelcase\n        get_strings: function(requests) {\n\n            var deferred = $.Deferred();\n            var results = [];\n            var i = 0;\n            var missing = false;\n            var request;\n\n            // Try from local storage. If it's there - put it in M.str and resolve it.\n\n            for (i = 0; i < requests.length; i++) {\n                request = requests[i];\n                if (typeof request.lang === \"undefined\") {\n                    request.lang = $('html').attr('lang').replace(/-/g, '_');\n                }\n                request.cacheKey = 'core_str/' + request.key + '/' + request.component + '/' + request.lang;\n                if (typeof M.str[request.component] === \"undefined\" ||\n                        typeof M.str[request.component][request.key] === \"undefined\") {\n                    // Try and revive it from local storage.\n                    var cached = storage.get(request.cacheKey);\n                    if (cached) {\n                        if (typeof M.str[request.component] === \"undefined\") {\n                            M.str[request.component] = [];\n                        }\n                        M.str[request.component][request.key] = cached;\n                    } else {\n                        // It's really not here.\n                        missing = true;\n                    }\n                }\n            }\n\n            if (!missing) {\n                // We have all the strings already.\n                for (i = 0; i < requests.length; i++) {\n                    request = requests[i];\n\n                    results[i] = M.util.get_string(request.key, request.component, request.param);\n                }\n                deferred.resolve(results);\n            } else {\n                var ajaxrequests = [];\n                var fetchpromises = [];\n\n                // Done handler for ajax call. Must be bound to the current fetchpromise. We do this\n                // to avoid creating a function in a loop.\n                var doneFunc = function(str) {\n                    this.resolve(str);\n                };\n\n                var failFunc = function(reason) {\n                    this.reject(reason);\n                };\n\n                for (i = 0; i < requests.length; i++) {\n                    request = requests[i];\n\n                    // If we ever fetched this string with a promise, reuse it.\n                    if (typeof promiseCache[request.cacheKey] !== 'undefined') {\n                        fetchpromises.push(promiseCache[request.cacheKey]);\n                    } else {\n                        // Add this to the list we need to really fetch.\n                        var fetchpromise = $.Deferred();\n\n                        ajaxrequests.push({\n                            methodname: 'core_get_string',\n                            args: {\n                                stringid: request.key,\n                                component: request.component,\n                                lang: request.lang,\n                                stringparams: []\n                            },\n                            done: doneFunc.bind(fetchpromise),\n                            fail: failFunc.bind(fetchpromise)\n                        });\n\n                        promiseCache[request.cacheKey] = fetchpromise.promise();\n                        fetchpromises.push(promiseCache[request.cacheKey]);\n                    }\n                }\n\n                // Everything might already be queued so we need to check if we have real ajax requests to run.\n                if (ajaxrequests.length > 0) {\n                    ajax.call(ajaxrequests, true, false);\n                }\n\n                $.when.apply(null, fetchpromises).done(\n                    function() {\n                        // Turn the list of arguments (unknown length) into a real array.\n                        var i = 0;\n                        for (i = 0; i < arguments.length; i++) {\n                            request = requests[i];\n                            // Cache all the string templates.\n                            if (typeof M.str[request.component] === \"undefined\") {\n                                M.str[request.component] = [];\n                            }\n                            M.str[request.component][request.key] = arguments[i];\n                            storage.set('core_str/' + request.key + '/' + request.component + '/' + request.lang, arguments[i]);\n                            // And set the results.\n                            results[i] = M.util.get_string(request.key, request.component, request.param).trim();\n                        }\n                        deferred.resolve(results);\n                    }\n                ).fail(\n                    function(ex) {\n                        deferred.reject(ex);\n                    }\n                );\n            }\n\n            return deferred.promise();\n        }\n    };\n});\n"]}