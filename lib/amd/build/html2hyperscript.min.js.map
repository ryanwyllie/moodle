{"version":3,"sources":["../src/html2hyperscript.js"],"names":["ItemList","parent","content","spacer","indent","isFirstItem","inputMarkup","elementStack","currentItemList","parser","Parser","onopentag","name","attribs","unshift","ontext","text","lines","split","isFirst","forEach","line","lineMatch","exec","preSpace","mainText","postSpace","addSpace","length","add","JSON","stringify","onclosetag","element","shift","elementContent","id","idSuffix","classNames","classSuffix","filter","v","map","cls","join","attrPairs","Object","keys","k","item","match","oncomment","decodeEntities","write","end","prototype","space","indexOf","data","ignoreComma"],"mappings":"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","file":"html2hyperscript.min.js","sourcesContent":["\nimport { Parser } from 'core/htmlparser2';\n\nfunction ItemList(parent) {\n    this.parent = parent;\n    this.content = '';\n    this.spacer = '';\n    this.indent = parent ? parent.indent : '';\n    this.isFirstItem = true;\n}\n\nItemList.prototype.addSpace = function (space) {\n    this.spacer += space;\n\n    if (space.indexOf(\"\\n\") !== -1) {\n        // reset indent when there are new lines\n        this.indent = /[^\\n]*$/.exec(space)[0];\n    } else {\n        // otherwise keep appending to current indent\n        this.indent += space;\n    }\n}\n\nItemList.prototype.add = function (data, ignoreComma) {\n    if (!ignoreComma) {\n        if (!this.isFirstItem) {\n            this.content += this.spacer.length ? ',' : ', ';\n        }\n\n        this.isFirstItem = false;\n    }\n\n    this.content += this.spacer;\n    this.spacer = '';\n\n    this.content += data;\n}\n\nexport default function convert(inputMarkup) {\n    var elementStack = [];\n    var currentItemList = new ItemList(null);\n\n    var parser = new Parser({\n        onopentag: function (name, attribs) {\n            currentItemList = new ItemList(currentItemList);\n            elementStack.unshift([ name, attribs ]);\n        },\n        ontext: function (text) {\n            var lines = text.split(\"\\n\");\n\n            var isFirst = true;\n\n            lines.forEach(function (line) {\n                var lineMatch = /^(\\s*)(.*?)(\\s*)$/.exec(line);\n\n                var preSpace = lineMatch[1],\n                    mainText = lineMatch[2],\n                    postSpace = lineMatch[3];\n\n                if (!isFirst) {\n                    currentItemList.addSpace(\"\\n\");\n                }\n\n                currentItemList.addSpace(preSpace);\n\n                if (mainText.length > 0) {\n                    currentItemList.add(JSON.stringify(mainText));\n                }\n\n                isFirst = false;\n            });\n        },\n        onclosetag: function (tagname) {\n            var element = elementStack.shift();\n            var elementContent = currentItemList.content + currentItemList.spacer;\n\n            currentItemList = currentItemList.parent;\n\n            var indent = currentItemList.indent;\n\n            var attribs = element[1];\n\n            var id = attribs['id'];\n            var idSuffix = id !== undefined ? '#' + id : '';\n            delete attribs['id'];\n\n            var classNames = attribs['class'];\n            var classSuffix = (classNames !== undefined ? classNames : '').split(/\\s+/g).filter(function (v) { return v.length > 0; }).map(function (cls) { return '.' + cls; }).join('');\n            delete attribs['class'];\n\n            var attrPairs = Object.keys(attribs).map(function (k) { return JSON.stringify(k) + ': ' + JSON.stringify(attribs[k]) });\n\n            var item = 'h(' + JSON.stringify(element[0] + idSuffix + classSuffix) + (\n                attrPairs.length\n                    ? \", {\\n\" + indent + '    ' + attrPairs.join(\",\\n\" + indent + '    ') + \"\\n\" + indent + \"}\"\n                    : ''\n            ) + (\n                elementContent.length\n                    ? ', [' + (elementContent[0] === \"\\n\" ? '' : ' ') + elementContent + (elementContent.match(/\\s$/) ? '' : ' ') + ']'\n                    : ''\n            ) + ')';\n\n            currentItemList.add(item);\n        },\n        oncomment: function (text) {\n            currentItemList.add('/*' + text + '*/', false); // @todo comment-safety\n        }\n    }, {decodeEntities: true});\n\n    parser.write(inputMarkup);\n    parser.end();\n\n    return currentItemList.content;\n}\n"]}