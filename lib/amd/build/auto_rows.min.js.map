{"version":3,"sources":["../src/auto_rows.js"],"names":["define","$","SELECTORS","ELEMENT","EVENTS","ROW_CHANGE","calculateRows","element","currentRows","attr","minRows","data","maxRows","height","innerHeight","scrollHeight","rows","css","changeListener","e","target","trigger","init","root","on","bind","events"],"mappings":"aAyBAA,wBAAO,CAAC,QAAD,CAAP,CAAmB,SAASC,CAAT,CAAY,IACvBC,WAAY,CACZC,QAAS,kBADG,CADW,CAKvBC,OAAS,CACTC,WAAY,oBADH,CALc,CAiBvBC,cAAgB,SAASC,OAAT,CAAkB,IAC9BC,aAAcD,QAAQE,IAAR,CAAa,MAAb,CADgB,CAE9BC,QAAUH,QAAQI,IAAR,CAAa,UAAb,CAFoB,CAG9BC,QAAUL,QAAQE,IAAR,CAAa,eAAb,CAHoB,CAK9BI,OAASN,QAAQM,MAAR,EALqB,CAM9BC,YAAcP,QAAQO,WAAR,EANgB,CAS9BC,aAAeR,QAAQ,CAAR,EAAWQ,YATI,CAU9BC,KAAO,CAACD,cAHED,YAAcD,MAGhB,CAAD,GAA4BA,OAASL,WAArC,CAVuB,OAclCD,SAAQU,GAAR,CAAY,QAAZ,CAAsB,EAAtB,CAdkC,CAgB9BD,KAAON,OAhBuB,CAiBvBA,OAjBuB,CAkBvBE,SAAWI,MAAQJ,OAlBI,CAmBvBA,OAnBuB,CAqBvBI,IAEd,CAxC0B,CAiDvBE,eAAiB,SAASC,CAAT,CAAY,IACzBZ,SAAUN,EAAEkB,EAAEC,MAAJ,CADe,CAEzBV,QAAUH,QAAQI,IAAR,CAAa,UAAb,CAFe,CAGzBH,YAAcD,QAAQE,IAAR,CAAa,MAAb,CAHW,CAKN,WAAnB,QAAOC,QALkB,EAMzBH,QAAQI,IAAR,CAAa,UAAb,CAAyBH,WAAzB,CANyB,CAQ7B,GAAIQ,MAAOV,cAAcC,OAAd,CAAX,CAEIS,MAAQR,WAViB,GAWzBD,QAAQE,IAAR,CAAa,MAAb,CAAqBO,IAArB,CAXyB,CAYzBT,QAAQc,OAAR,CAAgBjB,OAAOC,UAAvB,CAZyB,CAchC,CA/D0B,CAgF3B,MAAqC,CACjCiB,KATO,QAAPA,KAAO,CAASC,IAAT,CAAe,CAClBtB,EAAEsB,IAAF,EAAQZ,IAAR,CAAa,WAAb,CADkB,CAElBV,EAAEsB,IAAF,EAAQC,EAAR,CAAW,sBAAX,CAAmCN,eAAeO,IAAf,CAAoB,IAApB,CAAnC,CAFkB,CAIlBxB,EAAEsB,IAAF,EAAQC,EAAR,CAAW,sBAAX,CAAmCtB,UAAUC,OAA7C,CAAsDe,eAAeO,IAAf,CAAoB,IAApB,CAAtD,CAEP,CAEoC,CAEjCC,OAAQtB,MAFyB,CAIxC,CApFD,C","file":"auto_rows.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Enhance a textarea with auto growing rows to fit the content.\n *\n * @module     core/auto_rows\n * @class      auto_rows\n * @package    core\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      3.2\n */\ndefine(['jquery'], function($) {\n    var SELECTORS = {\n        ELEMENT: '[data-auto-rows]'\n    };\n\n    var EVENTS = {\n        ROW_CHANGE: 'autorows:rowchange',\n    };\n\n    /**\n     * Determine how many rows should be set for the given element.\n     *\n     * @method calculateRows\n     * @param {jQuery} element The textarea element\n     * @return {int} The number of rows for the element\n     * @private\n     */\n    var calculateRows = function(element) {\n        var currentRows = element.attr('rows');\n        var minRows = element.data('min-rows');\n        var maxRows = element.attr('data-max-rows');\n\n        var height = element.height();\n        var innerHeight = element.innerHeight();\n        var padding = innerHeight - height;\n\n        var scrollHeight = element[0].scrollHeight;\n        var rows = (scrollHeight - padding) / (height / currentRows);\n\n        // Remove the height styling to let the height be calculated automatically\n        // based on the row attribute.\n        element.css('height', '');\n\n        if (rows < minRows) {\n            return minRows;\n        } else if (maxRows && rows >= maxRows) {\n            return maxRows;\n        } else {\n            return rows;\n        }\n    };\n\n    /**\n     * Listener for change events to trigger resizing of the element.\n     *\n     * @method changeListener\n     * @param {Event} e The triggered event.\n     * @private\n     */\n    var changeListener = function(e) {\n        var element = $(e.target);\n        var minRows = element.data('min-rows');\n        var currentRows = element.attr('rows');\n\n        if (typeof minRows === \"undefined\") {\n            element.data('min-rows', currentRows);\n        }\n        var rows = calculateRows(element);\n\n        if (rows != currentRows) {\n            element.attr('rows', rows);\n            element.trigger(EVENTS.ROW_CHANGE);\n        }\n    };\n\n    /**\n     * Add the event listeners for all text areas within the given element.\n     *\n     * @method init\n     * @param {jQuery|selector} root The container element of all enhanced text areas\n     * @public\n     */\n    var init = function(root) {\n        if ($(root).data('auto-rows')) {\n            $(root).on('input propertychange', changeListener.bind(this));\n        } else {\n            $(root).on('input propertychange', SELECTORS.ELEMENT, changeListener.bind(this));\n        }\n    };\n\n    return /** @module core/auto_rows */ {\n        init: init,\n        events: EVENTS,\n    };\n});\n"]}