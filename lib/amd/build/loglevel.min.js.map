{"version":3,"sources":["../src/loglevel.js"],"names":["root","definition","define","amd","module","exports","log","bindMethod","obj","methodName","method","bind","Function","prototype","call","e","apply","arguments","realMethod","console","noop","replaceLoggingMethods","level","loggerName","i","logMethods","length","methodFactory","debug","enableLoggingWhenConsoleArrives","defaultMethodFactory","Logger","name","defaultLevel","factory","persistLevelIfPossible","levelNum","levelName","toUpperCase","window","localStorage","storageKey","ignore","document","cookie","encodeURIComponent","getPersistedLevel","storedLevel","location","indexOf","exec","slice","levels","currentLevel","self","getLevel","setLevel","persist","SILENT","setDefaultLevel","enableAll","TRACE","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","TypeError","logger","_log","noConflict"],"mappings":"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","file":"loglevel.min.js","sourcesContent":["// The MIT License\n//\n// Copyright (c) 2013 Tim Perry\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n// Description of import into Moodle:\n// Download from https://github.com/pimterry/loglevel/dist\n// Copy loglevel.js into lib/amd/src/ in Moodle folder.\n// Add the license as a comment to the file and these instructions.\n\n/*\n * loglevel - https://github.com/pimterry/loglevel\n *\n * Copyright (c) 2013 Tim Perry\n * Licensed under the MIT license.\n */\n/*! loglevel - v1.5.1 - https://github.com/pimterry/loglevel - (c) 2017 Tim Perry - licensed MIT */\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = \"loglevel\";\n      if (name) {\n        storageKey += \":\" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== \"string\" || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    return defaultLogger;\n}));\n"]}