{"version":3,"sources":["../src/templates.js"],"names":["define","mustache","$","ajax","str","notification","coreurl","config","storage","IconSystem","event","Y","Log","Truncate","UserDate","uniqInstances","templateCache","templatePromises","iconSystem","Renderer","requiredStrings","requiredJS","requiredDates","currentThemeName","prototype","getTemplate","templateName","parts","split","component","shift","name","searchKey","cached","get","Deferred","resolve","promise","promises","call","methodname","args","template","themename","then","templateSource","set","partialHelper","exception","Error","renderIcon","key","title","modulename","iconsystemmodule","ready","require","System","system","init","catch","reject","getTemplateName","bind","pixHelper","context","sectionText","helper","text","length","trim","join","replace","jsHelper","push","stringHelper","param","indexOf","JSON","parse","index","quoteHelper","content","shortenTextHelper","regex","match","truncate","words","ellipsis","userDateHelper","timestamp","format","viewStoreHelper","componentHelper","addHelpers","themeName","uniqid","pix","js","quote","shortentext","userdate","viewstore","globals","currentTheme","getJS","treatStringsInContent","strings","treated","strIndex","walker","char","strFinal","pattern","search","substring","substr","parseInt","debug","treatDatesInContent","dates","forEach","date","re","RegExp","doRender","iconTemplate","result","render","html","get_strings","map","runTemplateJS","source","newscript","attr","append","domReplace","element","newHTML","newJS","replaceChildNodes","replaceNode","newNodes","yuiNodes","NodeList","children","destroy","empty","replaceWith","notifyFilterContentUpdated","scanForPartials","tokens","partials","findPartial","i","token","cachePartials","fetchThemAll","when","apply","theme","iconsystem","domPrepend","node","prepend","domAppend","renderer","renderPix","replaceNodeContents","prependNodeContents","appendNodeContents","getTemplateSource","syncRender"],"mappings":"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","file":"templates.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Template renderer for Moodle. Load and render Moodle templates with Mustache.\n *\n * @module     core/templates\n * @package    core\n * @class      templates\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\ndefine(['core/mustache',\n         'jquery',\n         'core/ajax',\n         'core/str',\n         'core/notification',\n         'core/url',\n         'core/config',\n         'core/localstorage',\n         'core/icon_system',\n         'core/event',\n         'core/yui',\n         'core/log',\n         'core/truncate',\n         'core/user_date'\n       ],\n       function(mustache, $, ajax, str, notification, coreurl, config, storage, IconSystem, event, Y, Log, Truncate, UserDate) {\n\n    // Module variables.\n    /** @var {Number} uniqInstances Count of times this constructor has been called. */\n    var uniqInstances = 0;\n\n    /** @var {String[]} templateCache - Cache of already loaded template strings */\n    var templateCache = {};\n\n    /** @var {Promise[]} templatePromises - Cache of already loaded template promises */\n    var templatePromises = {};\n\n    /** @var {Object} iconSystem - Object extending core/iconsystem */\n    var iconSystem = {};\n\n    /**\n     * Constructor\n     *\n     * Each call to templates.render gets it's own instance of this class.\n     */\n    var Renderer = function() {\n        this.requiredStrings = [];\n        this.requiredJS = [];\n        this.requiredDates = [];\n        this.currentThemeName = '';\n    };\n    // Class variables and functions.\n\n    /** @var {string[]} requiredStrings - Collection of strings found during the rendering of one template */\n    Renderer.prototype.requiredStrings = null;\n\n    /** @var {object[]} requiredDates - Collection of dates found during the rendering of one template */\n    Renderer.prototype.requiredDates = [];\n\n    /** @var {string[]} requiredJS - Collection of js blocks found during the rendering of one template */\n    Renderer.prototype.requiredJS = null;\n\n    /** @var {String} themeName for the current render */\n    Renderer.prototype.currentThemeName = '';\n\n    /**\n     * Load a template from the cache or local storage or ajax request.\n     *\n     * @method getTemplate\n     * @private\n     * @param {string} templateName - should consist of the component and the name of the template like this:\n     *                              core/menu (lib/templates/menu.mustache) or\n     *                              tool_bananas/yellow (admin/tool/bananas/templates/yellow.mustache)\n     * @return {Promise} JQuery promise object resolved when the template has been fetched.\n     */\n    Renderer.prototype.getTemplate = function(templateName) {\n        var parts = templateName.split('/');\n        var component = parts.shift();\n        var name = parts.shift();\n\n        var searchKey = this.currentThemeName + '/' + templateName;\n\n        // First try request variables.\n        if (searchKey in templatePromises) {\n            return templatePromises[searchKey];\n        }\n\n        // Now try local storage.\n        var cached = storage.get('core_template/' + searchKey);\n\n        if (cached) {\n            templateCache[searchKey] = cached;\n            templatePromises[searchKey] = $.Deferred().resolve(cached).promise();\n            return templatePromises[searchKey];\n        }\n\n        // Oh well - load via ajax.\n        var promises = ajax.call([{\n            methodname: 'core_output_load_template',\n            args: {\n                component: component,\n                template: name,\n                themename: this.currentThemeName\n            }\n        }], true, false);\n\n        templatePromises[searchKey] = promises[0].then(\n            function(templateSource) {\n                templateCache[searchKey] = templateSource;\n                storage.set('core_template/' + searchKey, templateSource);\n                return templateSource;\n            }\n        );\n        return templatePromises[searchKey];\n    };\n\n    /**\n     * Load a partial from the cache or ajax.\n     *\n     * @method partialHelper\n     * @private\n     * @param {string} name The partial name to load.\n     * @return {string}\n     */\n    Renderer.prototype.partialHelper = function(name) {\n\n        var searchKey = this.currentThemeName + '/' + name;\n\n        if (!(searchKey in templateCache)) {\n            notification.exception(new Error('Failed to pre-fetch the template: ' + name));\n        }\n\n        return templateCache[searchKey];\n    };\n\n    /**\n     * Render a single image icon.\n     *\n     * @method renderIcon\n     * @private\n     * @param {string} key The icon key.\n     * @param {string} component The component name.\n     * @param {string} title The icon title\n     * @return {Promise}\n     */\n    Renderer.prototype.renderIcon = function(key, component, title) {\n        // Preload the module to do the icon rendering based on the theme iconsystem.\n        var modulename = config.iconsystemmodule;\n\n        // RequireJS does not return a promise.\n        var ready = $.Deferred();\n        require([modulename], function(System) {\n            var system = new System();\n            if (!(system instanceof IconSystem)) {\n                ready.reject('Invalid icon system specified' + config.iconsystemmodule);\n            } else {\n                iconSystem = system;\n                system.init().then(ready.resolve).catch(notification.exception);\n            }\n        });\n\n        return ready.then(function(iconSystem) {\n            return this.getTemplate(iconSystem.getTemplateName());\n        }.bind(this)).then(function(template) {\n            return iconSystem.renderIcon(key, component, title, template);\n        });\n    };\n\n    /**\n     * Render image icons.\n     *\n     * @method pixHelper\n     * @private\n     * @param {object} context The mustache context\n     * @param {string} sectionText The text to parse arguments from.\n     * @param {function} helper Used to render the alt attribute of the text.\n     * @return {string}\n     */\n    Renderer.prototype.pixHelper = function(context, sectionText, helper) {\n        var parts = sectionText.split(',');\n        var key = '';\n        var component = '';\n        var text = '';\n\n        if (parts.length > 0) {\n            key = helper(parts.shift().trim(), context);\n        }\n        if (parts.length > 0) {\n            component = helper(parts.shift().trim(), context);\n        }\n        if (parts.length > 0) {\n            text = helper(parts.join(',').trim(), context);\n        }\n\n        var templateName = iconSystem.getTemplateName();\n\n        var searchKey = this.currentThemeName + '/' + templateName;\n        var template = templateCache[searchKey];\n\n        // The key might have been escaped by the JS Mustache engine which\n        // converts forward slashes to HTML entities. Let us undo that here.\n        key = key.replace(/&#x2F;/gi, '/');\n\n        return iconSystem.renderIcon(key, component, text, template);\n    };\n\n    /**\n     * Render blocks of javascript and save them in an array.\n     *\n     * @method jsHelper\n     * @private\n     * @param {object} context The current mustache context.\n     * @param {string} sectionText The text to save as a js block.\n     * @param {function} helper Used to render the block.\n     * @return {string}\n     */\n    Renderer.prototype.jsHelper = function(context, sectionText, helper) {\n        this.requiredJS.push(helper(sectionText, context));\n        return '';\n    };\n\n    /**\n     * String helper used to render {{#str}}abd component { a : 'fish'}{{/str}}\n     * into a get_string call.\n     *\n     * @method stringHelper\n     * @private\n     * @param {object} context The current mustache context.\n     * @param {string} sectionText The text to parse the arguments from.\n     * @param {function} helper Used to render subsections of the text.\n     * @return {string}\n     */\n    Renderer.prototype.stringHelper = function(context, sectionText, helper) {\n        var parts = sectionText.split(',');\n        var key = '';\n        var component = '';\n        var param = '';\n        if (parts.length > 0) {\n            key = parts.shift().trim();\n        }\n        if (parts.length > 0) {\n            component = parts.shift().trim();\n        }\n        if (parts.length > 0) {\n            param = parts.join(',').trim();\n        }\n\n        if (param !== '') {\n            // Allow variable expansion in the param part only.\n            param = helper(param, context);\n        }\n        // Allow json formatted $a arguments.\n        if ((param.indexOf('{') === 0) && (param.indexOf('{{') !== 0)) {\n            param = JSON.parse(param);\n        }\n\n        var index = this.requiredStrings.length;\n        this.requiredStrings.push({key: key, component: component, param: param});\n\n        // The placeholder must not use {{}} as those can be misinterpreted by the engine.\n        return '[[_s' + index + ']]';\n    };\n\n    /**\n     * Quote helper used to wrap content in quotes, and escape all quotes present in the content.\n     *\n     * @method quoteHelper\n     * @private\n     * @param {object} context The current mustache context.\n     * @param {string} sectionText The text to parse the arguments from.\n     * @param {function} helper Used to render subsections of the text.\n     * @return {string}\n     */\n    Renderer.prototype.quoteHelper = function(context, sectionText, helper) {\n        var content = helper(sectionText.trim(), context);\n\n        // Escape the {{ and the \".\n        // This involves wrapping {{, and }} in change delimeter tags.\n        content = content\n            .replace('\"', '\\\\\"')\n            .replace(/([\\{\\}]{2,3})/g, '{{=<% %>=}}$1<%={{ }}=%>')\n            ;\n        return '\"' + content + '\"';\n    };\n\n    /**\n     * Shorten text helper to truncate text and append a trailing ellipsis.\n     *\n     * @method shortenTextHelper\n     * @private\n     * @param {object} context The current mustache context.\n     * @param {string} sectionText The text to parse the arguments from.\n     * @param {function} helper Used to render subsections of the text.\n     * @return {string}\n     */\n    Renderer.prototype.shortenTextHelper = function(context, sectionText, helper) {\n        // Non-greedy split on comma to grab section text into the length and\n        // text parts.\n        var regex = /(.*?),(.*)/;\n        var parts = sectionText.match(regex);\n        // The length is the part matched in the first set of parethesis.\n        var length = parts[1].trim();\n        // The length is the part matched in the second set of parethesis.\n        var text = parts[2].trim();\n        var content = helper(text, context);\n        return Truncate.truncate(content, {\n            length: length,\n            words: true,\n            ellipsis: '...'\n        });\n    };\n\n    /**\n     * User date helper to render user dates from timestamps.\n     *\n     * @method userDateHelper\n     * @private\n     * @param {object} context The current mustache context.\n     * @param {string} sectionText The text to parse the arguments from.\n     * @param {function} helper Used to render subsections of the text.\n     * @return {string}\n     */\n    Renderer.prototype.userDateHelper = function(context, sectionText, helper) {\n        // Non-greedy split on comma to grab the timestamp and format.\n        var regex = /(.*?),(.*)/;\n        var parts = sectionText.match(regex);\n        var timestamp = helper(parts[1].trim(), context);\n        var format = helper(parts[2].trim(), context);\n        var index = this.requiredDates.length;\n\n        this.requiredDates.push({\n            timestamp: timestamp,\n            format: format\n        });\n\n        return '[[_t_' + index + ']]';\n    };\n\n    Renderer.prototype.viewStoreHelper = function(context, sectionText, helper) {\n        return helper(sectionText);\n    };\n\n    Renderer.prototype.componentHelper = function(context, sectionText, helper) {\n        return `<div react-component='MustacheComponent' template='${sectionText.trim()}'></div>`;\n    };\n\n    /**\n     * Add some common helper functions to all context objects passed to templates.\n     * These helpers match exactly the helpers available in php.\n     *\n     * @method addHelpers\n     * @private\n     * @param {Object} context Simple types used as the context for the template.\n     * @param {String} themeName We set this multiple times, because there are async calls.\n     */\n    Renderer.prototype.addHelpers = function(context, themeName) {\n        this.currentThemeName = themeName;\n        this.requiredStrings = [];\n        this.requiredJS = [];\n        context.uniqid = (uniqInstances++);\n        context.str = function() {\n          return this.stringHelper.bind(this, context);\n        }.bind(this);\n        context.pix = function() {\n          return this.pixHelper.bind(this, context);\n        }.bind(this);\n        context.js = function() {\n          return this.jsHelper.bind(this, context);\n        }.bind(this);\n        context.quote = function() {\n          return this.quoteHelper.bind(this, context);\n        }.bind(this);\n        context.shortentext = function() {\n          return this.shortenTextHelper.bind(this, context);\n        }.bind(this);\n        context.userdate = function() {\n          return this.userDateHelper.bind(this, context);\n        }.bind(this);\n        context.viewstore = function() {\n          return this.viewStoreHelper.bind(this, context);\n        }.bind(this);\n        context.component = function() {\n          return this.componentHelper.bind(this, context);\n        }.bind(this);\n        context.globals = {config: config};\n        context.currentTheme = themeName;\n    };\n\n    /**\n     * Get all the JS blocks from the last rendered template.\n     *\n     * @method getJS\n     * @private\n     * @return {string}\n     */\n    Renderer.prototype.getJS = function() {\n        var js = '';\n        if (this.requiredJS.length > 0) {\n            js = this.requiredJS.join(\";\\n\");\n        }\n\n        return js;\n    };\n\n    /**\n     * Treat strings in content.\n     *\n     * The purpose of this method is to replace the placeholders found in a string\n     * with the their respective translated strings.\n     *\n     * Previously we were relying on String.replace() but the complexity increased with\n     * the numbers of strings to replace. Now we manually walk the string and stop at each\n     * placeholder we find, only then we replace it. Most of the time we will\n     * replace all the placeholders in a single run, at times we will need a few\n     * more runs when placeholders are replaced with strings that contain placeholders\n     * themselves.\n     *\n     * @param {String} content The content in which string placeholders are to be found.\n     * @param {Array} strings The strings to replace with.\n     * @return {String} The treated content.\n     */\n    Renderer.prototype.treatStringsInContent = function(content, strings) {\n        var pattern = /\\[\\[_s\\d+\\]\\]/,\n            treated,\n            index,\n            strIndex,\n            walker,\n            char,\n            strFinal;\n\n        do {\n            treated = '';\n            index = content.search(pattern);\n            while (index > -1) {\n\n                // Copy the part prior to the placeholder to the treated string.\n                treated += content.substring(0, index);\n                content = content.substr(index);\n                strIndex = '';\n                walker = 4; // 4 is the length of '[[_s'.\n\n                // Walk the characters to manually extract the index of the string from the placeholder.\n                char = content.substr(walker, 1);\n                do {\n                    strIndex += char;\n                    walker++;\n                    char = content.substr(walker, 1);\n                } while (char != ']');\n\n                // Get the string, add it to the treated result, and remove the placeholder from the content to treat.\n                strFinal = strings[parseInt(strIndex, 10)];\n                if (typeof strFinal === 'undefined') {\n                    Log.debug('Could not find string for pattern [[_s' + strIndex + ']].');\n                    strFinal = '';\n                }\n                treated += strFinal;\n                content = content.substr(6 + strIndex.length); // 6 is the length of the placeholder without the index: '[[_s]]'.\n\n                // Find the next placeholder.\n                index = content.search(pattern);\n            }\n\n            // The content becomes the treated part with the rest of the content.\n            content = treated + content;\n\n            // Check if we need to walk the content again, in case strings contained placeholders.\n            index = content.search(pattern);\n\n        } while (index > -1);\n\n        return content;\n    };\n\n    /**\n     * Treat strings in content.\n     *\n     * The purpose of this method is to replace the date placeholders found in the\n     * content with the their respective translated dates.\n     *\n     * @param {String} content The content in which string placeholders are to be found.\n     * @param {Array} strings The strings to replace with.\n     * @return {String} The treated content.\n     */\n    Renderer.prototype.treatDatesInContent = function(content, dates) {\n        dates.forEach(function(date, index) {\n            var key = '\\\\[\\\\[_t_' + index + '\\\\]\\\\]';\n            var re = new RegExp(key, 'g');\n            content = content.replace(re, date);\n        });\n\n        return content;\n    };\n\n    /**\n     * Render a template and then call the callback with the result.\n     *\n     * @method doRender\n     * @private\n     * @param {string} templateSource The mustache template to render.\n     * @param {Object} context Simple types used as the context for the template.\n     * @param {String} themeName Name of the current theme.\n     * @return {Promise} object\n     */\n    Renderer.prototype.doRender = function(templateSource, context, themeName) {\n        this.currentThemeName = themeName;\n        var iconTemplate = iconSystem.getTemplateName();\n\n        return this.getTemplate(iconTemplate).then(function() {\n            this.addHelpers(context, themeName);\n            var result = mustache.render(templateSource, context, this.partialHelper.bind(this));\n            return $.Deferred().resolve(result.trim(), this.getJS()).promise();\n        }.bind(this))\n        .then(function(html, js) {\n            if (this.requiredStrings.length > 0) {\n                return str.get_strings(this.requiredStrings).then(function(strings) {\n\n                    // Make sure string substitutions are done for the userdate\n                    // values as well.\n                    this.requiredDates = this.requiredDates.map(function(date) {\n                        return {\n                            timestamp: this.treatStringsInContent(date.timestamp, strings),\n                            format: this.treatStringsInContent(date.format, strings)\n                        };\n                    }.bind(this));\n\n                    // Why do we not do another call the render here?\n                    //\n                    // Because that would expose DOS holes. E.g.\n                    // I create an assignment called \"{{fish\" which\n                    // would get inserted in the template in the first pass\n                    // and cause the template to die on the second pass (unbalanced).\n                    html = this.treatStringsInContent(html, strings);\n                    js = this.treatStringsInContent(js, strings);\n                    return $.Deferred().resolve(html, js).promise();\n                }.bind(this));\n            }\n\n            return $.Deferred().resolve(html, js).promise();\n        }.bind(this))\n        .then(function(html, js) {\n            // This has to happen after the strings replacement because you can\n            // use the string helper in content for the user date helper.\n            if (this.requiredDates.length > 0) {\n                return UserDate.get(this.requiredDates).then(function(dates) {\n                    html = this.treatDatesInContent(html, dates);\n                    js = this.treatDatesInContent(js, dates);\n                    return $.Deferred().resolve(html, js).promise();\n                }.bind(this));\n            }\n\n            return $.Deferred().resolve(html, js).promise();\n        }.bind(this));\n    };\n\n    /**\n     * Execute a block of JS returned from a template.\n     * Call this AFTER adding the template HTML into the DOM so the nodes can be found.\n     *\n     * @method runTemplateJS\n     * @param {string} source - A block of javascript.\n     */\n    var runTemplateJS = function(source) {\n        if (source.trim() !== '') {\n            var newscript = $('<script>').attr('type', 'text/javascript').html(source);\n            $('head').append(newscript);\n        }\n    };\n\n    /**\n     * Do some DOM replacement and trigger correct events and fire javascript.\n     *\n     * @method domReplace\n     * @private\n     * @param {JQuery} element - Element or selector to replace.\n     * @param {String} newHTML - HTML to insert / replace.\n     * @param {String} newJS - Javascript to run after the insertion.\n     * @param {Boolean} replaceChildNodes - Replace only the childnodes, alternative is to replace the entire node.\n     */\n    var domReplace = function(element, newHTML, newJS, replaceChildNodes) {\n        var replaceNode = $(element);\n        if (replaceNode.length) {\n            // First create the dom nodes so we have a reference to them.\n            var newNodes = $(newHTML);\n            var yuiNodes = null;\n            // Do the replacement in the page.\n            if (replaceChildNodes) {\n                // Cleanup any YUI event listeners attached to any of these nodes.\n                yuiNodes = new Y.NodeList(replaceNode.children().get());\n                yuiNodes.destroy(true);\n\n                // JQuery will cleanup after itself.\n                replaceNode.empty();\n                replaceNode.append(newNodes);\n            } else {\n                // Cleanup any YUI event listeners attached to any of these nodes.\n                yuiNodes = new Y.NodeList(replaceNode.get());\n                yuiNodes.destroy(true);\n\n                // JQuery will cleanup after itself.\n                replaceNode.replaceWith(newNodes);\n            }\n            // Run any javascript associated with the new HTML.\n            runTemplateJS(newJS);\n            // Notify all filters about the new content.\n            event.notifyFilterContentUpdated(newNodes);\n        }\n    };\n\n    /**\n     * Scan a template source for partial tags and return a list of the found partials.\n     *\n     * @method scanForPartials\n     * @private\n     * @param {string} templateSource - source template to scan.\n     * @return {Array} List of partials.\n     */\n    Renderer.prototype.scanForPartials = function(templateSource) {\n        var tokens = mustache.parse(templateSource),\n            partials = [];\n\n        var findPartial = function(tokens, partials) {\n            var i, token;\n            for (i = 0; i < tokens.length; i++) {\n                token = tokens[i];\n                if (token[0] == '>' || token[0] == '<') {\n                    partials.push(token[1]);\n                }\n                if (token.length > 4) {\n                    findPartial(token[4], partials);\n                }\n            }\n        };\n\n        findPartial(tokens, partials);\n\n        return partials;\n    };\n\n    /**\n     * Load a template and scan it for partials. Recursively fetch the partials.\n     *\n     * @method cachePartials\n     * @private\n     * @param {string} templateName - should consist of the component and the name of the template like this:\n     *                              core/menu (lib/templates/menu.mustache) or\n     *                              tool_bananas/yellow (admin/tool/bananas/templates/yellow.mustache)\n     * @return {Promise} JQuery promise object resolved when all partials are in the cache.\n     */\n    Renderer.prototype.cachePartials = function(templateName) {\n        return this.getTemplate(templateName).then(function(templateSource) {\n            var i;\n            var partials = this.scanForPartials(templateSource);\n            var fetchThemAll = [];\n\n            for (i = 0; i < partials.length; i++) {\n                var searchKey = this.currentThemeName + '/' + partials[i];\n                if (searchKey in templatePromises) {\n                    fetchThemAll.push(templatePromises[searchKey]);\n                } else {\n                    fetchThemAll.push(this.cachePartials(partials[i]));\n                }\n            }\n\n            return $.when.apply($, fetchThemAll).then(function() {\n                return templateSource;\n            });\n        }.bind(this));\n    };\n\n    /**\n     * Load a template and call doRender on it.\n     *\n     * @method render\n     * @private\n     * @param {string} templateName - should consist of the component and the name of the template like this:\n     *                              core/menu (lib/templates/menu.mustache) or\n     *                              tool_bananas/yellow (admin/tool/bananas/templates/yellow.mustache)\n     * @param {Object} context - Could be array, string or simple value for the context of the template.\n     * @param {string} themeName - Name of the current theme.\n     * @return {Promise} JQuery promise object resolved when the template has been rendered.\n     */\n    Renderer.prototype.render = function(templateName, context, themeName) {\n        if (typeof (themeName) === \"undefined\") {\n            // System context by default.\n            themeName = config.theme;\n        }\n\n        this.currentThemeName = themeName;\n\n        // Preload the module to do the icon rendering based on the theme iconsystem.\n        var modulename = config.iconsystemmodule;\n\n        var ready = $.Deferred();\n        require([modulename], function(System) {\n            var system = new System();\n            if (!(system instanceof IconSystem)) {\n                ready.reject('Invalid icon system specified' + config.iconsystem);\n            } else {\n                iconSystem = system;\n                system.init().then(ready.resolve).catch(notification.exception);\n            }\n        });\n\n        return ready.then(function() {\n                return this.cachePartials(templateName);\n            }.bind(this)).then(function(templateSource) {\n                return this.doRender(templateSource, context, themeName);\n            }.bind(this));\n    };\n\n    /**\n     * Prepend some HTML to a node and trigger events and fire javascript.\n     *\n     * @method domPrepend\n     * @private\n     * @param {jQuery|String} element - Element or selector to prepend HTML to\n     * @param {String} html - HTML to prepend\n     * @param {String} js - Javascript to run after we prepend the html\n     */\n    var domPrepend = function(element, html, js) {\n        var node = $(element);\n        if (node.length) {\n            // Prepend the html.\n            node.prepend(html);\n            // Run any javascript associated with the new HTML.\n            runTemplateJS(js);\n            // Notify all filters about the new content.\n            event.notifyFilterContentUpdated(node);\n        }\n    };\n\n    /**\n     * Append some HTML to a node and trigger events and fire javascript.\n     *\n     * @method domAppend\n     * @private\n     * @param {jQuery|String} element - Element or selector to append HTML to\n     * @param {String} html - HTML to append\n     * @param {String} js - Javascript to run after we append the html\n     */\n    var domAppend = function(element, html, js) {\n        var node = $(element);\n        if (node.length) {\n            // Append the html.\n            node.append(html);\n            // Run any javascript associated with the new HTML.\n            runTemplateJS(js);\n            // Notify all filters about the new content.\n            event.notifyFilterContentUpdated(node);\n        }\n    };\n\n    return /** @alias module:core/templates */ {\n        // Public variables and functions.\n        /**\n         * Every call to render creates a new instance of the class and calls render on it. This\n         * means each render call has it's own class variables.\n         *\n         * @method render\n         * @private\n         * @param {string} templateName - should consist of the component and the name of the template like this:\n         *                              core/menu (lib/templates/menu.mustache) or\n         *                              tool_bananas/yellow (admin/tool/bananas/templates/yellow.mustache)\n         * @param {Object} context - Could be array, string or simple value for the context of the template.\n         * @param {string} themeName - Name of the current theme.\n         * @return {Promise} JQuery promise object resolved when the template has been rendered.\n         */\n        render: function(templateName, context, themeName) {\n            var renderer = new Renderer();\n            return renderer.render(templateName, context, themeName);\n        },\n\n        /**\n         * Every call to renderIcon creates a new instance of the class and calls renderIcon on it. This\n         * means each render call has it's own class variables.\n         *\n         * @method renderIcon\n         * @public\n         * @param {string} key - Icon key.\n         * @param {string} component - Icon component\n         * @param {string} title - Icon title\n         * @return {Promise} JQuery promise object resolved when the pix has been rendered.\n         */\n        renderPix: function(key, component, title) {\n            var renderer = new Renderer();\n            return renderer.renderIcon(key, component, title);\n        },\n\n        /**\n         * Execute a block of JS returned from a template.\n         * Call this AFTER adding the template HTML into the DOM so the nodes can be found.\n         *\n         * @method runTemplateJS\n         * @param {string} source - A block of javascript.\n         */\n        runTemplateJS: runTemplateJS,\n\n        /**\n         * Replace a node in the page with some new HTML and run the JS.\n         *\n         * @method replaceNodeContents\n         * @param {JQuery} element - Element or selector to replace.\n         * @param {String} newHTML - HTML to insert / replace.\n         * @param {String} newJS - Javascript to run after the insertion.\n         */\n        replaceNodeContents: function(element, newHTML, newJS) {\n            domReplace(element, newHTML, newJS, true);\n        },\n\n        /**\n         * Insert a node in the page with some new HTML and run the JS.\n         *\n         * @method replaceNode\n         * @param {JQuery} element - Element or selector to replace.\n         * @param {String} newHTML - HTML to insert / replace.\n         * @param {String} newJS - Javascript to run after the insertion.\n         */\n        replaceNode: function(element, newHTML, newJS) {\n            domReplace(element, newHTML, newJS, false);\n        },\n\n        /**\n         * Prepend some HTML to a node and trigger events and fire javascript.\n         *\n         * @method prependNodeContents\n         * @param {jQuery|String} element - Element or selector to prepend HTML to\n         * @param {String} html - HTML to prepend\n         * @param {String} js - Javascript to run after we prepend the html\n         */\n        prependNodeContents: function(element, html, js) {\n            domPrepend(element, html, js);\n        },\n\n        /**\n         * Append some HTML to a node and trigger events and fire javascript.\n         *\n         * @method appendNodeContents\n         * @param {jQuery|String} element - Element or selector to append HTML to\n         * @param {String} html - HTML to append\n         * @param {String} js - Javascript to run after we append the html\n         */\n        appendNodeContents: function(element, html, js) {\n            domAppend(element, html, js);\n        },\n\n        getTemplateSource: function(templateName) {\n            var renderer = new Renderer();\n            return renderer.cachePartials(templateName);\n        },\n\n        syncRender: function(templateSource, context, themeName) {\n            var renderer = new Renderer();\n            // Shallow copy the context because we insist on modifying it below...\n            //let templatexContext = {...context};\n            //renderer.addHelpers(templatexContext, themeName);\n            //renderer.addHelpers(context, themeName);\n            return mustache.render(templateSource, context, renderer.partialHelper.bind(renderer));\n        },\n\n        addHelpers: function(context) {\n            var renderer = new Renderer();\n            renderer.addHelpers(context);\n            return context;\n        }\n    };\n});\n"]}