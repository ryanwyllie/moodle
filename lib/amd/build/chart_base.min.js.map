{"version":3,"sources":["../src/chart_base.js"],"names":["define","Series","Axis","Base","_series","_labels","_xaxes","_yaxes","_setDefaults","prototype","_title","COLORSET","_configColorSet","TYPE","addSeries","series","_validateSeries","push","getColor","configColorSet","getConfigColorSet","setColor","length","create","Klass","data","Chart","setConfigColorSet","config_colorset","setLabels","labels","setTitle","title","forEach","seriesData","axes","x","axisData","i","setXAxis","y","setYAxis","__getAxis","xy","index","createIfNotExists","axis","setAxis","bind","Error","getLabels","getSeries","getTitle","getType","getXAxes","getXAxis","getYAxes","getYAxis","colorset","_validateAxis","getCount"],"mappings":"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","file":"chart_base.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Chart base.\n *\n * @package    core\n * @copyright  2016 Frédéric Massart - FMCorz.net\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @module     core/chart_base\n */\ndefine(['core/chart_series', 'core/chart_axis'], function(Series, Axis) {\n\n    /**\n     * Chart base.\n     *\n     * The constructor of a chart must never take any argument.\n     *\n     * {@link module:core/chart_base#_setDefault} to set the defaults on instantiation.\n     *\n     * @alias module:core/chart_base\n     * @class\n     */\n    function Base() {\n        this._series = [];\n        this._labels = [];\n        this._xaxes = [];\n        this._yaxes = [];\n\n        this._setDefaults();\n    }\n\n    /**\n     * The series constituting this chart.\n     *\n     * @protected\n     * @type {module:core/chart_series[]}\n     */\n    Base.prototype._series = null;\n\n    /**\n     * The labels of the X axis when categorised.\n     *\n     * @protected\n     * @type {String[]}\n     */\n    Base.prototype._labels = null;\n\n    /**\n     * The title of the chart.\n     *\n     * @protected\n     * @type {String}\n     */\n    Base.prototype._title = null;\n\n    /**\n     * The X axes.\n     *\n     * @protected\n     * @type {module:core/chart_axis[]}\n     */\n    Base.prototype._xaxes = null;\n\n    /**\n     * The Y axes.\n     *\n     * @protected\n     * @type {module:core/chart_axis[]}\n     */\n    Base.prototype._yaxes = null;\n\n    /**\n     * Colours to pick from when automatically assigning them.\n     *\n     * @const\n     * @type {String[]}\n     */\n    Base.prototype.COLORSET = ['#f3c300', '#875692', '#f38400', '#a1caf1', '#be0032', '#c2b280', '#7f180d', '#008856',\n            '#e68fac', '#0067a5'];\n\n    /**\n     * Set of colours defined by setting $CFG->chart_colorset to be picked when automatically assigning them.\n     *\n     * @type {String[]}\n     * @protected\n     */\n    Base.prototype._configColorSet = null;\n\n    /**\n     * The type of chart.\n     *\n     * @abstract\n     * @type {String}\n     * @const\n     */\n    Base.prototype.TYPE = null;\n\n    /**\n     * Add a series to the chart.\n     *\n     * This will automatically assign a color to the series if it does not have one.\n     *\n     * @param {module:core/chart_series} series The series to add.\n     */\n    Base.prototype.addSeries = function(series) {\n        this._validateSeries(series);\n        this._series.push(series);\n\n        // Give a default color from the set.\n        if (series.getColor() === null) {\n            var configColorSet = this.getConfigColorSet() || Base.prototype.COLORSET;\n            series.setColor(configColorSet[this._series.length % configColorSet.length]);\n        }\n    };\n\n    /**\n     * Create a new instance of a chart from serialised data.\n     *\n     * the serialised attributes they offer and support.\n     *\n     * @static\n     * @method create\n     * @param {module:core/chart_base} Klass The class oject representing the type of chart to instantiate.\n     * @param {Object} data The data of the chart.\n     * @return {module:core/chart_base}\n     */\n    Base.prototype.create = function(Klass, data) {\n        // TODO Not convinced about the usage of Klass here but I can't figure out a way\n        // to have a reference to the class in the sub classes, in PHP I'd do new self().\n        var Chart = new Klass();\n        Chart.setConfigColorSet(data.config_colorset);\n        Chart.setLabels(data.labels);\n        Chart.setTitle(data.title);\n        data.series.forEach(function(seriesData) {\n            Chart.addSeries(Series.prototype.create(seriesData));\n        });\n        data.axes.x.forEach(function(axisData, i) {\n            Chart.setXAxis(Axis.prototype.create(axisData), i);\n        });\n        data.axes.y.forEach(function(axisData, i) {\n            Chart.setYAxis(Axis.prototype.create(axisData), i);\n        });\n        return Chart;\n    };\n\n    /**\n     * Get an axis.\n     *\n     * @private\n     * @param {String} xy Accepts the values 'x' or 'y'.\n     * @param {Number} [index=0] The index of the axis of its type.\n     * @param {Bool} [createIfNotExists=false] When true, create an instance if it does not exist.\n     * @return {module:core/chart_axis}\n     */\n    Base.prototype.__getAxis = function(xy, index, createIfNotExists) {\n        var axes = xy === 'x' ? this._xaxes : this._yaxes,\n            setAxis = (xy === 'x' ? this.setXAxis : this.setYAxis).bind(this),\n            axis;\n\n        index = typeof index === 'undefined' ? 0 : index;\n        createIfNotExists = typeof createIfNotExists === 'undefined' ? false : createIfNotExists;\n        axis = axes[index];\n\n        if (typeof axis === 'undefined') {\n            if (!createIfNotExists) {\n                throw new Error('Unknown axis.');\n            }\n            axis = new Axis();\n            setAxis(axis, index);\n        }\n\n        return axis;\n    };\n\n    /**\n     * Get colours defined by setting.\n     *\n     * @return {String[]}\n     */\n    Base.prototype.getConfigColorSet = function() {\n        return this._configColorSet;\n    };\n\n    /**\n     * Get the labels of the X axis.\n     *\n     * @return {String[]}\n     */\n    Base.prototype.getLabels = function() {\n        return this._labels;\n    };\n\n    /**\n     * Get the series.\n     *\n     * @return {module:core/chart_series[]}\n     */\n    Base.prototype.getSeries = function() {\n        return this._series;\n    };\n\n    /**\n     * Get the title of the chart.\n     *\n     * @return {String}\n     */\n    Base.prototype.getTitle = function() {\n        return this._title;\n    };\n\n    /**\n     * Get the type of chart.\n     *\n     * @see module:core/chart_base#TYPE\n     * @return {String}\n     */\n    Base.prototype.getType = function() {\n        if (!this.TYPE) {\n            throw new Error('The TYPE property has not been set.');\n        }\n        return this.TYPE;\n    };\n\n    /**\n     * Get the X axes.\n     *\n     * @return {module:core/chart_axis[]}\n     */\n    Base.prototype.getXAxes = function() {\n        return this._xaxes;\n    };\n\n    /**\n     * Get an X axis.\n     *\n     * @param {Number} [index=0] The index of the axis.\n     * @param {Bool} [createIfNotExists=false] Create the instance of it does not exist at index.\n     * @return {module:core/chart_axis}\n     */\n    Base.prototype.getXAxis = function(index, createIfNotExists) {\n        return this.__getAxis('x', index, createIfNotExists);\n    };\n\n    /**\n     * Get the Y axes.\n     *\n     * @return {module:core/chart_axis[]}\n     */\n    Base.prototype.getYAxes = function() {\n        return this._yaxes;\n    };\n\n    /**\n     * Get an Y axis.\n     *\n     * @param {Number} [index=0] The index of the axis.\n     * @param {Bool} [createIfNotExists=false] Create the instance of it does not exist at index.\n     * @return {module:core/chart_axis}\n     */\n    Base.prototype.getYAxis = function(index, createIfNotExists) {\n        return this.__getAxis('y', index, createIfNotExists);\n    };\n\n    /**\n     * Set colours defined by setting.\n     *\n     * @param {String[]} colorset An array of css colours.\n     * @protected\n     */\n    Base.prototype.setConfigColorSet = function(colorset) {\n        this._configColorSet = colorset;\n    };\n\n    /**\n     * Set the defaults for this chart type.\n     *\n     * Child classes can extend this to set defaults values on instantiation.\n     *\n     * emphasize and self-document the defaults values set by the chart type.\n     *\n     * @protected\n     */\n    Base.prototype._setDefaults = function() {\n        // For the children to extend.\n    };\n\n    /**\n     * Set the labels of the X axis.\n     *\n     * This requires for each series to contain strictly as many values as there\n     * are labels.\n     *\n     * @param {String[]} labels The labels.\n     */\n    Base.prototype.setLabels = function(labels) {\n        if (labels.length && this._series.length && this._series[0].length != labels.length) {\n            throw new Error('Series must match label values.');\n        }\n        this._labels = labels;\n    };\n\n    /**\n     * Set the title of the chart.\n     *\n     * @param {String} title The title.\n     */\n    Base.prototype.setTitle = function(title) {\n        this._title = title;\n    };\n\n    /**\n     * Set an X axis.\n     *\n     * Note that this will override any predefined axis without warning.\n     *\n     * @param {module:core/chart_axis} axis The axis.\n     * @param {Number} [index=0] The index of the axis.\n     */\n    Base.prototype.setXAxis = function(axis, index) {\n        index = typeof index === 'undefined' ? 0 : index;\n        this._validateAxis('x', axis, index);\n        this._xaxes[index] = axis;\n    };\n\n    /**\n     * Set a Y axis.\n     *\n     * Note that this will override any predefined axis without warning.\n     *\n     * @param {module:core/chart_axis} axis The axis.\n     * @param {Number} [index=0] The index of the axis.\n     */\n    Base.prototype.setYAxis = function(axis, index) {\n        index = typeof index === 'undefined' ? 0 : index;\n        this._validateAxis('y', axis, index);\n        this._yaxes[index] = axis;\n    };\n\n    /**\n     * Validate an axis.\n     *\n     * @protected\n     * @param {String} xy X or Y axis.\n     * @param {module:core/chart_axis} axis The axis to validate.\n     * @param {Number} [index=0] The index of the axis.\n     */\n    Base.prototype._validateAxis = function(xy, axis, index) {\n        index = typeof index === 'undefined' ? 0 : index;\n        if (index > 0) {\n            var axes = xy == 'x' ? this._xaxes : this._yaxes;\n            if (typeof axes[index - 1] === 'undefined') {\n                throw new Error('Missing ' + xy + ' axis at index lower than ' + index);\n            }\n        }\n    };\n\n    /**\n     * Validate a series.\n     *\n     * @protected\n     * @param {module:core/chart_series} series The series to validate.\n     */\n    Base.prototype._validateSeries = function(series) {\n        if (this._series.length && this._series[0].getCount() != series.getCount()) {\n            throw new Error('Series do not have an equal number of values.');\n\n        } else if (this._labels.length && this._labels.length != series.getCount()) {\n            throw new Error('Series must match label values.');\n        }\n    };\n\n    return Base;\n\n});\n"]}