'use strict';var _typeof='function'==typeof Symbol&&'symbol'==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&'function'==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?'symbol':typeof obj};(function(root,definition){'use strict';'function'==typeof define&&define.amd?define('core/loglevel',definition):'object'===('undefined'==typeof module?'undefined':_typeof(module))&&module.exports?module.exports=definition():root.log=definition()})(void 0,function(){'use strict';function bindMethod(obj,methodName){var method=obj[methodName];if('function'==typeof method.bind)return method.bind(obj);try{return Function.prototype.bind.call(method,obj)}catch(e){return function(){return Function.prototype.apply.apply(method,[obj,arguments])}}}function realMethod(methodName){return'debug'===methodName&&(methodName='log'),'undefined'!==('undefined'==typeof console?'undefined':_typeof(console))&&(void 0===console[methodName]?void 0===console.log?noop:bindMethod(console,'log'):bindMethod(console,methodName))}function replaceLoggingMethods(level,loggerName){for(var methodName,i=0;i<logMethods.length;i++)methodName=logMethods[i],this[methodName]=i<level?noop:this.methodFactory(methodName,level,loggerName);this.log=this.debug}function enableLoggingWhenConsoleArrives(methodName,level,loggerName){return function(){'undefined'!==('undefined'==typeof console?'undefined':_typeof(console))&&(replaceLoggingMethods.call(this,level,loggerName),this[methodName].apply(this,arguments))}}function defaultMethodFactory(methodName){return realMethod(methodName)||enableLoggingWhenConsoleArrives.apply(this,arguments)}function Logger(name,defaultLevel,factory){function persistLevelIfPossible(levelNum){var levelName=(logMethods[levelNum]||'silent').toUpperCase();if('undefined'!==('undefined'==typeof window?'undefined':_typeof(window))){try{return void(window.localStorage[storageKey]=levelName)}catch(ignore){}try{window.document.cookie=encodeURIComponent(storageKey)+'='+levelName+';'}catch(ignore){}}}function getPersistedLevel(){var storedLevel;if('undefined'!==('undefined'==typeof window?'undefined':_typeof(window))){try{storedLevel=window.localStorage[storageKey]}catch(ignore){}if('undefined'===('undefined'==typeof storedLevel?'undefined':_typeof(storedLevel)))try{var cookie=window.document.cookie,location=cookie.indexOf(encodeURIComponent(storageKey)+'=');-1!==location&&(storedLevel=/^([^;]+)/.exec(cookie.slice(location))[1])}catch(ignore){}return void 0===self.levels[storedLevel]&&(storedLevel=void 0),storedLevel}}var currentLevel,self=this,storageKey='loglevel';name&&(storageKey+=':'+name),self.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},self.methodFactory=factory||defaultMethodFactory,self.getLevel=function(){return currentLevel},self.setLevel=function(level,persist){if('string'==typeof level&&void 0!==self.levels[level.toUpperCase()]&&(level=self.levels[level.toUpperCase()]),!('number'==typeof level&&0<=level&&level<=self.levels.SILENT))throw'log.setLevel() called with invalid level: '+level;else if(currentLevel=level,!1!==persist&&persistLevelIfPossible(level),replaceLoggingMethods.call(self,level,name),'undefined'===('undefined'==typeof console?'undefined':_typeof(console))&&level<self.levels.SILENT)return'No console available for logging'},self.setDefaultLevel=function(level){getPersistedLevel()||self.setLevel(level,!1)},self.enableAll=function(persist){self.setLevel(self.levels.TRACE,persist)},self.disableAll=function(persist){self.setLevel(self.levels.SILENT,persist)};var initialLevel=getPersistedLevel();null==initialLevel&&(initialLevel=null==defaultLevel?'WARN':defaultLevel),self.setLevel(initialLevel,!1)}var noop=function(){},logMethods=['trace','debug','info','warn','error'],defaultLogger=new Logger,_loggersByName={};defaultLogger.getLogger=function(name){if('string'!=typeof name||''===name)throw new TypeError('You must supply a name when creating a logger.');var logger=_loggersByName[name];return logger||(logger=_loggersByName[name]=new Logger(name,defaultLogger.getLevel(),defaultLogger.methodFactory)),logger};var _log='undefined'===('undefined'==typeof window?'undefined':_typeof(window))?void 0:window.log;return defaultLogger.noConflict=function(){return'undefined'!==('undefined'==typeof window?'undefined':_typeof(window))&&window.log===defaultLogger&&(window.log=_log),defaultLogger},defaultLogger});
//# sourceMappingURL=loglevel.min.js.map
