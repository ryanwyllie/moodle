{"version":3,"sources":["../src/paged_content_pages.js"],"names":["define","$","Templates","Notification","PagedContentEvents","SELECTORS","ROOT","PAGE_REGION","ACTIVE_PAGE_REGION","TEMPLATES","PAGING_CONTENT_ITEM","LOADING","findPage","root","pageNumber","find","startLoading","deferred","Deferred","render","visible","then","html","loadingSpinner","timerId","setTimeout","css","appendTo","always","clearTimeout","remove","fail","exception","renderPagePromise","pagePromise","pageJS","page","content","appendNodeContents","resolve","reject","showPages","pagesData","renderPagesContentCallback","existingPages","newPageData","newPagesPromise","forEach","pageData","existingPage","length","push","promises","renderPagePromises","map","promise","index","when","apply","newPages","Array","prototype","slice","call","arguments","loadingPromise","pagesToShow","concat","addClass","removeClass","init","eventElement","on","SHOW_PAGES","e","rootSelector"],"mappings":"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","file":"paged_content_pages.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for showing/hiding pages of content.\n *\n * @module     core/paged_content_pages\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n    [\n        'jquery',\n        'core/templates',\n        'core/notification',\n        'core/paged_content_events'\n    ],\n    function(\n        $,\n        Templates,\n        Notification,\n        PagedContentEvents\n    ) {\n\n    var SELECTORS = {\n        ROOT: '[data-region=\"page-container\"]',\n        PAGE_REGION: '[data-region=\"paged-content-page\"]',\n        ACTIVE_PAGE_REGION: '[data-region=\"paged-content-page\"].active'\n    };\n\n    var TEMPLATES = {\n        PAGING_CONTENT_ITEM: 'core/paged_content_page',\n        LOADING: 'core/overlay_loading'\n    };\n\n    /**\n     * Find a page by the number.\n     *\n     * @param {object} root The root element.\n     * @param {Number} pageNumber The number of the page to be found.\n     * @returns {jQuery} The page.\n     */\n    var findPage = function(root, pageNumber) {\n        return root.find('[data-page=\"' + pageNumber + '\"]');\n    };\n\n    /**\n     * Show the loading spinner until the returned deferred is resolved by the\n     * calling code.\n     *\n     * @param {object} root The root element.\n     * @returns {promise} The page.\n     */\n    var startLoading = function(root) {\n        var deferred = $.Deferred();\n\n        Templates.render(TEMPLATES.LOADING, {visible: true})\n            .then(function(html) {\n                var loadingSpinner = $(html);\n                // Put this in a timer to give the calling code 100 milliseconds\n                // to render the content before we show the loading spinner. This\n                // helps prevent a loading icon flicker on close to instant\n                // rendering.\n                var timerId = setTimeout(function() {\n                    root.css('position', 'relative');\n                    loadingSpinner.appendTo(root);\n                }, 100);\n\n                deferred.always(function() {\n                    clearTimeout(timerId);\n                    // Remove the loading spinner when our deferred is resolved\n                    // by the calling code.\n                    loadingSpinner.remove();\n                    root.css('position', '');\n                    return;\n                });\n\n                return;\n            })\n            .fail(Notification.exception);\n\n        return deferred;\n    };\n\n    /**\n     * Render the result of the page promise in a paged content page.\n     *\n     * This function returns a promise that is resolved with the new paged content\n     * page.\n     *\n     * @param {object} root The root element.\n     * @param {promise} pagePromise The promise resolved with HTML and JS to render in the page.\n     * @param {int} pageNumber The page number.\n     * @returns {promise} The page.\n     */\n    var renderPagePromise = function(root, pagePromise, pageNumber) {\n        var deferred = $.Deferred();\n        pagePromise.then(function(html, pageJS) {\n            // When we get the contents to be rendered we can pass it in as the\n            // content for a new page.\n            Templates.render(TEMPLATES.PAGING_CONTENT_ITEM, {\n                page: pageNumber,\n                content: html\n            })\n            .then(function(html) {\n                // Make sure the JS we got from the page promise is being added\n                // to the page when we render the page.\n                Templates.appendNodeContents(root, html, pageJS);\n                var page = findPage(root, pageNumber);\n                deferred.resolve(page);\n                return;\n            })\n            .fail(function(exception) {\n                deferred.reject(exception);\n            })\n            .fail(Notification.exception);\n\n            return;\n        })\n        .fail(function(exception) {\n            deferred.reject(exception);\n            return;\n        })\n        .fail(Notification.exception);\n\n        return deferred;\n    };\n\n    /**\n     * Make one or more pages visible based on the SHOW_PAGES event. The show\n     * pages event provides data containing which pages should be shown as well\n     * as the limit and offset values for loading the items for each of those pages.\n     *\n     * The renderPagesContentCallback is provided this list of data to know which\n     * pages to load. E.g. the data to load 2 pages might look like:\n     * [\n     *      {\n     *          pageNumber: 1,\n     *          limit: 5,\n     *          offset: 0\n     *      },\n     *      {\n     *          pageNumber: 2,\n     *          limit: 5,\n     *          offset: 5\n     *      }\n     * ]\n     *\n     * The renderPagesContentCallback should return an array of promises, one for\n     * each page in the pages data, that is resolved with the HTML and JS for that page.\n     *\n     * If the renderPagesContentCallback is not provided then it is assumed that\n     * all pages have been rendered prior to initialising this module.\n     *\n     * @param {object} root The root element.\n     * @param {Number} pagesData The data for which pages need to be visible.\n     * @param {function} renderPagesContentCallback Render pages content.\n     */\n    var showPages = function(root, pagesData, renderPagesContentCallback) {\n        var existingPages = [];\n        var newPageData = [];\n        var newPagesPromise = $.Deferred();\n\n        // Check which of the pages being requests have previously been rendered\n        // so that we only ask for new pages to be rendered by the callback.\n        pagesData.forEach(function(pageData) {\n            var pageNumber = pageData.pageNumber;\n            var existingPage = findPage(root, pageNumber);\n            if (existingPage.length) {\n                existingPages.push(existingPage);\n            } else {\n                newPageData.push(pageData);\n            }\n        });\n\n        if (newPageData.length && typeof renderPagesContentCallback === 'function') {\n            // If we have pages we haven't previously seen then ask the client code\n            // to render them for us by calling the callback.\n            var promises = renderPagesContentCallback(newPageData);\n            // After the client has finished rendering each of the pages being asked\n            // for then begin our rendering process to put that content into paged\n            // content pages.\n            var renderPagePromises = promises.map(function(promise, index) {\n                // Create our promise for when our rendering will be completed.\n                return renderPagePromise(root, promise, newPageData[index].pageNumber);\n            });\n            // After each of our rendering promises have been completed then we can\n            // give all of the new pages to the next bit of code for handling.\n            $.when.apply($, renderPagePromises)\n                .then(function() {\n                    var newPages = Array.prototype.slice.call(arguments);\n                    // Resolve the promise with the list of newly rendered pages.\n                    newPagesPromise.resolve(newPages);\n                    return;\n                })\n                .fail(function(exception) {\n                    newPagesPromise.reject(exception);\n                    return;\n                })\n                .fail(Notification.exception);\n        } else {\n            // If there aren't any pages to load then immediately resolve the promise.\n            newPagesPromise.resolve([]);\n        }\n\n        var loadingPromise = startLoading(root);\n        newPagesPromise.then(function(newPages) {\n            // Once all of the new pages have been created then add them to any\n            // existing pages we have.\n            var pagesToShow = existingPages.concat(newPages);\n            // Hide all existing pages.\n            root.find(SELECTORS.PAGE_REGION).addClass('hidden');\n            // Show each of the pages that were requested.\n            pagesToShow.forEach(function(page) {\n                page.removeClass('hidden');\n            });\n\n            return;\n        })\n        .fail(Notification.exception)\n        .always(function() {\n            loadingPromise.resolve();\n        });\n    };\n\n    /**\n     * Initialise the module to listen for SHOW_PAGES events and render the\n     * appropriate pages using the provided renderPagesContentCallback function.\n     *\n     * The renderPagesContentCallback is provided a list of data to know which\n     * pages to load.\n     * E.g. the data to load 2 pages might look like:\n     * [\n     *      {\n     *          pageNumber: 1,\n     *          limit: 5,\n     *          offset: 0\n     *      },\n     *      {\n     *          pageNumber: 2,\n     *          limit: 5,\n     *          offset: 5\n     *      }\n     * ]\n     *\n     * The renderPagesContentCallback should return an array of promises, one for\n     * each page in the pages data, that is resolved with the HTML and JS for that page.\n     *\n     * If the renderPagesContentCallback is not provided then it is assumed that\n     * all pages have been rendered prior to initialising this module.\n     *\n     * The event element is the element to listen for the paged content events on.\n     *\n     * @param {object} root The root element.\n     * @param {object} eventElement The element to listen for events on.\n     * @param {function} renderPagesContentCallback Render pages content.\n     */\n    var init = function(root, eventElement, renderPagesContentCallback) {\n        root = $(root);\n        eventElement = $(eventElement);\n\n        eventElement.on(PagedContentEvents.SHOW_PAGES, function(e, pagesData) {\n            showPages(root, pagesData, renderPagesContentCallback);\n        });\n    };\n\n    return {\n        init: init,\n        rootSelector: SELECTORS.ROOT,\n    };\n});\n"]}