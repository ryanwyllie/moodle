{"version":3,"sources":["../src/truncate.js"],"names":["define","$","chop","start","space","charLengthAt","text","position","TypeError","string","size","length","index","cuSecond","cuFirst","charCodeAt","nextIndex","len","lengthMultiByte","count","i","getSliceLength","amount","truncate","html","options","append","fn","isNumeric","o","extend","defaults","each","self","noBreaks","find","replaceWith","ellipsisLength","ellipsis","textLength","excess","stripTags","words","sliced","slice","replaced","replace","truncated","oneWord","match","keepFirstWord","exec","contents","get","reverse","el","$el","remove","nodeType","splitAmount","splitText"],"mappings":"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","file":"truncate.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Description of import/upgrade into Moodle:\n * 1.) Download from https://github.com/pathable/truncate\n * 2.) Copy jquery.truncate.js into lib/amd/src/truncate.js\n * 3.) Edit truncate.js to return the $.truncate function as truncate\n * 4.) Apply Moodle changes from git commit 7172b33e241c4d42cff01f78bf8570408f43fdc2\n */\n\n/**\n * Module for text truncation.\n *\n * Implementation provided by Pathable (thanks!).\n * See: https://github.com/pathable/truncate\n *\n * @module     core/truncate\n * @package    core\n * @class      truncate\n * @copyright  2017 Pathable\n *             2017 Mathias Bynens\n *             2017 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery'], function($) {\n\n  // Matches trailing non-space characters.\n  var chop = /(\\s*\\S+|\\s)$/;\n\n  // Matches the first word in the string.\n  var start = /^(\\S*)/;\n\n  // Matches any space characters.\n  var space = /\\s/;\n\n  // Special thanks to Mathias Bynens for the multi-byte char\n  // implementation. Much love.\n  // see: https://github.com/mathiasbynens/String.prototype.at/blob/master/at.js\n  var charLengthAt = function(text, position) {\n    if (this == null) {\n      throw TypeError();\n    }\n    var string = String(text);\n    var size = string.length;\n    // `ToInteger`\n    var index = position ? Number(position) : 0;\n    if (index != index) { // better `isNaN`\n      index = 0;\n    }\n    // Account for out-of-bounds indices\n    // The odd lower bound is because the ToInteger operation is\n    // going to round `n` to `0` for `-1 < n <= 0`.\n    if (index <= -1 || index >= size) {\n      return '';\n    }\n    // Second half of `ToInteger`\n    index = index | 0;\n    // Get the first code unit and code unit value\n    var cuFirst = string.charCodeAt(index);\n    var cuSecond;\n    var nextIndex = index + 1;\n    var len = 1;\n    if ( // Check if itâ€™s the start of a surrogate pair.\n      cuFirst >= 0xD800 && cuFirst <= 0xDBFF && // high surrogate\n      size > nextIndex // there is a next code unit\n    ) {\n      cuSecond = string.charCodeAt(nextIndex);\n      if (cuSecond >= 0xDC00 && cuSecond <= 0xDFFF) { // low surrogate\n        len = 2;\n      }\n    }\n    return len;\n  };\n\n  var lengthMultiByte = function(text) {\n    var count = 0;\n\n    for (var i = 0; i < text.length; i += charLengthAt(text, i)) {\n      count++;\n    }\n\n    return count;\n  };\n\n  var getSliceLength = function(text, amount) {\n    if (!text.length) {\n      return 0;\n    }\n\n    var length = 0;\n    var count = 0;\n\n    do {\n      length += charLengthAt(text, length);\n      count++;\n    } while (length < text.length && count < amount);\n\n    return length;\n  };\n\n  // Return a truncated html string.  Delegates to $.fn.truncate.\n  $.truncate = function(html, options) {\n    return $('<div></div>').append(html).truncate(options).html();\n  };\n\n  // Truncate the contents of an element in place.\n  $.fn.truncate = function(options) {\n    if ($.isNumeric(options)) options = {length: options};\n    var o = $.extend({}, $.truncate.defaults, options);\n\n    return this.each(function() {\n      var self = $(this);\n\n      if (o.noBreaks) self.find('br').replaceWith(' ');\n\n      var ellipsisLength = o.ellipsis.length;\n      var text = self.text();\n      var textLength = lengthMultiByte(text);\n      var excess = textLength - o.length + ellipsisLength;\n\n      if (textLength < o.length) return;\n      if (o.stripTags) self.text(text);\n\n      // Chop off any partial words if appropriate.\n      if (o.words && excess > 0) {\n        var sliced = text.slice(0, getSliceLength(text, o.length - ellipsisLength) + 1);\n        var replaced = sliced.replace(chop, '');\n        var truncated = lengthMultiByte(replaced);\n        var oneWord = sliced.match(space) ? false : true;\n\n        if (o.keepFirstWord && truncated === 0) {\n          excess = textLength - lengthMultiByte(start.exec(text)[0]) - ellipsisLength;\n        } else if (oneWord && truncated === 0) {\n          excess = textLength - o.length + ellipsisLength;\n        } else {\n          excess = textLength - truncated - 1;\n        }\n      }\n\n      // The requested length is larger than the text. No need for ellipsis.\n      if (excess > textLength) {\n        excess = textLength - o.length;\n      }\n\n      if (excess < 0 || !excess && !o.truncated) return;\n\n      // Iterate over each child node in reverse, removing excess text.\n      $.each(self.contents().get().reverse(), function(i, el) {\n        var $el = $(el);\n        var text = $el.text();\n        var length = lengthMultiByte(text);\n\n        // If the text is longer than the excess, remove the node and continue.\n        if (length <= excess) {\n          o.truncated = true;\n          excess -= length;\n          $el.remove();\n          return;\n        }\n\n        // Remove the excess text and append the ellipsis.\n        if (el.nodeType === 3) {\n          var splitAmount = length - excess;\n          splitAmount = splitAmount >= 0 ? getSliceLength(text, splitAmount) : 0;\n          $(el.splitText(splitAmount)).replaceWith(o.ellipsis);\n          return false;\n        }\n\n        // Recursively truncate child nodes.\n        $el.truncate($.extend(o, {length: length - excess + ellipsisLength}));\n        return false;\n      });\n    });\n  };\n\n  $.truncate.defaults = {\n\n    // Strip all html elements, leaving only plain text.\n    stripTags: false,\n\n    // Only truncate at word boundaries.\n    words: false,\n\n    // When 'words' is active, keeps the first word in the string\n    // even if it's longer than a target length.\n    keepFirstWord: false,\n\n    // Replace instances of <br> with a single space.\n    noBreaks: false,\n\n    // The maximum length of the truncated html.\n    length: Infinity,\n\n    // The character to use as the ellipsis.  The word joiner (U+2060) can be\n    // used to prevent a hanging ellipsis, but displays incorrectly in Chrome\n    // on Windows 7.\n    // http://code.google.com/p/chromium/issues/detail?id=68323\n    //ellipsis: '\\u2026' // '\\u2060\\u2026'\n    ellipsis: '\\u2026' // '\\u2060\\u2026'\n\n  };\n\n    return {\n        truncate: $.truncate,\n    };\n});\n"]}