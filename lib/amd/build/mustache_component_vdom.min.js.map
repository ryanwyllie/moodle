{"version":3,"sources":["../src/mustache_component_vdom.js"],"names":["define","VirtualHTML","VirtualDOM","VDOMVirtualise","Templates","MobX","MustacheComponent","rootElement","templateName","templateContext","hasMounted","state","observable","tree","virtualise","autorun","render","bind","prototype","getTemplateContext","registerEventListeners","start","Date","now","toJS","then","html","console","log","newTree","virtualHTML","patches","diff","patch"],"mappings":"aAAAA,sCACA,CACI,mBADJ,CAEI,kBAFJ,CAGI,sBAHJ,CAII,gBAJJ,CAKI,WALJ,CADA,CAQA,SACIC,WADJ,CAEIC,UAFJ,CAGIC,cAHJ,CAIIC,SAJJ,CAKIC,IALJ,CAME,CAEE,GAAIC,mBAAoB,SAASC,WAAT,CAAsBC,YAAtB,CAAoCC,eAApC,CAAqD,CACzE,KAAKC,UAAL,GADyE,CAEzE,KAAKH,WAAL,CAAmBA,WAFsD,CAGzE,KAAKC,YAAL,CAAoBA,YAHqD,CAIzE,KAAKG,KAAL,CAAaN,KAAKO,UAAL,CAAgBH,eAAhB,CAJ4D,CAMzE,KAAKI,IAAL,CAAYV,eAAeW,UAAf,CAA0BP,WAA1B,CAN6D,CAQzEF,KAAKU,OAAL,CAAa,KAAKC,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAb,CACH,CATD,CAoDA,MAzCAX,mBAAkBY,SAAlB,CAA4BC,kBAA5B,CAAiD,UAAW,CACxD,MAAO,MAAKR,KACf,CAuCD,CArCAL,kBAAkBY,SAAlB,CAA4BE,sBAA5B,CAAqD,UAAW,CAE/D,CAmCD,CAjCAd,kBAAkBY,SAAlB,CAA4BF,MAA5B,CAAqC,UAAW,CAC5C,GAAIK,OAAQC,KAAKC,GAAL,EAAZ,CAEA,MAAOnB,WAAUY,MAAV,CACH,KAAKR,YADF,CAGHH,KAAKmB,IAAL,CAAU,KAAKL,kBAAL,EAAV,CAHG,EAILM,IAJK,CAIA,SAASC,IAAT,CAAe,CAClB,GAAMH,KAAMD,KAAKC,GAAL,EAAZ,CACAI,QAAQC,GAAR,sBAAgCL,IAAMF,KAAtC,EAFkB,CAGlBA,MAAQE,GAHU,IAKdM,SAAU5B,YAAY6B,WAAZ,CAAwBJ,IAAxB,CALI,CAQdK,QAAU7B,WAAW8B,IAAX,CAAgB,KAAKnB,IAArB,CAA2BgB,OAA3B,CARI,CAUlB3B,WAAW+B,KAAX,CAAiB,KAAK1B,WAAtB,CAAmCwB,OAAnC,CAVkB,CAYlB,KAAKlB,IAAL,CAAYgB,OACf,CAbM,CAaLZ,IAbK,CAaA,IAbA,CAJA,EAkBNQ,IAlBM,CAkBD,UAAW,CACb,GAAMF,KAAMD,KAAKC,GAAL,EAAZ,CACAI,QAAQC,GAAR,kBAA4BL,IAAMF,KAAlC,EAFa,CAGbA,MAAQE,GAHK,CAKR,KAAKb,UALG,GAMT,KAAKU,sBAAL,EANS,CAOT,KAAKV,UAAL,GAPS,CAShB,CATK,CASJO,IATI,CASC,IATD,CAlBC,CA4BV,CAED,CAAOX,iBACV,CArED,C","file":"mustache_component_vdom.min.js","sourcesContent":["define(\n[\n    'core/virtual-html',\n    'core/virtual-dom',\n    'core/vdom-virtualise',\n    'core/templates',\n    'core/mobx'\n],\nfunction(\n    VirtualHTML,\n    VirtualDOM,\n    VDOMVirtualise,\n    Templates,\n    MobX\n) {\n\n    var MustacheComponent = function(rootElement, templateName, templateContext) {\n        this.hasMounted = false;\n        this.rootElement = rootElement;\n        this.templateName = templateName;\n        this.state = MobX.observable(templateContext);\n        // Construct the initial tree view.\n        this.tree = VDOMVirtualise.virtualise(rootElement);\n        // Run the render function any time the context changes.\n        MobX.autorun(this.render.bind(this));\n    };\n\n    MustacheComponent.prototype.getTemplateContext = function() {\n        return this.state;\n    };\n\n    MustacheComponent.prototype.registerEventListeners = function() {\n        return;\n    };\n\n    MustacheComponent.prototype.render = function() {\n        let start = Date.now();\n\n        return Templates.render(\n            this.templateName,\n            // Copy context to trigger the MobX observability.\n            MobX.toJS(this.getTemplateContext())\n        ).then(function(html) {\n            const now = Date.now();\n            console.log(`Mustache render: ${now - start}`);\n            start = now;\n\n            var newTree = VirtualHTML.virtualHTML(html);\n            // Generate the diff based on our current view of the\n            // DOM and the newly generated view.\n            var patches = VirtualDOM.diff(this.tree, newTree);\n            // Apply the patches.\n            VirtualDOM.patch(this.rootElement, patches);\n            // Remember the new view.\n            this.tree = newTree;\n        }.bind(this))\n        .then(function() {\n            const now = Date.now();\n            console.log(`VDOM render: ${now - start}`);\n            start = now;\n\n            if (!this.hasMounted) {\n                this.registerEventListeners();\n                this.hasMounted = true;\n            }\n        }.bind(this));  \n    };\n\n    return MustacheComponent;\n});\n"]}