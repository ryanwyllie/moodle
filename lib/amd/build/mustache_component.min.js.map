{"version":3,"sources":["../src/mustache_component.js"],"names":["processNodeDefinitions","ProcessNodeDefinitions","React","classFromString","Function","MustacheComponent","context","thing","foo","node","children","index","attribute","attribs","value","evaled","eval","processDefaultNode","replaceChildren","shouldProcessNode","processNode","component","attributes","key","createElement","bind","props","template","start","Date","now","html","Templates","syncRender","mustacheRender","parser","Parser","lowerCaseAttributeNames","components","parseWithInstructions","getProcessingInstructions","componentCreation","console","log","Component"],"mappings":"6uEASMA,uBAAyB,GAAIC,oCAAJ,CAA2BC,eAA3B,C,CACzBC,gBAAkB,GAAIC,SAAJ,CAAa,WAAb,CAA0B,kBAA1B,C,CAElBC,iB,4WACwBC,O,CAAS,IACzBC,OAAQ,IADiB,CAEzBC,IAAM,SAASC,IAAT,CAAeC,QAAf,CAAyBC,KAAzB,CAAgC,CACxC,IAAK,GAAMC,UAAX,GAAwBH,MAAKI,OAA7B,CACI,GAAI,kDAAiBD,SAAjB,CAAJ,CAAiC,IACvBE,OAAQL,KAAKI,OAAL,CAAaD,SAAb,CADe,CAEvBG,OAASC,KAAKF,KAAL,CAFc,CAG7BL,KAAKI,OAAL,CAAaD,SAAb,EAA0BG,MAC7B,CAGL,MAAOf,wBAAuBiB,kBAAvB,CAA0CR,IAA1C,CAAgDC,QAAhD,CAA0DC,KAA1D,CACV,CAZ8B,CAc/B,MAAO,CACH,CACIO,kBADJ,CAEIC,kBAAmB,cAAQ,CACvB,MAAOV,MAAKI,OAAL,EAAgBJ,KAAKI,OAAL,CAAa,iBAAb,CAC1B,CAJL,CAKIO,YAAa,SAACX,IAAD,CAAOC,QAAP,CAAiBC,KAAjB,CAA2B,IAC9BU,WAAYL,KAAKP,KAAKI,OAAL,CAAa,iBAAb,CAAL,CADkB,CAE9BS,qBACFC,IAAKZ,KADH,CAEFL,eAFE,EAGCG,KAAKI,OAHN,CAF8B,CAQpC,MAAOX,iBAAMsB,aAAN,CAAoBH,SAApB,CAA+BC,UAA/B,CACV,CAdL,CADG,CAiBH,CACIH,kBAAmB,cAAQ,CACvB,GAAIV,KAAKI,OAAT,CACI,IAAK,GAAMD,UAAX,GAAwBH,MAAKI,OAA7B,CACI,GAAI,kDAAiBD,SAAjB,CAAJ,CACI,SAKZ,QACH,CAXL,CAYIQ,YAAaZ,IAAIiB,IAAJ,CAASlB,KAAT,CAZjB,CAjBG,CA+BH,CACIY,kBAAmB,oBADvB,CAEIC,YAAapB,uBAAuBiB,kBAFxC,CA/BG,CAoCV,C,gCAEQ,YACyB,KAAKS,KAD9B,CACGC,QADH,QACGA,QADH,CACarB,OADb,QACaA,OADb,CAGDsB,MAAQC,KAAKC,GAAL,EAHP,CAKCC,KAAOC,oBAAUC,UAAV,CAAqBN,QAArB,CAA+BrB,OAA/B,CALR,CAMC4B,eAAiBL,KAAKC,GAAL,GAAaF,KAN/B,CAQLA,MAAQC,KAAKC,GAAL,EARH,IASCK,QAAS,GAAIC,oBAAJ,CAAW,CAACC,0BAAD,CAAX,CATV,CAUCC,WAAaH,OAAOI,qBAAP,CACfR,IADe,CAEf,oBAFe,CAGf,KAAKS,yBAAL,CAA+BlC,OAA/B,CAHe,CAVd,CAeCmC,kBAAoBZ,KAAKC,GAAL,GAAaF,KAflC,CAoBL,MAHAc,SAAQC,GAAR,qBAAgCT,cAAhC,CAGA,CAFAQ,QAAQC,GAAR,wBAAmCF,iBAAnC,CAEA,CAAOH,UAqBV,C,uBA9F2BpC,gBAAM0C,S,kBAiGvB,wBAASvC,iBAAT,C","file":"mustache_component.min.js","sourcesContent":["import React from 'core/react';\nimport Mustache from 'core/mustache';\nimport Templates from 'core/templates';\nimport h from 'core/react-hyperscript';\nimport html2hyperscript from 'core/html2hyperscript';\nimport { observer } from \"core/mobx-react\";\nimport { Parser, ProcessNodeDefinitions } from 'core/html-to-react';\nimport { isEventAttribute } from 'core/react-event-handler-attributes';\n\nconst processNodeDefinitions = new ProcessNodeDefinitions(React);\nconst classFromString = new Function('className', 'return className');\n\nclass MustacheComponent extends React.Component {\n    getProcessingInstructions(context) {\n        const thing = this;\n        const foo = function(node, children, index) {\n            for (const attribute in node.attribs) {\n                if (isEventAttribute(attribute)) {\n                    const value = node.attribs[attribute];\n                    const evaled = eval(value);\n                    node.attribs[attribute] = evaled;\n                }\n            }\n\n            return processNodeDefinitions.processDefaultNode(node, children, index);\n        };\n\n        return [\n            {\n                replaceChildren: false,\n                shouldProcessNode: node => {\n                    return node.attribs && node.attribs['react-component'];\n                },\n                processNode: (node, children, index) => {\n                    const component = eval(node.attribs['react-component']);\n                    const attributes = {\n                        key: index,\n                        context,\n                        ...node.attribs\n                    };\n        \n                    return React.createElement(component, attributes);\n                }\n            },\n            {\n                shouldProcessNode: node => {\n                    if (node.attribs) {\n                        for (const attribute in node.attribs) {\n                            if (isEventAttribute(attribute)) {\n                                return true;\n                            }\n                        }\n                    }\n\n                    return false;\n                },\n                processNode: foo.bind(thing)\n            },\n            {\n                shouldProcessNode: node => true,\n                processNode: processNodeDefinitions.processDefaultNode\n            }\n        ]\n    }\n\n    render() {\n        const { template, context } = this.props;\n\n        let start = Date.now();\n        // Render the template.\n        const html = Templates.syncRender(template, context);\n        const mustacheRender = Date.now() - start;\n\n        start = Date.now();\n        const parser = new Parser({lowerCaseAttributeNames: false});\n        const components = parser.parseWithInstructions(\n            html,\n            () => true,\n            this.getProcessingInstructions(context)\n        );\n        const componentCreation = Date.now() - start;\n\n        console.log(`Mustache render: ${mustacheRender}`);\n        console.log(`Component creation: ${componentCreation}`);\n\n        return components;\n\n        /*\n        // Parse the rendered HTML into hyperscript syntax.\n        start = Date.now();\n        const hyperscript = html2hyperscript(html);\n        const hyperscriptRender = Date.now() - start;\n        // Create React components from the hyperscript syntax.\n        start = Date.now();\n        const createComponents = new Function('h', `return h('div', [${hyperscript}]);`);\n        // Give the function the hyperscript implementation the creates\n        // React elements instead of regular DOM elements.\n        const components = createComponents(h);\n        const componentCreation = Date.now() - start;\n\n        console.log(`Mustache render: ${mustacheRender}`);\n        console.log(`Hyperscript render: ${hyperscriptRender}`);\n        console.log(`Component creation: ${componentCreation}`);\n\n        return components;\n        */\n    }\n};\n\nexport default observer(MustacheComponent);"]}