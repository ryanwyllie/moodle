{"version":3,"sources":["../src/paged_content_factory.js"],"names":["define","$","Templates","Notification","PagedContent","TEMPLATES","PAGED_CONTENT","buildPagingBarTemplateContext","numberOfPages","itemsPerPage","page","context","i","number","active","pages","push","buildPagingDropdownTemplateContext","config","options","totalItems","lastIncrease","maxPages","hasOwnProperty","itemCount","option","itemcount","content","buildTemplateContext","pagingbar","pagingdropdown","skipjs","dropdown","calculateNumberOfPages","numberOfItems","partial","createFromAjax","renderPagesContentCallback","deferred","Deferred","templateContext","render","then","html","js","container","pagedContent","find","rootSelector","init","resolve","fail","exception","reject","createFromStaticList","contentItems","renderContentCallback","length","pagesData","contentToRender","forEach","pageData","begin","offset","end","limit","items","slice"],"mappings":"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","file":"paged_content_factory.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Factory to create a paged content widget.\n *\n * @module     core/paged_content_factory\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n[\n    'jquery',\n    'core/templates',\n    'core/notification',\n    'core/paged_content_pages'\n],\nfunction(\n    $,\n    Templates,\n    Notification,\n    PagedContent\n) {\n    var TEMPLATES = {\n        PAGED_CONTENT: 'core/paged_content'\n    };\n\n    /**\n     * Build the context to render the paging bar template with based on the number\n     * of pages to show.\n     *\n     * @param  {int} numberOfPages How many pages to have in the paging bar.\n     * @param  {int} itemsPerPage  How many items will be shown per page.\n     * @return {object} The template context.\n     */\n    var buildPagingBarTemplateContext = function(numberOfPages, itemsPerPage) {\n        var context = {\n            \"itemsperpage\": itemsPerPage,\n            \"previous\": {},\n            \"next\": {},\n            \"pages\": []\n        };\n\n        for (var i = 1; i <= numberOfPages; i++) {\n            var page = {\n                number: i,\n                page: \"\" + i,\n            };\n\n            // Make the first page active by default.\n            if (i === 1) {\n                page.active = true;\n            }\n\n            context.pages.push(page);\n        }\n\n        return context;\n    };\n\n    /**\n     * Build the context to render the paging dropdown template with based on the number\n     * of pages to show and items per page.\n     *\n     * This control is rendered with a gradual increase of the items per page to\n     * limit the number of pages in the dropdown. Each page will show twice as much\n     * as the previous page (except for the first two pages).\n     *\n     * For example:\n     * Number of pages = 3\n     * Items per page = 25\n     * Would render a dropdown will 4 options:\n     * 25\n     * 50\n     * 100\n     * All\n     *\n     * @param  {int} numberOfPages How many options to have in the dropdown.\n     * @param  {int} itemsPerPage  How many items will be shown per page.\n     * @param  {object} config  Configuration options provided by the client.\n     * @return {object} The template context.\n     */\n    var buildPagingDropdownTemplateContext = function(numberOfPages, itemsPerPage, config) {\n        var context = {\n            options: []\n        };\n\n        var totalItems = 0;\n        var lastIncrease = 0;\n        var maxPages = numberOfPages;\n\n        if (config.hasOwnProperty('maxPages')) {\n            maxPages = config.maxPages;\n        }\n\n        for (var i = 1; i <= maxPages; i++) {\n            var itemCount = 0;\n\n            if (i <= 2) {\n                itemCount = itemsPerPage;\n                lastIncrease = itemsPerPage;\n            } else {\n                lastIncrease = lastIncrease * 2;\n                itemCount = lastIncrease;\n            }\n\n            totalItems += itemCount;\n            var option = {\n                itemcount: itemCount,\n                content: totalItems\n            };\n\n            // Make the first option active by default.\n            if (i === 1) {\n                option.active = true;\n            }\n\n            context.options.push(option);\n        }\n\n        return context;\n    };\n\n    /**\n     * Build the context to render the paged content template with based on the number\n     * of pages to show, items per page, and configuration option.\n     *\n     * By default the code will render a paging bar for the paging controls unless\n     * otherwise specified in the provided config.\n     *\n     * @param  {int} numberOfPages How many pages to have.\n     * @param  {int} itemsPerPage  How many items will be shown per page.\n     * @param  {object} config  Configuration options provided by the client.\n     * @return {object} The template context.\n     */\n    var buildTemplateContext = function(numberOfPages, itemsPerPage, config) {\n        var context = {\n            pagingbar: false,\n            pagingdropdown: false,\n            skipjs: true\n        };\n\n        if (config.hasOwnProperty('dropdown') && config.dropdown) {\n            context.pagingdropdown = buildPagingDropdownTemplateContext(numberOfPages, itemsPerPage, config);\n        } else {\n            context.pagingbar = buildPagingBarTemplateContext(numberOfPages, itemsPerPage);\n        }\n\n        return context;\n    };\n\n    /**\n     * Calculate the number of pages required for the given number of items and\n     * how many of each item should appear on a page.\n     *\n     * @param  {int} numberOfItems How many items in total.\n     * @param  {int} itemsPerPage  How many items will be shown per page.\n     * @return {int} The number of pages required.\n     */\n    var calculateNumberOfPages = function(numberOfItems, itemsPerPage) {\n        var numberOfPages = 1;\n\n        if (numberOfItems > 0) {\n            var partial = numberOfItems % itemsPerPage;\n\n            if (partial) {\n                numberOfItems -= partial;\n                numberOfPages = (numberOfItems / itemsPerPage) + 1;\n            } else {\n                numberOfPages = numberOfItems / itemsPerPage;\n            }\n        }\n\n        return numberOfPages;\n    };\n\n    /**\n     * Create a paged content widget where the complete list of items is not loaded\n     * up front but will instead be loaded by an ajax request (or similar).\n     *\n     * The client code must provide a callback function which loads and renders the\n     * items for each page. See PagedContent.init for more details.\n     *\n     * The function will return a deferred that is resolved with a jQuery object\n     * for the HTML content and a string for the JavaScript.\n     *\n     * The current list of configuration options available are:\n     *      dropdown {bool} True to render the page control as a dropdown (paging bar is default).\n     *\n     * @param  {int} numberOfItems How many items are there in total.\n     * @param  {int} itemsPerPage  How many items will be shown per page.\n     * @param  {function} renderPagesContentCallback  Callback for loading and rendering the items.\n     * @param  {object} config  Configuration options provided by the client.\n     * @return {promise} Resolved with jQuery HTML and string JS.\n     */\n    var createFromAjax = function(numberOfItems, itemsPerPage, renderPagesContentCallback, config) {\n        if (typeof config == 'undefined') {\n            config = {};\n        }\n\n        var deferred = $.Deferred();\n        var numberOfPages = calculateNumberOfPages(numberOfItems, itemsPerPage);\n        var templateContext = buildTemplateContext(numberOfPages, itemsPerPage, config);\n\n        Templates.render(TEMPLATES.PAGED_CONTENT, templateContext)\n            .then(function(html, js) {\n                html = $(html);\n\n                var container = html;\n                var pagedContent = html.find(PagedContent.rootSelector);\n\n                PagedContent.init(pagedContent, container, renderPagesContentCallback);\n\n                deferred.resolve(html, js);\n                return;\n            })\n            .fail(function(exception) {\n                deferred.reject(exception);\n            })\n            .fail(Notification.exception);\n\n        return deferred;\n    };\n\n    /**\n     * Create a paged content widget where the complete list of items is loaded\n     * up front.\n     *\n     * The client code must provide a callback function which renders the\n     * items for each page. The callback will be provided with an array where each\n     * value in the array is a the list of items to render for the page.\n     *\n     * The function will return a deferred that is resolved with a jQuery object\n     * for the HTML content and a string for the JavaScript.\n     *\n     * The current list of configuration options available are:\n     *      dropdown {bool} True to render the page control as a dropdown (paging bar is default).\n     *\n     * @param  {array} contentItems The list of items to paginate.\n     * @param  {int} itemsPerPage  How many items will be shown per page.\n     * @param  {function} renderContentCallback  Callback for rendering the items for the page.\n     * @param  {object} config  Configuration options provided by the client.\n     * @return {promise} Resolved with jQuery HTML and string JS.\n     */\n    var createFromStaticList = function(contentItems, itemsPerPage, renderContentCallback, config) {\n        if (typeof config == 'undefined') {\n            config = {};\n        }\n\n        var numberOfItems = contentItems.length;\n        return createFromAjax(numberOfItems, itemsPerPage, function(pagesData) {\n            var contentToRender = [];\n            pagesData.forEach(function(pageData) {\n                var begin = pageData.offset;\n                var end = pageData.limit ? begin + pageData.limit : numberOfItems;\n                var items = contentItems.slice(begin, end);\n                contentToRender.push(items);\n            });\n\n            return renderContentCallback(contentToRender);\n        }, config);\n    };\n\n    return {\n        createFromAjax: createFromAjax,\n        createFromStaticList: createFromStaticList\n    };\n});\n"]}