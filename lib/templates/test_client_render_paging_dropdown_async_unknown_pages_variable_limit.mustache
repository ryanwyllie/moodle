<div class="row">
    <h2>Client render paging dropdown async unknown pages variable variable limit</h2>
    <p>This simulates a paging content section with an unknown number of pages. It has been provided with a list of limit options (5, 10, 15).</p>
    <div class="col-sm-6 span6" id="paging-dropdown-async-container-unknown-variable-limit">
    </div>
    <div class="col-sm-6 span5" id="paging-dropdown-async-button-container-unknown-variable-limit">
        <h3>Click the button below to resolve the async request</h3>
        <button type="button" class="btn btn-primary">Resolve request</button>
    </div>
</div>
{{#js}}
require(
[
    'jquery',
    'core/templates',
    'core/paged_content_factory'
],
function(
    $,
    Templates,
    PagedContentFactory
) {
    var container = $('#paging-dropdown-async-container-unknown-variable-limit');
    var buttonContainer = $('#paging-dropdown-async-button-container-unknown-variable-limit');
    var button = buttonContainer.find('button');
    var contentItems = [];
    for (var i = 1; i <= 30; i++) {
        contentItems.push(`Async list item ${i}`);
    }
    var userPromise = null;

    PagedContentFactory.createFromAjax(
        [
            {
                itemcount: 5,
                content: 5,
                active: true
            },
            {
                itemcount: 5,
                content: 10
            },
            {
                itemcount: 5,
                content: 15
            }
        ],
        function(pagesData, actions) {
            buttonContainer.removeClass('hidden');
            userPromise = $.Deferred();

            var contentToRender = [];
            pagesData.forEach(function(pageData) {
                var begin = pageData.offset;
                var end = pageData.limit ? begin + pageData.limit + 1 : contentItems.length;
                var items = contentItems.slice(begin, end);

                if (items.length <= pageData.limit) {
                    actions.allItemsLoaded(pageData.pageNumber);
                } else if (pageData.limit) {
                    items.pop();
                }
                contentToRender.push(items);
            });

            var promises = [];

            contentToRender.forEach(function(itemSet) {
                var card = $('<div><div class="card"><div class="card-body"></div></div></div>');
                var cardBody = card.find('.card-body');
                itemSet.forEach(function(item) {
                    cardBody.append(`<p>${item}</p>`);
                });
                var promise = $.Deferred();
                promises.push(promise);

                userPromise.then(function() {
                    promise.resolve(card.html(), '');
                });
            });

            return promises;
        },
        {
            dropdown: true
        }
    )
    .then(function(html, js) {
        Templates.replaceNodeContents(container, html, js);
    })

    button.click(function() {
        if (userPromise) {
            userPromise.resolve();
        }

        buttonContainer.addClass('hidden');
    });
}
);
{{/js}}