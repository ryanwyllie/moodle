{"version":3,"sources":["../src/repository.js"],"names":["define","$","Ajax","getEventById","eventId","call","methodname","args","eventid","deleteEvent","deleteSeries","request","events","repeat","updateEventStartDay","dayTimestamp","daytimestamp","submitCreateUpdateForm","formdata","getCalendarMonthData","year","month","courseid","categoryid","includenavigation","mini","getCalendarDayData","day","categoryId","getCalendarUpcomingData","getCourseGroupsData"],"mappings":"aAwBAA,kCAAO,CAAC,QAAD,CAAW,WAAX,CAAP,CAAgC,SAASC,CAAT,CAAYC,IAAZ,CAAkB,CAgL9C,MAAO,CACHC,aA/Ie,QAAfA,aAAe,CAASC,OAAT,CAAkB,CASjC,MAAOF,MAAKG,IAAL,CAAU,CAPH,CACVC,WAAY,wCADF,CAEVC,KAAM,CACFC,QAASJ,OADP,CAFI,CAOG,CAAV,EAAqB,CAArB,CACV,CAoIM,CAEHK,YAxKc,QAAdA,YAAc,CAASL,OAAT,CAAkBM,YAAlB,CAAgC,CAClB,WAAxB,QAAOA,aADmC,GAE1CA,eAF0C,EAI9C,GAAIC,SAAU,CACVL,WAAY,sCADF,CAEVC,KAAM,CACFK,OAAQ,CAAC,CACLJ,QAASJ,OADJ,CAELS,OAAQH,YAFH,CAAD,CADN,CAFI,CAAd,CAUA,MAAOR,MAAKG,IAAL,CAAU,CAACM,OAAD,CAAV,EAAqB,CAArB,CACV,CAuJM,CAGHG,oBApDsB,QAAtBA,oBAAsB,CAASV,OAAT,CAAkBW,YAAlB,CAAgC,CAStD,MAAOb,MAAKG,IAAL,CAAU,CARH,CACVC,WAAY,sCADF,CAEVC,KAAM,CACFC,QAASJ,OADP,CAEFY,aAAcD,YAFZ,CAFI,CAQG,CAAV,EAAqB,CAArB,CACV,CAuCM,CAIHE,uBA/HyB,QAAzBA,uBAAyB,CAASC,QAAT,CAAmB,CAQ5C,MAAOhB,MAAKG,IAAL,CAAU,CAPH,CACVC,WAAY,yCADF,CAEVC,KAAM,CACFW,SAAUA,QADR,CAFI,CAOG,CAAV,EAAqB,CAArB,CACV,CAkHM,CAKHC,qBAzGuB,QAAvBA,qBAAuB,CAASC,IAAT,CAAeC,KAAf,CAAsBC,QAAtB,CAAgCC,UAAhC,CAA4CC,iBAA5C,CAA+DC,IAA/D,CAAqE,CAa5F,MAAOvB,MAAKG,IAAL,CAAU,CAZH,CACVC,WAAY,yCADF,CAEVC,KAAM,CACFa,KAAMA,IADJ,CAEFC,MAAOA,KAFL,CAGFC,SAAUA,QAHR,CAIFC,WAAYA,UAJV,CAKFC,kBAAmBA,iBALjB,CAMFC,KAAMA,IANJ,CAFI,CAYG,CAAV,EAAqB,CAArB,CACV,CAsFM,CAMHC,mBA/EqB,QAArBA,mBAAqB,CAASN,IAAT,CAAeC,KAAf,CAAsBM,GAAtB,CAA2BL,QAA3B,CAAqCM,UAArC,CAAiD,CAYtE,MAAO1B,MAAKG,IAAL,CAAU,CAXH,CACVC,WAAY,qCADF,CAEVC,KAAM,CACFa,KAAMA,IADJ,CAEFC,MAAOA,KAFL,CAGFM,IAAKA,GAHH,CAIFL,SAAUA,QAJR,CAKFC,WAAYK,UALV,CAFI,CAWG,CAAV,EAAqB,CAArB,CACV,CA4DM,CAOHC,wBApC0B,QAA1BA,wBAA0B,CAASP,QAAT,CAAmBC,UAAnB,CAA+B,CASzD,MAAOrB,MAAKG,IAAL,CAAU,CARH,CACVC,WAAY,0CADF,CAEVC,KAAM,CACFe,SAAUA,QADR,CAEFC,WAAYA,UAFV,CAFI,CAQG,CAAV,EAAqB,CAArB,CACV,CAmBM,CAQHO,oBAnBsB,QAAtBA,oBAAsB,CAASR,QAAT,CAAmB,CAQzC,MAAOpB,MAAKG,IAAL,CAAU,CAPH,CACVC,WAAY,8BADF,CAEVC,KAAM,CACFe,SAAUA,QADR,CAFI,CAOG,CAAV,EAAqB,CAArB,CACV,CAEM,CAUV,CA1LD,C","file":"repository.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle calendar ajax actions.\n *\n * @module     core_calendar/repository\n * @class      repository\n * @package    core_calendar\n * @copyright  2017 Simey Lameze <lameze@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/ajax'], function($, Ajax) {\n\n    /**\n     * Delete a calendar event.\n     *\n     * @method deleteEvent\n     * @param {int} eventId The event id.\n     * @param {bool} deleteSeries Whether to delete all events in the series\n     * @return {promise} Resolved with requested calendar event\n     */\n    var deleteEvent = function(eventId, deleteSeries) {\n        if (typeof deleteSeries === 'undefined') {\n            deleteSeries = false;\n        }\n        var request = {\n            methodname: 'core_calendar_delete_calendar_events',\n            args: {\n                events: [{\n                    eventid: eventId,\n                    repeat: deleteSeries,\n                }]\n            }\n        };\n\n        return Ajax.call([request])[0];\n    };\n\n    /**\n     * Get a calendar event by id.\n     *\n     * @method getEventById\n     * @param {int} eventId The event id.\n     * @return {promise} Resolved with requested calendar event\n     */\n    var getEventById = function(eventId) {\n\n        var request = {\n            methodname: 'core_calendar_get_calendar_event_by_id',\n            args: {\n                eventid: eventId\n            }\n        };\n\n        return Ajax.call([request])[0];\n    };\n\n    /**\n     * Submit the form data for the event form.\n     *\n     * @method submitCreateUpdateForm\n     * @param {string} formdata The URL encoded values from the form\n     * @return {promise} Resolved with the new or edited event\n     */\n    var submitCreateUpdateForm = function(formdata) {\n        var request = {\n            methodname: 'core_calendar_submit_create_update_form',\n            args: {\n                formdata: formdata\n            }\n        };\n\n        return Ajax.call([request])[0];\n    };\n\n    /**\n     * Get calendar data for the month view.\n     *\n     * @method getCalendarMonthData\n     * @param {Number} year Year\n     * @param {Number} month Month\n     * @param {Number} courseid The course id.\n     * @param {Number} categoryid The category id.\n     * @param {Bool} includenavigation Whether to include navigation.\n     * @param {Bool} mini Whether the month is in mini view.\n     * @return {promise} Resolved with the month view data.\n     */\n    var getCalendarMonthData = function(year, month, courseid, categoryid, includenavigation, mini) {\n        var request = {\n            methodname: 'core_calendar_get_calendar_monthly_view',\n            args: {\n                year: year,\n                month: month,\n                courseid: courseid,\n                categoryid: categoryid,\n                includenavigation: includenavigation,\n                mini: mini\n            }\n        };\n\n        return Ajax.call([request])[0];\n    };\n\n    /**\n     * Get calendar data for the day view.\n     *\n     * @method getCalendarDayData\n     * @param {Number} year Year\n     * @param {Number} month Month\n     * @param {Number} day Day\n     * @param {Number} courseid The course id.\n     * @param {Number} categoryId The id of the category whose events are shown\n     * @return {promise} Resolved with the day view data.\n     */\n    var getCalendarDayData = function(year, month, day, courseid, categoryId) {\n        var request = {\n            methodname: 'core_calendar_get_calendar_day_view',\n            args: {\n                year: year,\n                month: month,\n                day: day,\n                courseid: courseid,\n                categoryid: categoryId,\n            }\n        };\n\n        return Ajax.call([request])[0];\n    };\n\n    /**\n     * Change the start day for the given event id. The day timestamp\n     * only has to be any time during the target day because only the\n     * date information is extracted, the time of the day is ignored.\n     *\n     * @param {int} eventId The id of the event to update\n     * @param {int} dayTimestamp A timestamp for some time during the target day\n     * @return {promise}\n     */\n    var updateEventStartDay = function(eventId, dayTimestamp) {\n        var request = {\n            methodname: 'core_calendar_update_event_start_day',\n            args: {\n                eventid: eventId,\n                daytimestamp: dayTimestamp\n            }\n        };\n\n        return Ajax.call([request])[0];\n    };\n\n    /**\n     * Get calendar upcoming data.\n     *\n     * @method getCalendarUpcomingData\n     * @param {Number} courseid The course id.\n     * @param {Number} categoryid The category id.\n     * @return {promise} Resolved with the month view data.\n     */\n    var getCalendarUpcomingData = function(courseid, categoryid) {\n        var request = {\n            methodname: 'core_calendar_get_calendar_upcoming_view',\n            args: {\n                courseid: courseid,\n                categoryid: categoryid,\n            }\n        };\n\n        return Ajax.call([request])[0];\n    };\n\n    /**\n     * Get the groups by course id.\n     *\n     * @param {Number} courseid The course id to fetch the groups from.\n     * @return {promise} Resolved with the course groups.\n     */\n    var getCourseGroupsData = function(courseid) {\n        var request = {\n            methodname: 'core_group_get_course_groups',\n            args: {\n                courseid: courseid\n            }\n        };\n\n        return Ajax.call([request])[0];\n    };\n\n    return {\n        getEventById: getEventById,\n        deleteEvent: deleteEvent,\n        updateEventStartDay: updateEventStartDay,\n        submitCreateUpdateForm: submitCreateUpdateForm,\n        getCalendarMonthData: getCalendarMonthData,\n        getCalendarDayData: getCalendarDayData,\n        getCalendarUpcomingData: getCalendarUpcomingData,\n        getCourseGroupsData: getCourseGroupsData\n    };\n});\n"]}