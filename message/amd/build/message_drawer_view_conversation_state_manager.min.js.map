{"version":3,"sources":["../src/message_drawer_view_conversation_state_manager.js"],"names":["define","$","cloneState","state","extend","formatMessages","messages","loggedInUserId","members","map","message","fromLoggedInUser","useridfrom","id","parseInt","isRead","isread","userFrom","text","timeCreated","timecreated","formatMembers","member","fullname","profileurl","profileimageurl","profileimageurlsmall","isonline","showonlinestatus","isblocked","iscontact","isdeleted","canmessage","requirescontact","contactrequests","buildInitialState","midnight","messagePollMin","messagePollMax","messagePollAfterMax","name","subname","type","totalMemberCount","imageUrl","isFavourite","isMuted","canDeleteMessagesForAllUsers","deleteMessagesForAllUsers","hasTriedToLoadMessages","loadingMessages","sendingMessage","loadingMembers","loadingConfirmAction","pendingBlockUserIds","pendingUnblockUserIds","pendingRemoveContactIds","pendingAddContactIds","pendingDeleteMessageIds","pendingDeleteConversation","selectedMessageIds","addMessages","newState","formattedMessages","allMessages","concat","sort","a","b","filter","index","sortedMessages","removeMessages","removeMessageIds","indexOf","removeMessagesById","messagesIds","addMembers","formattedMembers","forEach","removeMembers","setLoadingMessages","value","setSendingMessage","setLoadingMembers","setId","setName","setSubname","setType","setIsFavourite","setIsMuted","setCanDeleteMessagesForAllUsers","setDeleteMessagesForAllUsers","setTotalMemberCount","count","setImageUrl","url","setLoadingConfirmAction","setPendingDeleteConversation","addPendingBlockUsersById","userIds","push","addPendingRemoveContactsById","addPendingUnblockUsersById","addPendingAddContactsById","addPendingDeleteMessagesById","messageIds","removePendingBlockUsersById","removePendingRemoveContactsById","removePendingUnblockUsersById","removePendingAddContactsById","removePendingDeleteMessagesById","addSelectedMessagesById","removeSelectedMessagesById","markMessagesAsRead","readMessages","readMessageIds","addContactRequests","requests","request","fromUserId","userid","toUserId","requesteduserid","removeContactRequests","existing"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module operates on the view states from the message_drawer_view_conversation module.\n * It exposes functions that can be used to generate new version of the state.\n *\n * Important notes for this module:\n * 1.) The existing state is always immutable. It should never be modified.\n * 2.) All functions that operate on the state should always clone the state and\n *     modify the cloned state before returning it.\n *\n * It's important that the states remain immutable because they are diff'd in\n * the message_drawer_view_conversation_patcher module in order to work out what\n * has changed.\n *\n * @module     core_message/message_drawer_view_conversation_state_manager\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery'], function($) {\n\n    /**\n     * Clone a state, a state is a collection of information about the variables required to build\n     * the conversation user interface.\n     *\n     * @param  {Object} state State to clone\n     * @return {Object} newstate A copy of the state to clone.\n     */\n    var cloneState = function(state) {\n        // Do a deep extend to make sure we recursively copy objects and\n        // arrays so that the new state doesn't contain any references to\n        // the old state, e.g. adding a value to an array in the new state\n        // shouldn't also add it to the old state.\n        return $.extend(true, {}, state);\n    };\n\n    /**\n     * Format messages to be used in a state.\n     *\n     * @param  {Array} messages The messages to format.\n     * @param  {Number} loggedInUserId The logged in user id.\n     * @param  {Array} members The converstation members.\n     * @return {Array} Formatted messages.\n     */\n    var formatMessages = function(messages, loggedInUserId, members) {\n        return messages.map(function(message) {\n            var fromLoggedInUser = message.useridfrom == loggedInUserId;\n            return {\n                id: parseInt(message.id, 10),\n                isRead: message.isread,\n                fromLoggedInUser: fromLoggedInUser,\n                userFrom: members[message.useridfrom],\n                text: message.text,\n                timeCreated: parseInt(message.timecreated, 10)\n            };\n        });\n    };\n\n    /**\n     * Format members to be used in a state.\n     *\n     * @param  {Array} members The messages to format.\n     * @return {Array} Formatted members.\n     */\n    var formatMembers = function(members) {\n        return members.map(function(member) {\n            return {\n                id: member.id,\n                fullname: member.fullname,\n                profileurl: member.profileurl,\n                profileimageurl: member.profileimageurl,\n                profileimageurlsmall: member.profileimageurlsmall,\n                isonline:  member.isonline,\n                showonlinestatus: member.showonlinestatus,\n                isblocked: member.isblocked,\n                iscontact: member.iscontact,\n                isdeleted: member.isdeleted,\n                canmessage:  member.canmessage,\n                requirescontact: member.requirescontact,\n                contactrequests: member.contactrequests || []\n            };\n        });\n    };\n\n    /**\n     * Create an initial (blank) state.\n     *\n     * @param  {Number} midnight Midnight time.\n     * @param  {Number} loggedInUserId The logged in user id.\n     * @param  {Number} id The conversation id.\n     * @param  {Number} messagePollMin The message poll start timeout in seconds.\n     * @param  {Number} messagePollMax The message poll max timeout limit in seconds.\n     * @param  {Number} messagePollAfterMax The message poll frequency in seconds to reset to after max limit is reached.\n     * @return {Object} Initial state.\n     */\n    var buildInitialState = function(\n        midnight,\n        loggedInUserId,\n        id,\n        messagePollMin,\n        messagePollMax,\n        messagePollAfterMax\n    ) {\n        return {\n            midnight: midnight,\n            loggedInUserId: loggedInUserId,\n            id: id,\n            messagePollMin: messagePollMin,\n            messagePollMax: messagePollMax,\n            messagePollAfterMax: messagePollAfterMax,\n            name: null,\n            subname: null,\n            type: null,\n            totalMemberCount: null,\n            imageUrl: null,\n            isFavourite: null,\n            isMuted: null,\n            canDeleteMessagesForAllUsers: false,\n            deleteMessagesForAllUsers: false,\n            members: {},\n            messages: [],\n            hasTriedToLoadMessages: false,\n            loadingMessages: true,\n            sendingMessage: false,\n            loadingMembers: true,\n            loadingConfirmAction: false,\n            pendingBlockUserIds: [],\n            pendingUnblockUserIds: [],\n            pendingRemoveContactIds: [],\n            pendingAddContactIds: [],\n            pendingDeleteMessageIds: [],\n            pendingDeleteConversation: false,\n            selectedMessageIds: []\n        };\n    };\n\n    /**\n     * Add messages to a state and sort them by timecreated.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messages Messages to add to state.\n     * @return {Object} state New state with added messages.\n     */\n    var addMessages = function(state, messages) {\n        var newState = cloneState(state);\n        var formattedMessages = formatMessages(messages, state.loggedInUserId, state.members);\n        var allMessages = state.messages.concat(formattedMessages);\n        // Sort the messages. Oldest to newest.\n        allMessages.sort(function(a, b) {\n            if (a.timeCreated < b.timeCreated) {\n                return -1;\n            } else if (a.timeCreated > b.timeCreated) {\n                return 1;\n            } else if (a.id < b.id) {\n                return -1;\n            } else if (a.id > b.id) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n\n        // Filter out any duplicate messages.\n        newState.messages = allMessages.filter(function(message, index, sortedMessages) {\n            return !index || message.id !== sortedMessages[index - 1].id;\n        });\n\n        return newState;\n    };\n\n    /**\n     * Remove messages from state.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messages Messages to remove from state.\n     * @return {Object} state New state with removed messages.\n     */\n    var removeMessages = function(state, messages) {\n        var newState = cloneState(state);\n        var removeMessageIds = messages.map(function(message) {\n            return message.id;\n        });\n        newState.messages = newState.messages.filter(function(message) {\n            return removeMessageIds.indexOf(message.id) < 0;\n        });\n\n        return newState;\n    };\n\n    /**\n     * Remove messages from state by message id.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messagesIds Message ids to remove from state.\n     * @return {Object} state New state with removed messages.\n     */\n    var removeMessagesById = function(state, messagesIds) {\n        var newState = cloneState(state);\n        newState.messages = newState.messages.filter(function(message) {\n            return messagesIds.indexOf(message.id) < 0;\n        });\n\n        return newState;\n    };\n\n    /**\n     * Add conversation member to state.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} members Conversation members to be added to state.\n     * @return {Object} New state with added members.\n     */\n    var addMembers = function(state, members) {\n        var newState = cloneState(state);\n        var formattedMembers = formatMembers(members);\n        formattedMembers.forEach(function(member) {\n            newState.members[member.id] = member;\n        });\n        return newState;\n    };\n\n    /**\n     * Remove members from state.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} members Members to be removed from state.\n     * @return {Object} New state with removed members.\n     */\n    var removeMembers = function(state, members) {\n        var newState = cloneState(state);\n        members.forEach(function(member) {\n            delete newState.members[member.id];\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state loading messages attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New loading messages value.\n     * @return {Object} New state with loading messages attribute.\n     */\n    var setLoadingMessages = function(state, value) {\n        var newState = cloneState(state);\n        newState.loadingMessages = value;\n        if (state.loadingMessages && !value) {\n            // If we're going from loading to not loading then\n            // it means we've tried to load.\n            newState.hasTriedToLoadMessages = true;\n        }\n        return newState;\n    };\n\n    /**\n     * Set the state sending message attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New sending message value.\n     * @return {Object} New state with sending message attribute.\n     */\n    var setSendingMessage = function(state, value) {\n        var newState = cloneState(state);\n        newState.sendingMessage = value;\n        return newState;\n    };\n\n    /**\n     * Set the state loading members attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New loading members value.\n     * @return {Object} New state with loading members attribute.\n     */\n    var setLoadingMembers = function(state, value) {\n        var newState = cloneState(state);\n        newState.loadingMembers = value;\n        return newState;\n    };\n\n    /**\n     * Set the conversation id.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} value The ID.\n     * @return {Object} New state.\n     */\n    var setId = function(state, value) {\n        var newState = cloneState(state);\n        newState.id = value;\n        return newState;\n    };\n\n    /**\n     * Set the state name attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} value New name value.\n     * @return {Object} New state with name attribute.\n     */\n    var setName = function(state, value) {\n        var newState = cloneState(state);\n        newState.name = value;\n        return newState;\n    };\n\n    /**\n     * Set the state subname attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} value New subname value.\n     * @return {Object} New state.\n     */\n    var setSubname = function(state, value) {\n        var newState = cloneState(state);\n        newState.subname = value;\n        return newState;\n    };\n\n    /**\n     * Set the conversation type.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Int} type Conversation type.\n     * @return {Object} New state.\n     */\n    var setType = function(state, type) {\n        var newState = cloneState(state);\n        newState.type = type;\n        return newState;\n    };\n\n    /**\n     * Set whether the conversation is a favourite conversation.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} isFavourite If it's a favourite.\n     * @return {Object} New state.\n     */\n    var setIsFavourite = function(state, isFavourite) {\n        var newState = cloneState(state);\n        newState.isFavourite = isFavourite;\n        return newState;\n    };\n\n    /**\n     * Set whether the conversation is a muted conversation.\n     *\n     * @param  {Object} state Current state.\n     * @param  {bool} isMuted If it's muted.\n     * @return {Object} New state.\n     */\n    var setIsMuted = function(state, isMuted) {\n        var newState = cloneState(state);\n        newState.isMuted = isMuted;\n        return newState;\n    };\n\n    /**\n     * Set the total member count.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} count The count.\n     * @return {Object} New state.\n     */\n    var setTotalMemberCount = function(state, count) {\n        var newState = cloneState(state);\n        newState.totalMemberCount = count;\n        return newState;\n    };\n\n    /**\n     * Set the conversation image url.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} url The url to the image.\n     * @return {Object} New state.\n     */\n    var setImageUrl = function(state, url) {\n        var newState = cloneState(state);\n        newState.imageUrl = url;\n        return newState;\n    };\n\n    /**\n     * Set the state loading confirm action attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New loading confirm action value.\n     * @return {Object} New state with loading confirm action attribute.\n     */\n    var setLoadingConfirmAction = function(state, value) {\n        var newState = cloneState(state);\n        newState.loadingConfirmAction = value;\n        return newState;\n    };\n\n    /**\n     * Set the state pending delete conversation attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New pending delete conversation value.\n     * @return {Object} New state with pending delete conversation attribute.\n     */\n    var setPendingDeleteConversation = function(state, value) {\n        var newState = cloneState(state);\n        newState.pendingDeleteConversation = value;\n        return newState;\n    };\n\n    /**\n     * Set the state pending block userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to block.\n     * @return {Object} New state with array of pending block userids.\n     */\n    var addPendingBlockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingBlockUserIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending remove userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove.\n     * @return {Object} New state with array of pending remove userids.\n     */\n    var addPendingRemoveContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingRemoveContactIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending unblock userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to unblock.\n     * @return {Object} New state with array of pending unblock userids.\n     */\n    var addPendingUnblockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingUnblockUserIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending add users to contacts userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to add users to contacts.\n     * @return {Object} New state with array of pending add users to contacts userids.\n     */\n    var addPendingAddContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingAddContactIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending delete messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to delete.\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var addPendingDeleteMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds.forEach(function(id) {\n            newState.pendingDeleteMessageIds.push(id);\n        });\n        return newState;\n    };\n\n\n    /**\n     * Update the state pending block userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to block.\n     * @return {Object} New state with array of pending block userids.\n     */\n    var removePendingBlockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingBlockUserIds = newState.pendingBlockUserIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending remove userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to remove.\n     * @return {Object} New state with array of pending remove userids.\n     */\n    var removePendingRemoveContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingRemoveContactIds = newState.pendingRemoveContactIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending unblock userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to unblock.\n     * @return {Object} New state with array of pending unblock userids.\n     */\n    var removePendingUnblockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingUnblockUserIds = newState.pendingUnblockUserIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending add to contacts userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to add to contacts.\n     * @return {Object} New state with array of pending add to contacts userids.\n     */\n    var removePendingAddContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingAddContactIds = newState.pendingAddContactIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending delete messages userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Message ids to remove from the list of messages to delete.\n     * @return {Object} New state with array of messages to delete.\n     */\n    var removePendingDeleteMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        newState.pendingDeleteMessageIds = newState.pendingDeleteMessageIds.filter(function(id) {\n            return messageIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Add messages to state selected messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages that are selected.\n     * @return {Object} New state with array of not blocked members.\n     */\n    var addSelectedMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        newState.selectedMessageIds = newState.selectedMessageIds.concat(messageIds);\n        return newState;\n    };\n\n    /**\n     * Remove messages from the state selected messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to remove from selected messages.\n     * @return {Object} New state with array of selected messages.\n     */\n    var removeSelectedMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        newState.selectedMessageIds = newState.selectedMessageIds.filter(function(id) {\n            return messageIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Mark messages as read.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} readMessages Messages that are read.\n     * @return {Object} New state with array of messages that have the isread attribute set.\n     */\n    var markMessagesAsRead = function(state, readMessages) {\n        var newState = cloneState(state);\n        var readMessageIds = readMessages.map(function(message) {\n            return message.id;\n        });\n        newState.messages = newState.messages.map(function(message) {\n            if (readMessageIds.indexOf(message.id) >= 0) {\n                message.isRead = true;\n            }\n\n            return message;\n        });\n        return newState;\n    };\n\n    /**\n     * Add a contact request to each of the members that the request is for.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} requests The contact requests\n     * @return {Object} New state\n     */\n    var addContactRequests = function(state, requests) {\n        var newState = cloneState(state);\n\n        requests.forEach(function(request) {\n            var fromUserId = request.userid;\n            var toUserId = request.requesteduserid;\n            newState.members[fromUserId].contactrequests.push(request);\n            newState.members[toUserId].contactrequests.push(request);\n        });\n\n        return newState;\n    };\n\n    /**\n     * Remove a contact request from the members of that request.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} requests The contact requests\n     * @return {Object} New state\n     */\n    var removeContactRequests = function(state, requests) {\n        var newState = cloneState(state);\n        requests.forEach(function(request) {\n            var fromUserId = request.userid;\n            var toUserId = request.requesteduserid;\n\n            newState.members[fromUserId].contactrequests = newState.members[fromUserId].contactrequests.filter(function(existing) {\n                return existing.userid != fromUserId;\n            });\n            newState.members[toUserId].contactrequests = newState.members[toUserId].contactrequests.filter(function(existing) {\n                return existing.requesteduserid != toUserId;\n            });\n        });\n\n        return newState;\n    };\n\n    /**\n     * Set wheter the message of the conversation can delete for all users.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value If it can delete for all users.\n     * @return {Object} New state.\n     */\n    var setCanDeleteMessagesForAllUsers = function(state, value) {\n        var newState = cloneState(state);\n        newState.canDeleteMessagesForAllUsers = value;\n        return newState;\n    };\n\n    /**\n     * Set wheter the messages of the conversation delete for all users.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value Delete messages for all users.\n     * @return {Object} New state.\n     */\n    var setDeleteMessagesForAllUsers = function(state, value) {\n        var newState = cloneState(state);\n        newState.deleteMessagesForAllUsers = value;\n        return newState;\n    };\n\n    return {\n        buildInitialState: buildInitialState,\n        addMessages: addMessages,\n        removeMessages: removeMessages,\n        removeMessagesById: removeMessagesById,\n        addMembers: addMembers,\n        removeMembers: removeMembers,\n        setLoadingMessages: setLoadingMessages,\n        setSendingMessage: setSendingMessage,\n        setLoadingMembers: setLoadingMembers,\n        setId: setId,\n        setName: setName,\n        setSubname: setSubname,\n        setType: setType,\n        setIsFavourite: setIsFavourite,\n        setIsMuted: setIsMuted,\n        setCanDeleteMessagesForAllUsers: setCanDeleteMessagesForAllUsers,\n        setDeleteMessagesForAllUsers: setDeleteMessagesForAllUsers,\n        setTotalMemberCount: setTotalMemberCount,\n        setImageUrl: setImageUrl,\n        setLoadingConfirmAction: setLoadingConfirmAction,\n        setPendingDeleteConversation: setPendingDeleteConversation,\n        addPendingBlockUsersById: addPendingBlockUsersById,\n        addPendingRemoveContactsById: addPendingRemoveContactsById,\n        addPendingUnblockUsersById: addPendingUnblockUsersById,\n        addPendingAddContactsById: addPendingAddContactsById,\n        addPendingDeleteMessagesById: addPendingDeleteMessagesById,\n        removePendingBlockUsersById: removePendingBlockUsersById,\n        removePendingRemoveContactsById: removePendingRemoveContactsById,\n        removePendingUnblockUsersById: removePendingUnblockUsersById,\n        removePendingAddContactsById: removePendingAddContactsById,\n        removePendingDeleteMessagesById: removePendingDeleteMessagesById,\n        addSelectedMessagesById: addSelectedMessagesById,\n        removeSelectedMessagesById: removeSelectedMessagesById,\n        markMessagesAsRead: markMessagesAsRead,\n        addContactRequests: addContactRequests,\n        removeContactRequests: removeContactRequests\n    };\n});\n"],"file":"message_drawer_view_conversation_state_manager.min.js"}