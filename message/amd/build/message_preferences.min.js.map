{"version":3,"sources":["../src/message_preferences.js"],"names":["define","$","Ajax","Notification","MessageNotificationPreference","CustomEvents","SELECTORS","PREFERENCE","PREFERENCES_CONTAINER","BLOCK_NON_CONTACTS","BLOCK_NON_CONTACTS_CONTAINER","MessagePreferences","element","root","userId","find","attr","registerEventListeners","prototype","preferencesDisabled","hasClass","saveBlockNonContactsStatus","checkbox","container","ischecked","prop","Deferred","resolve","addClass","request","methodname","args","userid","preferences","type","value","call","fail","exception","always","removeClass","events","activate","on","bind","e","preferencesContainer","target","closest","preferenceElement","messagePreference","save"],"mappings":"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","file":"message_preferences.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the message preference page.\n *\n * @module     core_message/message_preferences\n * @class      message_preferences\n * @package    message\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/ajax', 'core/notification',\n        'core_message/message_notification_preference', 'core/custom_interaction_events'],\n        function($, Ajax, Notification, MessageNotificationPreference, CustomEvents) {\n\n    var SELECTORS = {\n        PREFERENCE: '[data-state]',\n        PREFERENCES_CONTAINER: '[data-region=\"preferences-container\"]',\n        BLOCK_NON_CONTACTS: '[data-region=\"block-non-contacts-container\"] [data-block-non-contacts]',\n        BLOCK_NON_CONTACTS_CONTAINER: '[data-region=\"block-non-contacts-container\"]',\n    };\n\n    /**\n     * Constructor for the MessagePreferences.\n     *\n     * @param {object} element The root element for the message preferences\n     */\n    var MessagePreferences = function(element) {\n        this.root = $(element);\n        this.userId = this.root.find(SELECTORS.PREFERENCES_CONTAINER).attr('data-user-id');\n\n        this.registerEventListeners();\n    };\n\n    /**\n     * Check if the preferences have been disabled on this page.\n     *\n     * @method preferencesDisabled\n     * @return {bool}\n     */\n    MessagePreferences.prototype.preferencesDisabled = function() {\n        return this.root.find(SELECTORS.PREFERENCES_CONTAINER).hasClass('disabled');\n    };\n\n    /**\n     * Update the block messages from non-contacts user preference in the DOM and\n     * send a request to update on the server.\n     *\n     * @return {Promise}\n     * @method saveBlockNonContactsStatus\n     */\n    MessagePreferences.prototype.saveBlockNonContactsStatus = function() {\n        var checkbox = this.root.find(SELECTORS.BLOCK_NON_CONTACTS);\n        var container = this.root.find(SELECTORS.BLOCK_NON_CONTACTS_CONTAINER);\n        var ischecked = checkbox.prop('checked');\n\n        if (container.hasClass('loading')) {\n            return $.Deferred().resolve();\n        }\n\n        container.addClass('loading');\n\n        var request = {\n            methodname: 'core_user_update_user_preferences',\n            args: {\n                userid: this.userId,\n                preferences: [\n                    {\n                        type: checkbox.attr('data-preference-key'),\n                        value: ischecked ? 1 : 0,\n                    }\n                ]\n            }\n        };\n\n        return Ajax.call([request])[0]\n            .fail(Notification.exception)\n            .always(function() {\n                container.removeClass('loading');\n            });\n    };\n\n    /**\n     * Create all of the event listeners for the message preferences page.\n     *\n     * @method registerEventListeners\n     */\n    MessagePreferences.prototype.registerEventListeners = function() {\n        CustomEvents.define(this.root, [\n            CustomEvents.events.activate\n        ]);\n\n        this.root.on(CustomEvents.events.activate, SELECTORS.BLOCK_NON_CONTACTS, function() {\n            this.saveBlockNonContactsStatus();\n        }.bind(this));\n\n        this.root.on('change', function(e) {\n            if (!this.preferencesDisabled()) {\n                var preferencesContainer = $(e.target).closest(SELECTORS.PREFERENCES_CONTAINER);\n                var preferenceElement = $(e.target).closest(SELECTORS.PREFERENCE);\n                var messagePreference = new MessageNotificationPreference(preferencesContainer, this.userId);\n\n                preferenceElement.addClass('loading');\n                messagePreference.save().always(function() {\n                    preferenceElement.removeClass('loading');\n                });\n            }\n        }.bind(this));\n    };\n\n    return MessagePreferences;\n});\n"]}