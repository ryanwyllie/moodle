{"version":3,"sources":["../src/message_drawer_view_conversation.js"],"names":["define","$","AutoRows","BackOffTimer","CustomEvents","Notification","PubSub","Str","Repository","MessageDrawerEvents","Constants","Patcher","Renderer","StateManager","MessageDrawerRouter","MessageDrawerRoutes","stateCache","viewState","loadedAllMessages","messagesOffset","newMessagesPollTimer","isRendering","renderBuffer","isResetting","isSendingMessage","render","renderers","NEWEST_FIRST","NEWEST_MESSAGES_FIRST","LOAD_MESSAGE_LIMIT","MILLISECONDS_IN_SEC","SELECTORS","CONVERSATION_TYPES","getOtherUserId","type","PUBLIC","loggedInUserId","SELF","otherUserIds","Object","keys","members","filter","userId","length","getCachedPrivateConversationIdFromUserId","reduce","carry","id","state","getLoggedInUserProfile","body","parseInt","attr","fullname","profileimageurl","profileimageurlsmall","isonline","showonlinestatus","isblocked","iscontact","isdeleted","canmessage","requirescontact","contactrequests","getMessagesOffset","setMessagesOffset","value","hasLoadedAllMessages","setLoadedAllMessages","getMessagesContainer","find","MESSAGES_CONTAINER","formatConversationForEvent","name","subname","imageUrl","isFavourite","isMuted","totalMemberCount","messages","map","message","extend","formattedMember","request","loadEmptyPrivateConversation","loggedInUserProfile","otherUserId","conversationType","PRIVATE","newState","setLoadingMembers","setLoadingMessages","getMemberInfo","then","profiles","Error","profile","addMembers","setName","setType","setImageUrl","setTotalMemberCount","catch","error","exception","updateStateFromConversation","conversation","otherUser","otherUsers","member","imageurl","setSubname","membercount","setIsFavourite","isfavourite","setIsMuted","ismuted","addMessages","setCanDeleteMessagesForAllUsers","candeletemessagesforallusers","loadNewConversation","conversationId","messageLimit","messageOffset","newestFirst","getConversation","slice","hasLoggedInUser","concat","markConversationAsRead","loadExistingConversation","messageCount","hasLoadedEnoughMessages","renderPromise","loadMessages","limit","offset","ignoreList","timeFrom","getMessages","result","indexOf","membersToAdd","getLoadNewMessagesCallback","mostRecentMessage","ignoreMessageIds","i","timeCreated","push","restart","publish","CONVERSATION_NEW_LAST_MESSAGE","Deferred","resolve","promise","markAllConversationMessagesAsRead","markMessagesAsRead","CONVERSATION_READ","requestBlockUser","cancelRequest","addPendingBlockUsersById","blockUser","setLoadingConfirmAction","removePendingBlockUsersById","CONTACT_BLOCKED","requestUnblockUser","addPendingUnblockUsersById","unblockUser","removePendingUnblockUsersById","CONTACT_UNBLOCKED","requestRemoveContact","addPendingRemoveContactsById","removeContact","deleteContacts","removePendingRemoveContactsById","CONTACT_REMOVED","requestAddContact","addPendingAddContactsById","addContact","createContactRequest","response","warnings","removePendingAddContactsById","addContactRequests","setFavourite","setFavouriteConversations","CONVERSATION_SET_FAVOURITE","unsetFavourite","unsetFavouriteConversations","CONVERSATION_UNSET_FAVOURITE","setMuted","setMutedConversations","CONVERSATION_SET_MUTED","unsetMuted","unsetMutedConversations","CONVERSATION_UNSET_MUTED","requestDeleteSelectedMessages","selectedMessageIds","addPendingDeleteMessagesById","deleteSelectedMessages","messageIds","pendingDeleteMessageIds","deleteMessagesPromise","deleteMessagesForAllUsers","deleteMessages","removeMessagesById","removePendingDeleteMessagesById","removeSelectedMessagesById","setDeleteMessagesForAllUsers","prevLastMessage","newLastMessage","CONVERSATION_DELETED","requestDeleteConversation","setPendingDeleteConversation","deleteConversation","removeMessages","acceptContactRequest","requests","requesteduserid","removeContactRequests","CONTACT_ADDED","CONTACT_REQUEST_ACCEPTED","declineContactRequest","CONTACT_REQUEST_DECLINED","sendMessage","text","setSendingMessage","newConversationId","sendMessagePromise","newCanDeleteMessagesForAllUsers","sendMessageToUser","conversationid","sendMessageToConversation","setId","resetMessagePollTimer","CONVERSATION_CREATED","toggleSelectMessage","messageId","addSelectedMessagesById","cancelEditMode","processRenderBuffer","header","footer","renderable","shift","renderPromises","renderFunc","patch","when","apply","deferred","reject","generateRenderFunction","isNewConversation","rendererFunc","initialState","buildInitialState","midnight","syncPatch","buildPatch","generateConfirmActionHandler","actionCallback","e","data","loadingConfirmAction","originalEvent","preventDefault","handleSendMessage","target","footerContainer","closest","FOOTER_CONTAINER","textArea","MESSAGE_TEXT_AREA","val","trim","handleSelectMessage","selection","window","getSelection","toString","is","element","MESSAGE","handleCancelEditMode","generateHandleViewContact","namespace","go","VIEW_CONTACT","handleSetFavourite","handleUnsetFavourite","handleSetMuted","handleUnsetMuted","handleDeleteMessagesForAllUsersToggle","newValue","prop","generateHandleViewGroupInfo","VIEW_GROUP_INFO","registerEventListeners","isLoadingMoreMessages","messagesContainer","headerActivateHandlers","ACTION_REQUEST_BLOCK","ACTION_REQUEST_UNBLOCK","ACTION_REQUEST_ADD_CONTACT","ACTION_REQUEST_REMOVE_CONTACT","ACTION_REQUEST_DELETE_CONVERSATION","ACTION_CANCEL_EDIT_MODE","ACTION_VIEW_CONTACT","ACTION_VIEW_GROUP_INFO","ACTION_CONFIRM_FAVOURITE","ACTION_CONFIRM_MUTE","ACTION_CONFIRM_UNFAVOURITE","ACTION_CONFIRM_UNMUTE","bodyActivateHandlers","ACTION_CANCEL_CONFIRM","ACTION_CONFIRM_BLOCK","ACTION_CONFIRM_UNBLOCK","ACTION_CONFIRM_ADD_CONTACT","ACTION_CONFIRM_REMOVE_CONTACT","ACTION_CONFIRM_DELETE_SELECTED_MESSAGES","ACTION_CONFIRM_DELETE_CONVERSATION","ACTION_ACCEPT_CONTACT_REQUEST","ACTION_DECLINE_CONTACT_REQUEST","DELETE_MESSAGES_FOR_ALL_USERS_TOGGLE","footerActivateHandlers","SEND_MESSAGE_BUTTON","ACTION_REQUEST_DELETE_SELECTED_MESSAGES","init","events","activate","enter","scrollTop","scrollLock","on","hasMembers","forEach","handler","selector","handlerFunction","enterToSend","subscribe","ROUTE_CHANGED","newRouteData","route","VIEW_CONVERSATION","stop","getIncrementalCallback","messagePollMin","messagePollMax","messagePollAfterMax","start","resetState","resetNoConversation","resetNoConversationPromise","getConversationBetweenUsers","getSelfConversation","resetByConversation","resetById","cache","show","conversationOrId","action","isNaN","CAN_RECEIVE_FOCUS","first","focus","currentOtherUserId","description","get_string"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the conversation page in the message drawer.\n *\n * This function handles all of the user actions that the user can take\n * when interacting with the conversation page.\n *\n * It maintains a view state which is a data representation of the view\n * and only operates on that data.\n *\n * The view state is immutable and should never be modified directly. Instead\n * all changes to the view state should be done using the StateManager which\n * will generate a new version of the view state with the requested changes.\n *\n * After any changes to the view state the module will call the render function\n * to ask the renderer to update the UI.\n *\n * General rules for this module:\n * 1.) Never modify viewState directly. All changes should be via the StateManager.\n * 2.) Call render() with the new state when you want to update the UI\n * 3.) Never modify the UI directly in this module. This module is only concerned\n *     with the data in the view state.\n *\n * The general flow for a user interaction will be something like:\n * User interaction: User clicks \"confirm block\" button to block the other user\n *      1.) This module is hears the click\n *      2.) This module sends a request to the server to block the user\n *      3.) The server responds with the new user profile\n *      4.) This module generates a new state using the StateManager with the updated\n *          user profile.\n *      5.) This module asks the Patcher to generate a patch from the current state and\n *          the newly generated state. This patch tells the renderer what has changed\n *          between the states.\n *      6.) This module gives the Renderer the generated patch. The renderer updates\n *          the UI with changes according to the patch.\n *\n * @module     core_message/message_drawer_view_conversation\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n[\n    'jquery',\n    'core/auto_rows',\n    'core/backoff_timer',\n    'core/custom_interaction_events',\n    'core/notification',\n    'core/pubsub',\n    'core/str',\n    'core_message/message_repository',\n    'core_message/message_drawer_events',\n    'core_message/message_drawer_view_conversation_constants',\n    'core_message/message_drawer_view_conversation_patcher',\n    'core_message/message_drawer_view_conversation_renderer',\n    'core_message/message_drawer_view_conversation_state_manager',\n    'core_message/message_drawer_router',\n    'core_message/message_drawer_routes',\n],\nfunction(\n    $,\n    AutoRows,\n    BackOffTimer,\n    CustomEvents,\n    Notification,\n    PubSub,\n    Str,\n    Repository,\n    MessageDrawerEvents,\n    Constants,\n    Patcher,\n    Renderer,\n    StateManager,\n    MessageDrawerRouter,\n    MessageDrawerRoutes\n) {\n\n    // Contains a cache of all view states that have been loaded so far\n    // which saves us having to reload stuff with network requests when\n    // switching between conversations.\n    var stateCache = {};\n    // The current data representation of the view.\n    var viewState = null;\n    var loadedAllMessages = false;\n    var messagesOffset = 0;\n    var newMessagesPollTimer = null;\n    var isRendering = false;\n    var renderBuffer = [];\n    // If the UI is currently resetting.\n    var isResetting = true;\n    // If the UI is currently sending a message.\n    var isSendingMessage = false;\n    // These functions which will be generated when this module is\n    // first called. See generateRenderFunction for details.\n    var render = null;\n    // The list of renderers that have been registered to render\n    // this conversation. See generateRenderFunction for details.\n    var renderers = [];\n\n    var NEWEST_FIRST = Constants.NEWEST_MESSAGES_FIRST;\n    var LOAD_MESSAGE_LIMIT = Constants.LOAD_MESSAGE_LIMIT;\n    var MILLISECONDS_IN_SEC = Constants.MILLISECONDS_IN_SEC;\n    var SELECTORS = Constants.SELECTORS;\n    var CONVERSATION_TYPES = Constants.CONVERSATION_TYPES;\n\n    /**\n     * Get the other user userid.\n     *\n     * @return {Number} Userid.\n     */\n    var getOtherUserId = function() {\n        if (!viewState || viewState.type == CONVERSATION_TYPES.PUBLIC) {\n            return null;\n        }\n\n        var loggedInUserId = viewState.loggedInUserId;\n        if (viewState.type == CONVERSATION_TYPES.SELF) {\n            // It's a self-conversation, so the other user is the one logged in.\n            return loggedInUserId;\n        }\n\n        var otherUserIds = Object.keys(viewState.members).filter(function(userId) {\n            return loggedInUserId != userId;\n        });\n\n        return otherUserIds.length ? otherUserIds[0] : null;\n    };\n\n    /**\n     * Search the cache to see if we've already loaded a private conversation\n     * with the given user id.\n     *\n     * @param {Number} userId The id of the other user.\n     * @return {Number|null} Conversation id.\n     */\n    var getCachedPrivateConversationIdFromUserId = function(userId) {\n        return Object.keys(stateCache).reduce(function(carry, id) {\n            if (!carry) {\n                var state = stateCache[id].state;\n\n                if (state.type != CONVERSATION_TYPES.PUBLIC) {\n                    if (userId in state.members) {\n                        // We've found a cached conversation for this user!\n                        carry = state.id;\n                    }\n                }\n            }\n\n            return carry;\n        }, null);\n    };\n\n    /**\n     * Get profile info for logged in user.\n     *\n     * @param {Object} body Conversation body container element.\n     * @return {Object}\n     */\n    var getLoggedInUserProfile = function(body) {\n        return {\n            id: parseInt(body.attr('data-user-id'), 10),\n            fullname: null,\n            profileimageurl: null,\n            profileimageurlsmall: null,\n            isonline:  null,\n            showonlinestatus: null,\n            isblocked: null,\n            iscontact: null,\n            isdeleted: null,\n            canmessage:  null,\n            requirescontact: null,\n            contactrequests: []\n        };\n    };\n\n    /**\n     * Get the messages offset value to load more messages.\n     *\n     * @return {Number}\n     */\n    var getMessagesOffset = function() {\n        return messagesOffset;\n    };\n\n    /**\n     * Set the messages offset value for loading more messages.\n     *\n     * @param {Number} value The offset value\n     */\n    var setMessagesOffset = function(value) {\n        messagesOffset = value;\n        stateCache[viewState.id].messagesOffset = value;\n    };\n\n    /**\n     * Check if all messages have been loaded.\n     *\n     * @return {Bool}\n     */\n    var hasLoadedAllMessages = function() {\n        return loadedAllMessages;\n    };\n\n    /**\n     * Set whether all messages have been loaded or not.\n     *\n     * @param {Bool} value If all messages have been loaded.\n     */\n    var setLoadedAllMessages = function(value) {\n        loadedAllMessages = value;\n        stateCache[viewState.id].loadedAllMessages = value;\n    };\n\n    /**\n     * Get the messages container element.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @return {Object} The messages container element.\n     */\n    var getMessagesContainer = function(body) {\n        return body.find(SELECTORS.MESSAGES_CONTAINER);\n    };\n\n    /**\n     * Reformat the conversation for an event payload.\n     *\n     * @param  {Object} state The view state.\n     * @return {Object} New formatted conversation.\n     */\n    var formatConversationForEvent = function(state) {\n        return {\n            id: state.id,\n            name: state.name,\n            subname: state.subname,\n            imageUrl: state.imageUrl,\n            isFavourite: state.isFavourite,\n            isMuted: state.isMuted,\n            type: state.type,\n            totalMemberCount: state.totalMemberCount,\n            loggedInUserId: state.loggedInUserId,\n            messages: state.messages.map(function(message) {\n                return $.extend({}, message);\n            }),\n            members: Object.keys(state.members).map(function(id) {\n                var formattedMember = $.extend({}, state.members[id]);\n                formattedMember.contactrequests = state.members[id].contactrequests.map(function(request) {\n                    return $.extend({}, request);\n                });\n                return formattedMember;\n            })\n        };\n    };\n\n    /**\n     * Load up an empty private conversation between the logged in user and the\n     * other user. Sets all of the conversation details based on the other user.\n     *\n     * A conversation isn't created until the user sends the first message.\n     *\n     * @param  {Object} loggedInUserProfile The logged in user profile.\n     * @param  {Number} otherUserId The other user id.\n     * @return {Object} Profile returned from repository.\n     */\n    var loadEmptyPrivateConversation = function(loggedInUserProfile, otherUserId) {\n        var loggedInUserId = loggedInUserProfile.id;\n        // If the other user id is the same as the logged in user then this is a self\n        // conversation.\n        var conversationType = loggedInUserId == otherUserId ? CONVERSATION_TYPES.SELF : CONVERSATION_TYPES.PRIVATE;\n        var newState = StateManager.setLoadingMembers(viewState, true);\n        newState = StateManager.setLoadingMessages(newState, true);\n        render(newState);\n\n        return Repository.getMemberInfo(loggedInUserId, [otherUserId], true, true)\n            .then(function(profiles) {\n                if (profiles.length) {\n                    return profiles[0];\n                } else {\n                    throw new Error('Unable to load other user profile');\n                }\n            })\n            .then(function(profile) {\n                // If the conversation is a self conversation then the profile loaded is the\n                // logged in user so only add that to the members array.\n                var members = conversationType == CONVERSATION_TYPES.SELF ? [profile] : [profile, loggedInUserProfile];\n                var newState = StateManager.addMembers(viewState, members);\n                newState = StateManager.setLoadingMembers(newState, false);\n                newState = StateManager.setLoadingMessages(newState, false);\n                newState = StateManager.setName(newState, profile.fullname);\n                newState = StateManager.setType(newState, conversationType);\n                newState = StateManager.setImageUrl(newState, profile.profileimageurl);\n                newState = StateManager.setTotalMemberCount(newState, members.length);\n                render(newState);\n                return profile;\n            })\n            .catch(function(error) {\n                var newState = StateManager.setLoadingMembers(viewState, false);\n                render(newState);\n                Notification.exception(error);\n            });\n    };\n\n    /**\n     * Create a new state from a conversation object.\n     *\n     * @param {Object} conversation The conversation object.\n     * @param {Number} loggedInUserId The logged in user id.\n     * @return {Object} new state.\n     */\n    var updateStateFromConversation = function(conversation, loggedInUserId) {\n        var otherUser = null;\n        if (conversation.type == CONVERSATION_TYPES.PRIVATE) {\n            // For private conversations, remove current logged in user from the members list to get the other user.\n            var otherUsers = conversation.members.filter(function(member) {\n                return member.id != loggedInUserId;\n            });\n            otherUser = otherUsers.length ? otherUsers[0] : null;\n        } else if (conversation.type == CONVERSATION_TYPES.SELF) {\n            // Self-conversations have only one member.\n            otherUser = conversation.members[0];\n        }\n\n        var name = conversation.name;\n        var imageUrl = conversation.imageurl;\n\n        if (conversation.type != CONVERSATION_TYPES.PUBLIC) {\n            name = name || otherUser ? otherUser.fullname : '';\n            imageUrl = imageUrl || otherUser ? otherUser.profileimageurl : '';\n        }\n\n        var newState = StateManager.addMembers(viewState, conversation.members);\n        newState = StateManager.setName(newState, name);\n        newState = StateManager.setSubname(newState, conversation.subname);\n        newState = StateManager.setType(newState, conversation.type);\n        newState = StateManager.setImageUrl(newState, imageUrl);\n        newState = StateManager.setTotalMemberCount(newState, conversation.membercount);\n        newState = StateManager.setIsFavourite(newState, conversation.isfavourite);\n        newState = StateManager.setIsMuted(newState, conversation.ismuted);\n        newState = StateManager.addMessages(newState, conversation.messages);\n        newState = StateManager.setCanDeleteMessagesForAllUsers(newState, conversation.candeletemessagesforallusers);\n        return newState;\n    };\n\n    /**\n     * Get the details for a conversation from the conversation id.\n     *\n     * @param  {Number} conversationId The conversation id.\n     * @param  {Object} loggedInUserProfile The logged in user profile.\n     * @param  {Number} messageLimit The number of messages to include.\n     * @param  {Number} messageOffset The number of messages to skip.\n     * @param  {Bool} newestFirst Order messages newest first.\n     * @return {Object} Promise resolved when loaded.\n     */\n    var loadNewConversation = function(\n        conversationId,\n        loggedInUserProfile,\n        messageLimit,\n        messageOffset,\n        newestFirst\n    ) {\n        var loggedInUserId = loggedInUserProfile.id;\n        var newState = StateManager.setLoadingMembers(viewState, true);\n        newState = StateManager.setLoadingMessages(newState, true);\n        render(newState);\n\n        return Repository.getConversation(\n            loggedInUserId,\n            conversationId,\n            true,\n            true,\n            0,\n            0,\n            messageLimit + 1,\n            messageOffset,\n            newestFirst\n        )\n            .then(function(conversation) {\n                if (conversation.messages.length > messageLimit) {\n                    conversation.messages = conversation.messages.slice(1);\n                } else {\n                    setLoadedAllMessages(true);\n                }\n\n                setMessagesOffset(messageOffset + messageLimit);\n\n                return conversation;\n            })\n            .then(function(conversation) {\n                var hasLoggedInUser = conversation.members.filter(function(member) {\n                    return member.id == loggedInUserProfile.id;\n                });\n\n                if (hasLoggedInUser.length < 1) {\n                    conversation.members = conversation.members.concat([loggedInUserProfile]);\n                }\n\n                var newState = updateStateFromConversation(conversation, loggedInUserProfile.id);\n                newState = StateManager.setLoadingMembers(newState, false);\n                newState = StateManager.setLoadingMessages(newState, false);\n                return render(newState)\n                    .then(function() {\n                        return conversation;\n                    });\n            })\n            .then(function() {\n                return markConversationAsRead(conversationId);\n            })\n            .catch(function(error) {\n                var newState = StateManager.setLoadingMembers(viewState, false);\n                newState = StateManager.setLoadingMessages(newState, false);\n                render(newState);\n                Notification.exception(error);\n            });\n    };\n\n    /**\n     * Get the details for a conversation from and existing conversation object.\n     *\n     * @param  {Object} conversation The conversation object.\n     * @param  {Object} loggedInUserProfile The logged in user profile.\n     * @param  {Number} messageLimit The number of messages to include.\n     * @param  {Bool} newestFirst Order messages newest first.\n     * @return {Object} Promise resolved when loaded.\n     */\n    var loadExistingConversation = function(\n        conversation,\n        loggedInUserProfile,\n        messageLimit,\n        newestFirst\n    ) {\n        var hasLoggedInUser = conversation.members.filter(function(member) {\n            return member.id == loggedInUserProfile.id;\n        });\n\n        if (hasLoggedInUser.length < 1) {\n            conversation.members = conversation.members.concat([loggedInUserProfile]);\n        }\n\n        var messageCount = conversation.messages.length;\n        var hasLoadedEnoughMessages = messageCount >= messageLimit;\n        var newState = updateStateFromConversation(conversation, loggedInUserProfile.id);\n        newState = StateManager.setLoadingMembers(newState, false);\n        newState = StateManager.setLoadingMessages(newState, !hasLoadedEnoughMessages);\n        var renderPromise = render(newState);\n\n        return renderPromise.then(function() {\n                if (!hasLoadedEnoughMessages) {\n                    // We haven't got enough messages so let's load some more.\n                    return loadMessages(conversation.id, messageLimit, messageCount, newestFirst, []);\n                } else {\n                    // We've got enough messages. No need to load any more for now.\n                    return {messages: conversation.messages};\n                }\n            })\n            .then(function() {\n                var messages = viewState.messages;\n                // Update the offset to reflect the number of messages we've loaded.\n                setMessagesOffset(messages.length);\n                markConversationAsRead(viewState.id);\n\n                return messages;\n            })\n            .catch(Notification.exception);\n    };\n\n    /**\n     * Load messages for this conversation and pass them to the renderer.\n     *\n     * @param  {Number} conversationId Conversation id.\n     * @param  {Number} limit Number of messages to load.\n     * @param  {Number} offset Get messages from offset.\n     * @param  {Bool} newestFirst Get newest messages first.\n     * @param  {Array} ignoreList Ignore any messages with ids in this list.\n     * @param  {Number|null} timeFrom Only get messages from this time onwards.\n     * @return {Promise} renderer promise.\n     */\n    var loadMessages = function(conversationId, limit, offset, newestFirst, ignoreList, timeFrom) {\n        return Repository.getMessages(\n                viewState.loggedInUserId,\n                conversationId,\n                limit ? limit + 1 : limit,\n                offset,\n                newestFirst,\n                timeFrom\n            )\n            .then(function(result) {\n                if (result.messages.length && ignoreList.length) {\n                    result.messages = result.messages.filter(function(message) {\n                        // Skip any messages in our ignore list.\n                        return ignoreList.indexOf(parseInt(message.id, 10)) < 0;\n                    });\n                }\n\n                return result;\n            })\n            .then(function(result) {\n                if (!limit) {\n                    return result;\n                } else if (result.messages.length > limit) {\n                    // Ignore the last result which was just to test if there are more\n                    // to load.\n                    result.messages = result.messages.slice(0, -1);\n                } else {\n                    setLoadedAllMessages(true);\n                }\n\n                return result;\n            })\n            .then(function(result) {\n                var membersToAdd = result.members.filter(function(member) {\n                    return !(member.id in viewState.members);\n                });\n                var newState = StateManager.addMembers(viewState, membersToAdd);\n                newState = StateManager.addMessages(newState, result.messages);\n                newState = StateManager.setLoadingMessages(newState, false);\n                return render(newState)\n                    .then(function() {\n                        return result;\n                    });\n            })\n            .catch(function(error) {\n                var newState = StateManager.setLoadingMessages(viewState, false);\n                render(newState);\n                // Re-throw the error for other error handlers.\n                throw error;\n            });\n    };\n\n    /**\n     * Create a callback function for getting new messages for this conversation.\n     *\n     * @param  {Number} conversationId Conversation id.\n     * @param  {Bool} newestFirst Show newest messages first\n     * @return {Function} Callback function that returns a renderer promise.\n     */\n    var getLoadNewMessagesCallback = function(conversationId, newestFirst) {\n        return function() {\n            var messages = viewState.messages;\n            var mostRecentMessage = messages.length ? messages[messages.length - 1] : null;\n\n            if (mostRecentMessage && !isResetting && !isSendingMessage) {\n                // There may be multiple messages with the same time created value since\n                // the accuracy is only down to the second. The server will include these\n                // messages in the result (since it does a >= comparison on time from) so\n                // we need to filter them back out of the result so that we're left only\n                // with the new messages.\n                var ignoreMessageIds = [];\n                for (var i = messages.length - 1; i >= 0; i--) {\n                    var message = messages[i];\n                    if (message.timeCreated === mostRecentMessage.timeCreated) {\n                        ignoreMessageIds.push(message.id);\n                    } else {\n                        // Since the messages are ordered in ascending order of time created\n                        // we can break as soon as we hit a message with a different time created\n                        // because we know all other messages will have lower values.\n                        break;\n                    }\n                }\n\n                return loadMessages(\n                        conversationId,\n                        0,\n                        0,\n                        newestFirst,\n                        ignoreMessageIds,\n                        mostRecentMessage.timeCreated\n                    )\n                    .then(function(result) {\n                        if (result.messages.length) {\n                            // If we found some results then restart the polling timer\n                            // because the other user might be sending messages.\n                            newMessagesPollTimer.restart();\n                            // We've also got a new last message so publish that for other\n                            // components to update.\n                            var conversation = formatConversationForEvent(viewState);\n                            PubSub.publish(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, conversation);\n                            return markConversationAsRead(conversationId);\n                        } else {\n                            return result;\n                        }\n                    });\n            }\n\n            return $.Deferred().resolve().promise();\n        };\n    };\n\n    /**\n     * Mark a conversation as read.\n     *\n     * @param  {Number} conversationId The conversation id.\n     * @return {Promise} The renderer promise.\n     */\n    var markConversationAsRead = function(conversationId) {\n        var loggedInUserId = viewState.loggedInUserId;\n\n        return Repository.markAllConversationMessagesAsRead(loggedInUserId, conversationId)\n            .then(function() {\n                var newState = StateManager.markMessagesAsRead(viewState, viewState.messages);\n                PubSub.publish(MessageDrawerEvents.CONVERSATION_READ, conversationId);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager there is request to block a user and run the renderer\n     * to show the block user dialogue.\n     *\n     * @param {Number} userId User id.\n     */\n    var requestBlockUser = function(userId) {\n        cancelRequest(userId);\n        var newState = StateManager.addPendingBlockUsersById(viewState, [userId]);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to block a user, update the statemanager and publish\n     * a contact has been blocked.\n     *\n     * @param  {Number} userId User id of user to block.\n     * @return {Promise} Renderer promise.\n     */\n    var blockUser = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.blockUser(viewState.loggedInUserId, userId)\n            .then(function(profile) {\n                var newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.removePendingBlockUsersById(newState, [userId]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONTACT_BLOCKED, userId);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to unblock a user and run the renderer\n     * to show the unblock user dialogue.\n     *\n     * @param {Number} userId User id of user to unblock.\n     */\n    var requestUnblockUser = function(userId) {\n        cancelRequest(userId);\n        var newState = StateManager.addPendingUnblockUsersById(viewState, [userId]);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to unblock a user, update the statemanager and publish\n     * a contact has been unblocked.\n     *\n     * @param  {Number} userId User id of user to unblock.\n     * @return {Promise} Renderer promise.\n     */\n    var unblockUser = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.unblockUser(viewState.loggedInUserId, userId)\n            .then(function(profile) {\n                var newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.removePendingUnblockUsersById(newState, [userId]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONTACT_UNBLOCKED, userId);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to remove a user from the contact list\n     * and run the renderer to show the remove user from contacts dialogue.\n     *\n     * @param {Number} userId User id of user to remove from contacts.\n     */\n    var requestRemoveContact = function(userId) {\n        cancelRequest(userId);\n        var newState = StateManager.addPendingRemoveContactsById(viewState, [userId]);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to remove a user from the contacts list. update the statemanager\n     * and publish a contact has been removed.\n     *\n     * @param  {Number} userId User id of user to remove from contacts.\n     * @return {Promise} Renderer promise.\n     */\n    var removeContact = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.deleteContacts(viewState.loggedInUserId, [userId])\n            .then(function(profiles) {\n                var newState = StateManager.addMembers(viewState, profiles);\n                newState = StateManager.removePendingRemoveContactsById(newState, [userId]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONTACT_REMOVED, userId);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to add a user to the contact list\n     * and run the renderer to show the add user to contacts dialogue.\n     *\n     * @param {Number} userId User id of user to add to contacts.\n     */\n    var requestAddContact = function(userId) {\n        cancelRequest(userId);\n        var newState = StateManager.addPendingAddContactsById(viewState, [userId]);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to add a user to the contacts list. update the statemanager\n     * and publish a contact has been added.\n     *\n     * @param  {Number} userId User id of user to add to contacts.\n     * @return {Promise} Renderer promise.\n     */\n    var addContact = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.createContactRequest(viewState.loggedInUserId, userId)\n            .then(function(response) {\n                if (!response.request) {\n                    throw new Error(response.warnings[0].message);\n                }\n\n                return response.request;\n            })\n            .then(function(request) {\n                var newState = StateManager.removePendingAddContactsById(viewState, [userId]);\n                newState = StateManager.addContactRequests(newState, [request]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Set the current conversation as a favourite conversation.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var setFavourite = function() {\n        var userId = viewState.loggedInUserId;\n        var conversationId = viewState.id;\n\n        return Repository.setFavouriteConversations(userId, [conversationId])\n            .then(function() {\n                var newState = StateManager.setIsFavourite(viewState, true);\n                return render(newState);\n            })\n            .then(function() {\n                return PubSub.publish(\n                    MessageDrawerEvents.CONVERSATION_SET_FAVOURITE,\n                    formatConversationForEvent(viewState)\n                );\n            });\n    };\n\n    /**\n     * Unset the current conversation as a favourite conversation.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var unsetFavourite = function() {\n        var userId = viewState.loggedInUserId;\n        var conversationId = viewState.id;\n\n        return Repository.unsetFavouriteConversations(userId, [conversationId])\n            .then(function() {\n                var newState = StateManager.setIsFavourite(viewState, false);\n                return render(newState);\n            })\n            .then(function() {\n                return PubSub.publish(\n                    MessageDrawerEvents.CONVERSATION_UNSET_FAVOURITE,\n                    formatConversationForEvent(viewState)\n                );\n            });\n    };\n\n    /**\n     * Set the current conversation as a muted conversation.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var setMuted = function() {\n        var userId = viewState.loggedInUserId;\n        var conversationId = viewState.id;\n\n        return Repository.setMutedConversations(userId, [conversationId])\n            .then(function() {\n                var newState = StateManager.setIsMuted(viewState, true);\n                return render(newState);\n            })\n            .then(function() {\n                return PubSub.publish(\n                    MessageDrawerEvents.CONVERSATION_SET_MUTED,\n                    formatConversationForEvent(viewState)\n                );\n            });\n    };\n\n    /**\n     * Unset the current conversation as a muted conversation.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var unsetMuted = function() {\n        var userId = viewState.loggedInUserId;\n        var conversationId = viewState.id;\n\n        return Repository.unsetMutedConversations(userId, [conversationId])\n            .then(function() {\n                var newState = StateManager.setIsMuted(viewState, false);\n                return render(newState);\n            })\n            .then(function() {\n                return PubSub.publish(\n                    MessageDrawerEvents.CONVERSATION_UNSET_MUTED,\n                    formatConversationForEvent(viewState)\n                );\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to delete the selected messages\n     * and run the renderer to show confirm delete messages dialogue.\n     *\n     * @param {Number} userId User id.\n     */\n    var requestDeleteSelectedMessages = function(userId) {\n        var selectedMessageIds = viewState.selectedMessageIds;\n        cancelRequest(userId);\n        var newState = StateManager.addPendingDeleteMessagesById(viewState, selectedMessageIds);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to delete the messages pending deletion. Update the statemanager\n     * and publish a message deletion event.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var deleteSelectedMessages = function() {\n        var messageIds = viewState.pendingDeleteMessageIds;\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n\n        render(newState);\n\n        var deleteMessagesPromise = null;\n\n        if (newState.deleteMessagesForAllUsers) {\n            deleteMessagesPromise = Repository.deleteMessagesForAllUsers(viewState.loggedInUserId, messageIds);\n        } else {\n            deleteMessagesPromise = Repository.deleteMessages(viewState.loggedInUserId, messageIds);\n        }\n\n        return deleteMessagesPromise.then(function() {\n                var newState = StateManager.removeMessagesById(viewState, messageIds);\n                newState = StateManager.removePendingDeleteMessagesById(newState, messageIds);\n                newState = StateManager.removeSelectedMessagesById(newState, messageIds);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                newState = StateManager.setDeleteMessagesForAllUsers(newState, false);\n\n                var prevLastMessage = viewState.messages[viewState.messages.length - 1];\n                var newLastMessage = newState.messages.length ? newState.messages[newState.messages.length - 1] : null;\n\n                if (newLastMessage && newLastMessage.id != prevLastMessage.id) {\n                    var conversation = formatConversationForEvent(newState);\n                    PubSub.publish(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, conversation);\n                } else if (!newState.messages.length) {\n                    PubSub.publish(MessageDrawerEvents.CONVERSATION_DELETED, newState.id);\n                }\n\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to delete a conversation\n     * and run the renderer to show confirm delete conversation dialogue.\n     *\n     * @param {Number} userId User id of other user.\n     */\n    var requestDeleteConversation = function(userId) {\n        cancelRequest(userId);\n        var newState = StateManager.setPendingDeleteConversation(viewState, true);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to delete a conversation. Update the statemanager\n     * and publish a conversation deleted event.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var deleteConversation = function() {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.deleteConversation(viewState.loggedInUserId, viewState.id)\n            .then(function() {\n                var newState = StateManager.removeMessages(viewState, viewState.messages);\n                newState = StateManager.removeSelectedMessagesById(newState, viewState.selectedMessageIds);\n                newState = StateManager.setPendingDeleteConversation(newState, false);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONVERSATION_DELETED, newState.id);\n\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager to cancel all pending actions.\n     *\n     * @param  {Number} userId User id.\n     */\n    var cancelRequest = function(userId) {\n        var pendingDeleteMessageIds = viewState.pendingDeleteMessageIds;\n        var newState = StateManager.removePendingAddContactsById(viewState, [userId]);\n        newState = StateManager.removePendingRemoveContactsById(newState, [userId]);\n        newState = StateManager.removePendingUnblockUsersById(newState, [userId]);\n        newState = StateManager.removePendingBlockUsersById(newState, [userId]);\n        newState = StateManager.removePendingDeleteMessagesById(newState, pendingDeleteMessageIds);\n        newState = StateManager.setPendingDeleteConversation(newState, false);\n        newState = StateManager.setDeleteMessagesForAllUsers(newState, false);\n        render(newState);\n    };\n\n    /**\n     * Accept the contact request from the given user.\n     *\n     * @param  {Number} userId User id of other user.\n     * @return {Promise} Renderer promise.\n     */\n    var acceptContactRequest = function(userId) {\n        // Search the list of the logged in user's contact requests to find the\n        // one from this user.\n        var loggedInUserId = viewState.loggedInUserId;\n        var requests = viewState.members[userId].contactrequests.filter(function(request) {\n            return request.requesteduserid == loggedInUserId;\n        });\n        var request = requests[0];\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.acceptContactRequest(userId, loggedInUserId)\n            .then(function(profile) {\n                var newState = StateManager.removeContactRequests(viewState, [request]);\n                newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                return render(newState);\n            })\n            .then(function() {\n                PubSub.publish(MessageDrawerEvents.CONTACT_ADDED, viewState.members[userId]);\n                PubSub.publish(MessageDrawerEvents.CONTACT_REQUEST_ACCEPTED, request);\n                return;\n            });\n    };\n\n    /**\n     * Decline the contact request from the given user.\n     *\n     * @param  {Number} userId User id of other user.\n     * @return {Promise} Renderer promise.\n     */\n    var declineContactRequest = function(userId) {\n        // Search the list of the logged in user's contact requests to find the\n        // one from this user.\n        var loggedInUserId = viewState.loggedInUserId;\n        var requests = viewState.members[userId].contactrequests.filter(function(request) {\n            return request.requesteduserid == loggedInUserId;\n        });\n        var request = requests[0];\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.declineContactRequest(userId, loggedInUserId)\n            .then(function(profile) {\n                var newState = StateManager.removeContactRequests(viewState, [request]);\n                newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                return render(newState);\n            })\n            .then(function() {\n                PubSub.publish(MessageDrawerEvents.CONTACT_REQUEST_DECLINED, request);\n                return;\n            });\n    };\n\n    /**\n     * Send a message to the repository, update the statemanager publish a message send event\n     * and call the renderer.\n     *\n     * @param  {Number} conversationId The conversation to send to.\n     * @param  {String} text Text to send.\n     * @return {Promise} Renderer promise.\n     */\n    var sendMessage = function(conversationId, text) {\n        isSendingMessage = true;\n        var newState = StateManager.setSendingMessage(viewState, true);\n        var newConversationId = null;\n\n        render(newState);\n\n        var sendMessagePromise = null;\n        var newCanDeleteMessagesForAllUsers = null;\n        if (!conversationId && (viewState.type != CONVERSATION_TYPES.PUBLIC)) {\n            // If it's a new private conversation then we need to use the old\n            // web service function to create the conversation.\n            var otherUserId = getOtherUserId();\n            sendMessagePromise = Repository.sendMessageToUser(otherUserId, text)\n                .then(function(message) {\n                    newConversationId = parseInt(message.conversationid, 10);\n                    newCanDeleteMessagesForAllUsers = message.candeletemessagesforallusers;\n                    return message;\n                });\n        } else {\n            sendMessagePromise = Repository.sendMessageToConversation(conversationId, text);\n        }\n\n        sendMessagePromise.then(function(message) {\n                var newState = StateManager.addMessages(viewState, [message]);\n                newState = StateManager.setSendingMessage(newState, false);\n                var conversation = formatConversationForEvent(newState);\n\n                if (!newState.id) {\n                    // If this message created the conversation then save the conversation\n                    // id.\n                    newState = StateManager.setId(newState, newConversationId);\n                    conversation.id = newConversationId;\n                    resetMessagePollTimer(newConversationId);\n                    PubSub.publish(MessageDrawerEvents.CONVERSATION_CREATED, conversation);\n                    newState = StateManager.setCanDeleteMessagesForAllUsers(newState, newCanDeleteMessagesForAllUsers);\n                }\n\n                render(newState);\n                isSendingMessage = false;\n                PubSub.publish(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, conversation);\n                return;\n            })\n            .catch(function(error) {\n                isSendingMessage = false;\n                var newState = StateManager.setSendingMessage(viewState, false);\n                render(newState);\n                Notification.exception(error);\n            });\n    };\n\n    /**\n     * Toggle the selected messages update the statemanager and render the result.\n     *\n     * @param  {Number} messageId The id of the message to be toggled\n     */\n    var toggleSelectMessage = function(messageId) {\n        var newState = viewState;\n\n        if (viewState.selectedMessageIds.indexOf(messageId) > -1) {\n            newState = StateManager.removeSelectedMessagesById(viewState, [messageId]);\n        } else {\n            newState = StateManager.addSelectedMessagesById(viewState, [messageId]);\n        }\n\n        render(newState);\n    };\n\n    /**\n     * Cancel edit mode (selecting the messages).\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var cancelEditMode = function() {\n        cancelRequest(getOtherUserId());\n        var newState = StateManager.removeSelectedMessagesById(viewState, viewState.selectedMessageIds);\n        render(newState);\n    };\n\n    /**\n     * Process the patches in the render buffer one at a time in order until the\n     * buffer is empty.\n     *\n     * @param {Object} header The conversation header container element.\n     * @param {Object} body The conversation body container element.\n     * @param {Object} footer The conversation footer container element.\n     */\n    var processRenderBuffer = function(header, body, footer) {\n        if (isRendering) {\n            return;\n        }\n\n        if (!renderBuffer.length) {\n            return;\n        }\n\n        isRendering = true;\n        var renderable = renderBuffer.shift();\n        var renderPromises = renderers.map(function(renderFunc) {\n            return renderFunc(renderable.patch);\n        });\n\n        $.when.apply(null, renderPromises)\n            .then(function() {\n                isRendering = false;\n                renderable.deferred.resolve(true);\n                // Keep processing the buffer until it's empty.\n                processRenderBuffer(header, body, footer);\n            })\n            .catch(function(error) {\n                isRendering = false;\n                renderable.deferred.reject(error);\n                Notification.exception(error);\n            });\n    };\n\n    /**\n     * Create a function to render the Conversation.\n     *\n     * @param  {Object} header The conversation header container element.\n     * @param  {Object} body The conversation body container element.\n     * @param  {Object} footer The conversation footer container element.\n     * @param  {Bool} isNewConversation Has someone else already initialised a conversation?\n     * @return {Promise} Renderer promise.\n     */\n    var generateRenderFunction = function(header, body, footer, isNewConversation) {\n        var rendererFunc = function(patch) {\n            return Renderer.render(header, body, footer, patch);\n        };\n\n        if (!isNewConversation) {\n            // Looks like someone got here before us! We'd better update our\n            // UI to make sure it matches.\n            var initialState = StateManager.buildInitialState(viewState.midnight, viewState.loggedInUserId, viewState.id);\n            var syncPatch = Patcher.buildPatch(initialState, viewState);\n            rendererFunc(syncPatch);\n        }\n\n        renderers.push(rendererFunc);\n\n        return function(newState) {\n            var patch = Patcher.buildPatch(viewState, newState);\n            var deferred = $.Deferred();\n\n            // Check if the patch has any data. Ignore empty patches.\n            if (Object.keys(patch).length) {\n                // Add the patch to the render buffer which gets processed in order.\n                renderBuffer.push({\n                    patch: patch,\n                    deferred: deferred\n                });\n            } else {\n                deferred.resolve(true);\n            }\n            // This is a great place to add in some console logging if you need\n            // to debug something. You can log the current state, the next state,\n            // and the generated patch and see exactly what will be updated.\n\n            // Optimistically update the state. We're going to assume that the rendering\n            // will always succeed. The rendering is asynchronous (annoyingly) so it's buffered\n            // but it'll reach eventual consistency with the current state.\n            viewState = newState;\n            if (newState.id) {\n                // Only cache created conversations.\n                stateCache[newState.id] = {\n                    state: newState,\n                    messagesOffset: getMessagesOffset(),\n                    loadedAllMessages: hasLoadedAllMessages()\n                };\n            }\n\n            // Start processing the buffer.\n            processRenderBuffer(header, body, footer);\n\n            return deferred.promise();\n        };\n    };\n\n    /**\n     * Create a confirm action function.\n     *\n     * @param {Function} actionCallback The callback function.\n     * @return {Function} Confirm action handler.\n     */\n    var generateConfirmActionHandler = function(actionCallback) {\n        return function(e, data) {\n            if (!viewState.loadingConfirmAction) {\n                actionCallback(getOtherUserId());\n                var newState = StateManager.setLoadingConfirmAction(viewState, false);\n                render(newState);\n            }\n            data.originalEvent.preventDefault();\n        };\n    };\n\n    /**\n     * Send message event handler.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleSendMessage = function(e, data) {\n        var target = $(e.target);\n        var footerContainer = target.closest(SELECTORS.FOOTER_CONTAINER);\n        var textArea = footerContainer.find(SELECTORS.MESSAGE_TEXT_AREA);\n        var text = textArea.val().trim();\n\n        if (text !== '') {\n            sendMessage(viewState.id, text);\n        }\n\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Select message event handler.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleSelectMessage = function(e, data) {\n        var selection = window.getSelection();\n        var target = $(e.target);\n\n        if (selection.toString() != '') {\n            // Bail if we're selecting.\n            return;\n        }\n\n        if (target.is('a')) {\n            // Clicking on a link in the message so ignore it.\n            return;\n        }\n\n        var element = target.closest(SELECTORS.MESSAGE);\n        var messageId = parseInt(element.attr('data-message-id'), 10);\n\n        toggleSelectMessage(messageId);\n\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Cancel edit mode event handler.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleCancelEditMode = function(e, data) {\n        cancelEditMode();\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Show the view contact page.\n     *\n     * @param {String} namespace Unique identifier for the Routes\n     * @return {Function} View contact handler.\n     */\n    var generateHandleViewContact = function(namespace) {\n        return function(e, data) {\n            var otherUserId = getOtherUserId();\n            var otherUser = viewState.members[otherUserId];\n            MessageDrawerRouter.go(namespace, MessageDrawerRoutes.VIEW_CONTACT, otherUser);\n            data.originalEvent.preventDefault();\n        };\n    };\n\n    /**\n     * Set this conversation as a favourite.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleSetFavourite = function(e, data) {\n        setFavourite().catch(Notification.exception);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Unset this conversation as a favourite.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleUnsetFavourite = function(e, data) {\n        unsetFavourite().catch(Notification.exception);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Show the view group info page.\n     * Set this conversation as muted.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleSetMuted = function(e, data) {\n        setMuted().catch(Notification.exception);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Unset this conversation as muted.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleUnsetMuted = function(e, data) {\n        unsetMuted().catch(Notification.exception);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Handle clicking on the checkbox that toggles deleting messages for\n     * all users.\n     *\n     * @param {Object} e Element this event handler is called on.\n     */\n    var handleDeleteMessagesForAllUsersToggle = function(e) {\n        var newValue = $(e.target).prop('checked');\n        var newState = StateManager.setDeleteMessagesForAllUsers(viewState, newValue);\n        render(newState);\n    };\n\n    /**\n     * Show the view contact page.\n     *\n     * @param {String} namespace Unique identifier for the Routes\n     * @return {Function} View group info handler.\n     */\n    var generateHandleViewGroupInfo = function(namespace) {\n        return function(e, data) {\n            MessageDrawerRouter.go(\n                namespace,\n                MessageDrawerRoutes.VIEW_GROUP_INFO,\n                {\n                    id: viewState.id,\n                    name: viewState.name,\n                    subname: viewState.subname,\n                    imageUrl: viewState.imageUrl,\n                    totalMemberCount: viewState.totalMemberCount\n                },\n                viewState.loggedInUserId\n            );\n            data.originalEvent.preventDefault();\n        };\n    };\n\n    /**\n     * Listen to, and handle events for conversations.\n     *\n     * @param {string} namespace The route namespace.\n     * @param {Object} header Conversation header container element.\n     * @param {Object} body Conversation body container element.\n     * @param {Object} footer Conversation footer container element.\n     */\n    var registerEventListeners = function(namespace, header, body, footer) {\n        var isLoadingMoreMessages = false;\n        var messagesContainer = getMessagesContainer(body);\n        var headerActivateHandlers = [\n            [SELECTORS.ACTION_REQUEST_BLOCK, generateConfirmActionHandler(requestBlockUser)],\n            [SELECTORS.ACTION_REQUEST_UNBLOCK, generateConfirmActionHandler(requestUnblockUser)],\n            [SELECTORS.ACTION_REQUEST_ADD_CONTACT, generateConfirmActionHandler(requestAddContact)],\n            [SELECTORS.ACTION_REQUEST_REMOVE_CONTACT, generateConfirmActionHandler(requestRemoveContact)],\n            [SELECTORS.ACTION_REQUEST_DELETE_CONVERSATION, generateConfirmActionHandler(requestDeleteConversation)],\n            [SELECTORS.ACTION_CANCEL_EDIT_MODE, handleCancelEditMode],\n            [SELECTORS.ACTION_VIEW_CONTACT, generateHandleViewContact(namespace)],\n            [SELECTORS.ACTION_VIEW_GROUP_INFO, generateHandleViewGroupInfo(namespace)],\n            [SELECTORS.ACTION_CONFIRM_FAVOURITE, handleSetFavourite],\n            [SELECTORS.ACTION_CONFIRM_MUTE, handleSetMuted],\n            [SELECTORS.ACTION_CONFIRM_UNFAVOURITE, handleUnsetFavourite],\n            [SELECTORS.ACTION_CONFIRM_UNMUTE, handleUnsetMuted]\n        ];\n        var bodyActivateHandlers = [\n            [SELECTORS.ACTION_CANCEL_CONFIRM, generateConfirmActionHandler(cancelRequest)],\n            [SELECTORS.ACTION_CONFIRM_BLOCK, generateConfirmActionHandler(blockUser)],\n            [SELECTORS.ACTION_CONFIRM_UNBLOCK, generateConfirmActionHandler(unblockUser)],\n            [SELECTORS.ACTION_CONFIRM_ADD_CONTACT, generateConfirmActionHandler(addContact)],\n            [SELECTORS.ACTION_CONFIRM_REMOVE_CONTACT, generateConfirmActionHandler(removeContact)],\n            [SELECTORS.ACTION_CONFIRM_DELETE_SELECTED_MESSAGES, generateConfirmActionHandler(deleteSelectedMessages)],\n            [SELECTORS.ACTION_CONFIRM_DELETE_CONVERSATION, generateConfirmActionHandler(deleteConversation)],\n            [SELECTORS.ACTION_REQUEST_ADD_CONTACT, generateConfirmActionHandler(requestAddContact)],\n            [SELECTORS.ACTION_ACCEPT_CONTACT_REQUEST, generateConfirmActionHandler(acceptContactRequest)],\n            [SELECTORS.ACTION_DECLINE_CONTACT_REQUEST, generateConfirmActionHandler(declineContactRequest)],\n            [SELECTORS.MESSAGE, handleSelectMessage],\n            [SELECTORS.DELETE_MESSAGES_FOR_ALL_USERS_TOGGLE, handleDeleteMessagesForAllUsersToggle]\n        ];\n        var footerActivateHandlers = [\n            [SELECTORS.SEND_MESSAGE_BUTTON, handleSendMessage],\n            [SELECTORS.ACTION_REQUEST_DELETE_SELECTED_MESSAGES, generateConfirmActionHandler(requestDeleteSelectedMessages)],\n            [SELECTORS.ACTION_REQUEST_ADD_CONTACT, generateConfirmActionHandler(requestAddContact)],\n            [SELECTORS.ACTION_REQUEST_UNBLOCK, generateConfirmActionHandler(requestUnblockUser)],\n        ];\n\n        AutoRows.init(footer);\n\n        CustomEvents.define(header, [\n            CustomEvents.events.activate\n        ]);\n        CustomEvents.define(body, [\n            CustomEvents.events.activate\n        ]);\n        CustomEvents.define(footer, [\n            CustomEvents.events.activate,\n            CustomEvents.events.enter\n        ]);\n        CustomEvents.define(messagesContainer, [\n            CustomEvents.events.scrollTop,\n            CustomEvents.events.scrollLock\n        ]);\n\n        messagesContainer.on(CustomEvents.events.scrollTop, function(e, data) {\n            var hasMembers = Object.keys(viewState.members).length > 1;\n\n            if (!isResetting && !isLoadingMoreMessages && !hasLoadedAllMessages() && hasMembers) {\n                isLoadingMoreMessages = true;\n                var newState = StateManager.setLoadingMessages(viewState, true);\n                render(newState);\n\n                loadMessages(viewState.id, LOAD_MESSAGE_LIMIT, getMessagesOffset(), NEWEST_FIRST, [])\n                    .then(function() {\n                        isLoadingMoreMessages = false;\n                        setMessagesOffset(getMessagesOffset() + LOAD_MESSAGE_LIMIT);\n                        return;\n                    })\n                    .catch(function(error) {\n                        isLoadingMoreMessages = false;\n                        Notification.exception(error);\n                    });\n            }\n\n            data.originalEvent.preventDefault();\n        });\n\n        headerActivateHandlers.forEach(function(handler) {\n            var selector = handler[0];\n            var handlerFunction = handler[1];\n            header.on(CustomEvents.events.activate, selector, handlerFunction);\n        });\n\n        bodyActivateHandlers.forEach(function(handler) {\n            var selector = handler[0];\n            var handlerFunction = handler[1];\n            body.on(CustomEvents.events.activate, selector, handlerFunction);\n        });\n\n        footerActivateHandlers.forEach(function(handler) {\n            var selector = handler[0];\n            var handlerFunction = handler[1];\n            footer.on(CustomEvents.events.activate, selector, handlerFunction);\n        });\n\n        footer.on(CustomEvents.events.enter, SELECTORS.MESSAGE_TEXT_AREA, function(e, data) {\n            var enterToSend = footer.attr('data-enter-to-send');\n            if (enterToSend && enterToSend != 'false' && enterToSend != '0') {\n                handleSendMessage(e, data);\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.ROUTE_CHANGED, function(newRouteData) {\n            if (newMessagesPollTimer) {\n                if (newRouteData.route != MessageDrawerRoutes.VIEW_CONVERSATION) {\n                    newMessagesPollTimer.stop();\n                }\n            }\n        });\n    };\n\n    /**\n     * Reset the timer that polls for new messages.\n     *\n     * @param  {Number} conversationId The conversation id\n     */\n    var resetMessagePollTimer = function(conversationId) {\n        if (newMessagesPollTimer) {\n            newMessagesPollTimer.stop();\n        }\n\n        newMessagesPollTimer = new BackOffTimer(\n            getLoadNewMessagesCallback(conversationId, NEWEST_FIRST),\n            BackOffTimer.getIncrementalCallback(\n                viewState.messagePollMin * MILLISECONDS_IN_SEC,\n                MILLISECONDS_IN_SEC,\n                viewState.messagePollMax * MILLISECONDS_IN_SEC,\n                viewState.messagePollAfterMax * MILLISECONDS_IN_SEC\n            )\n        );\n\n        newMessagesPollTimer.start();\n    };\n\n    /**\n     * Reset the state to the initial state and render the UI.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Number|null} conversationId The conversation id.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     */\n    var resetState = function(body, conversationId, loggedInUserProfile) {\n        // Reset all of the states back to the beginning if we're loading a new\n        // conversation.\n        isResetting = true;\n        isRendering = false;\n        renderBuffer = [];\n        isSendingMessage = false;\n\n        var loggedInUserId = loggedInUserProfile.id;\n        var midnight = parseInt(body.attr('data-midnight'), 10);\n        var messagePollMin = parseInt(body.attr('data-message-poll-min'), 10);\n        var messagePollMax = parseInt(body.attr('data-message-poll-max'), 10);\n        var messagePollAfterMax = parseInt(body.attr('data-message-poll-after-max'), 10);\n        var initialState = StateManager.buildInitialState(\n            midnight,\n            loggedInUserId,\n            conversationId,\n            messagePollMin,\n            messagePollMax,\n            messagePollAfterMax\n        );\n\n        if (!viewState) {\n            viewState = initialState;\n        }\n\n        if (newMessagesPollTimer) {\n            newMessagesPollTimer.stop();\n        }\n\n        render(initialState);\n    };\n\n    /**\n     * Load a new empty private conversation between two users or self-conversation.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     * @param  {Int} otherUserId The other user's id.\n     * @return {Promise} Renderer promise.\n     */\n    var resetNoConversation = function(body, loggedInUserProfile, otherUserId) {\n        // Always reset the state back to the initial state so that the\n        // state manager and patcher can work correctly.\n        resetState(body, null, loggedInUserProfile);\n\n        var resetNoConversationPromise = null;\n\n        if (loggedInUserProfile.id != otherUserId) {\n            // Private conversation between two different users.\n            resetNoConversationPromise = Repository.getConversationBetweenUsers(\n                loggedInUserProfile.id,\n                otherUserId,\n                true,\n                true,\n                0,\n                0,\n                LOAD_MESSAGE_LIMIT,\n                0,\n                NEWEST_FIRST\n            );\n        } else {\n            // Self conversation.\n            resetNoConversationPromise = Repository.getSelfConversation(\n                loggedInUserProfile.id,\n                LOAD_MESSAGE_LIMIT,\n                0,\n                NEWEST_FIRST\n            );\n        }\n\n        return resetNoConversationPromise.then(function(conversation) {\n                // Looks like we have a conversation after all! Let's use that.\n                return resetByConversation(body, conversation, loggedInUserProfile);\n            })\n            .catch(function() {\n                // Can't find a conversation. Oh well. Just load up a blank one.\n                return loadEmptyPrivateConversation(loggedInUserProfile, otherUserId);\n            });\n    };\n\n    /**\n     * Load new messages into the conversation based on a time interval.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Number} conversationId The conversation id.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     * @return {Promise} Renderer promise.\n     */\n    var resetById = function(body, conversationId, loggedInUserProfile) {\n        var cache = null;\n        if (conversationId in stateCache) {\n            cache = stateCache[conversationId];\n        }\n\n        // Always reset the state back to the initial state so that the\n        // state manager and patcher can work correctly.\n        resetState(body, conversationId, loggedInUserProfile);\n\n        var promise = $.Deferred().resolve({}).promise();\n        if (cache) {\n            // We've seen this conversation before so there is no need to\n            // send any network requests.\n            var newState = cache.state;\n            // Reset some loading states just in case they were left weirdly.\n            newState = StateManager.setLoadingMessages(newState, false);\n            newState = StateManager.setLoadingMembers(newState, false);\n            setMessagesOffset(cache.messagesOffset);\n            setLoadedAllMessages(cache.loadedAllMessages);\n            render(newState);\n        } else {\n            promise = loadNewConversation(\n                conversationId,\n                loggedInUserProfile,\n                LOAD_MESSAGE_LIMIT,\n                0,\n                NEWEST_FIRST\n            );\n        }\n\n        return promise.then(function() {\n            return resetMessagePollTimer(conversationId);\n        });\n    };\n\n    /**\n     * Load new messages into the conversation based on a time interval.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Object} conversation The conversation.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     * @return {Promise} Renderer promise.\n     */\n    var resetByConversation = function(body, conversation, loggedInUserProfile) {\n        var cache = null;\n        if (conversation.id in stateCache) {\n            cache = stateCache[conversation.id];\n        }\n\n        // Always reset the state back to the initial state so that the\n        // state manager and patcher can work correctly.\n        resetState(body, conversation.id, loggedInUserProfile);\n\n        var promise = $.Deferred().resolve({}).promise();\n        if (cache) {\n            // We've seen this conversation before so there is no need to\n            // send any network requests.\n            var newState = cache.state;\n            // Reset some loading states just in case they were left weirdly.\n            newState = StateManager.setLoadingMessages(newState, false);\n            newState = StateManager.setLoadingMembers(newState, false);\n            setMessagesOffset(cache.messagesOffset);\n            setLoadedAllMessages(cache.loadedAllMessages);\n            render(newState);\n        } else {\n            promise = loadExistingConversation(\n                conversation,\n                loggedInUserProfile,\n                LOAD_MESSAGE_LIMIT,\n                NEWEST_FIRST\n            );\n        }\n\n        return promise.then(function() {\n            return resetMessagePollTimer(conversation.id);\n        });\n    };\n\n    /**\n     * Setup the conversation page. This is a rather complex function because there are a\n     * few combinations of arguments that can be provided to this function to show the\n     * conversation.\n     *\n     * There are:\n     * 1.) A conversation object with no action or other user id (e.g. from the overview page)\n     * 2.) A conversation id with no action or other user id (e.g. from the contacts page)\n     * 3.) No conversation/id with an action and other other user id. (e.g. from contact page)\n     *\n     * @param {string} namespace The route namespace.\n     * @param {Object} header Conversation header container element.\n     * @param {Object} body Conversation body container element.\n     * @param {Object} footer Conversation footer container element.\n     * @param {Object|Number|null} conversationOrId Conversation or id or null\n     * @param {String} action An action to take on the conversation\n     * @param {Number} otherUserId The other user id for a private conversation\n     * @return {Object} jQuery promise\n     */\n    var show = function(namespace, header, body, footer, conversationOrId, action, otherUserId) {\n        var conversation = null;\n        var conversationId = null;\n\n        // Check what we were given to identify the conversation.\n        if (conversationOrId && conversationOrId !== null && typeof conversationOrId == 'object') {\n            conversation = conversationOrId;\n            conversationId = parseInt(conversation.id, 10);\n        } else {\n            conversation = null;\n            conversationId = parseInt(conversationOrId, 10);\n            conversationId = isNaN(conversationId) ? null : conversationId;\n        }\n\n        if (!conversationId && action && otherUserId) {\n            // If we didn't get a conversation id got a user id then let's see if we've\n            // previously loaded a private conversation with this user.\n            conversationId = getCachedPrivateConversationIdFromUserId(otherUserId);\n        }\n\n        // This is a new conversation if:\n        // 1. We don't already have a state\n        // 2. The given conversation doesn't match the one currently loaded\n        // 3. We have a view state without a conversation id and we weren't given one\n        //    but we were given a different other user id. This happens when the user\n        //    goes from viewing a user that they haven't yet initialised a conversation\n        //    with to viewing a different user that they also haven't initialised a\n        //    conversation with.\n        var isNewConversation = !viewState || (viewState.id != conversationId) || (otherUserId && otherUserId != getOtherUserId());\n\n        if (!body.attr('data-init')) {\n            // Generate the render function to bind the header, body, and footer\n            // elements to it so that we don't need to pass them around this module.\n            render = generateRenderFunction(header, body, footer, isNewConversation);\n            registerEventListeners(namespace, header, body, footer);\n            body.attr('data-init', true);\n        }\n\n        if (isNewConversation) {\n            var renderPromise = null;\n            var loggedInUserProfile = getLoggedInUserProfile(body);\n            if (conversation) {\n                renderPromise = resetByConversation(body, conversation, loggedInUserProfile, otherUserId);\n            } else if (conversationId) {\n                renderPromise = resetById(body, conversationId, loggedInUserProfile, otherUserId);\n            } else {\n                renderPromise = resetNoConversation(body, loggedInUserProfile, otherUserId);\n            }\n\n            return renderPromise\n                .then(function() {\n                    isResetting = false;\n                    // Focus the first element that can receieve it in the header.\n                    header.find(Constants.SELECTORS.CAN_RECEIVE_FOCUS).first().focus();\n                    return;\n                })\n                .catch(function(error) {\n                    isResetting = false;\n                    Notification.exception(error);\n                });\n        }\n\n        // We're not loading a new conversation so we should reset the poll timer to try to load\n        // new messages.\n        resetMessagePollTimer(conversationId);\n\n        if (viewState.type == CONVERSATION_TYPES.PRIVATE && action) {\n            // There are special actions that the user can perform in a private (aka 1-to-1)\n            // conversation.\n            var currentOtherUserId = getOtherUserId();\n\n            switch (action) {\n                case 'block':\n                    return requestBlockUser(currentOtherUserId);\n                case 'unblock':\n                    return requestUnblockUser(currentOtherUserId);\n                case 'add-contact':\n                    return requestAddContact(currentOtherUserId);\n                case 'remove-contact':\n                    return requestRemoveContact(currentOtherUserId);\n            }\n        }\n\n        // Final fallback to return a promise if we didn't need to do anything.\n        return $.Deferred().resolve().promise();\n    };\n\n    /**\n     * String describing this page used for aria-labels.\n     *\n     * @return {Object} jQuery promise\n     */\n    var description = function() {\n        return Str.get_string('messagedrawerviewconversation', 'core_message', viewState.name);\n    };\n\n    return {\n        show: show,\n        description: description\n    };\n});\n"],"file":"message_drawer_view_conversation.min.js"}