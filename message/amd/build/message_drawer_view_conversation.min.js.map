{"version":3,"sources":["../src/message_drawer_view_conversation.js"],"names":["define","$","AutoRows","BackOffTimer","CustomEvents","Notification","PubSub","Str","Repository","MessageDrawerEvents","Constants","Patcher","Renderer","StateManager","MessageDrawerRouter","MessageDrawerRoutes","stateCache","viewState","loadedAllMessages","messagesOffset","newMessagesPollTimer","isRendering","renderBuffer","isResetting","isSendingMessage","sendMessageBuffer","render","renderers","NEWEST_FIRST","NEWEST_MESSAGES_FIRST","LOAD_MESSAGE_LIMIT","MILLISECONDS_IN_SEC","SELECTORS","CONVERSATION_TYPES","getOtherUserId","type","PUBLIC","loggedInUserId","SELF","otherUserIds","Object","keys","members","filter","userId","length","getCachedPrivateConversationIdFromUserId","reduce","carry","id","state","getLoggedInUserProfile","body","parseInt","attr","fullname","profileimageurl","profileimageurlsmall","isonline","showonlinestatus","isblocked","iscontact","isdeleted","canmessage","requirescontact","contactrequests","getMessagesOffset","setMessagesOffset","value","hasLoadedAllMessages","setLoadedAllMessages","getMessagesContainer","find","MESSAGES_CONTAINER","formatConversationForEvent","name","subname","imageUrl","isFavourite","isMuted","totalMemberCount","messages","map","message","extend","formattedMember","request","loadEmptyPrivateConversation","loggedInUserProfile","otherUserId","conversationType","PRIVATE","newState","setLoadingMembers","setLoadingMessages","getMemberInfo","then","profiles","Error","profile","addMembers","setName","setType","setImageUrl","setTotalMemberCount","catch","error","exception","updateStateFromConversation","conversation","otherUser","otherUsers","member","imageurl","setSubname","membercount","setIsFavourite","isfavourite","setIsMuted","ismuted","addMessages","setCanDeleteMessagesForAllUsers","candeletemessagesforallusers","loadNewConversation","conversationId","messageLimit","messageOffset","newestFirst","getConversation","slice","hasLoggedInUser","concat","markConversationAsRead","loadExistingConversation","messageCount","hasLoadedEnoughMessages","renderPromise","loadMessages","limit","offset","ignoreList","timeFrom","getMessages","result","indexOf","membersToAdd","getLoadNewMessagesCallback","mostRecentMessage","lastTimeCreated","timeCreated","ignoreMessageIds","i","push","restart","publish","CONVERSATION_NEW_LAST_MESSAGE","Deferred","resolve","promise","markAllConversationMessagesAsRead","markMessagesAsRead","CONVERSATION_READ","requestBlockUser","cancelRequest","addPendingBlockUsersById","blockUser","setLoadingConfirmAction","removePendingBlockUsersById","CONTACT_BLOCKED","requestUnblockUser","addPendingUnblockUsersById","unblockUser","removePendingUnblockUsersById","CONTACT_UNBLOCKED","requestRemoveContact","addPendingRemoveContactsById","removeContact","deleteContacts","removePendingRemoveContactsById","CONTACT_REMOVED","requestAddContact","addPendingAddContactsById","addContact","createContactRequest","response","warnings","removePendingAddContactsById","addContactRequests","setFavourite","setFavouriteConversations","CONVERSATION_SET_FAVOURITE","unsetFavourite","unsetFavouriteConversations","CONVERSATION_UNSET_FAVOURITE","setMuted","setMutedConversations","CONVERSATION_SET_MUTED","unsetMuted","unsetMutedConversations","CONVERSATION_UNSET_MUTED","requestDeleteSelectedMessages","selectedMessageIds","addPendingDeleteMessagesById","deleteSelectedMessages","messageIds","pendingDeleteMessageIds","sentMessages","sendState","deleteMessagesPromise","sentMessageIds","deleteMessagesForAllUsers","deleteMessages","removeMessagesById","removePendingDeleteMessagesById","removeSelectedMessagesById","setDeleteMessagesForAllUsers","prevLastMessage","newLastMessage","CONVERSATION_DELETED","requestDeleteConversation","setPendingDeleteConversation","deleteConversation","removeMessages","acceptContactRequest","requests","requesteduserid","removeContactRequests","CONTACT_ADDED","CONTACT_REQUEST_ACCEPTED","declineContactRequest","CONTACT_REQUEST_DECLINED","processSendMessageBuffer","messagesToSend","newConversationId","messagesText","text","sendMessagePromise","newCanDeleteMessagesForAllUsers","sendMessagesToUser","conversationid","sendMessagesToConversation","newMessageIds","data","selectedToRemove","selectedToAdd","forEach","oldMessage","index","newMessage","updateMessages","setMessagesSendSuccessById","addSelectedMessagesById","setId","resetMessagePollTimer","CONVERSATION_CREATED","e","errorMessage","get_string","handleFailedMessages","setMessagesSendFailById","finalError","sendMessage","Date","now","useridfrom","timecreated","retrySendMessage","setMessagesSendPendingById","toggleSelectMessage","messageId","cancelEditMode","processRenderBuffer","header","footer","renderable","shift","renderPromises","renderFunc","patch","when","apply","deferred","reject","generateRenderFunction","isNewConversation","rendererFunc","initialState","buildInitialState","midnight","syncPatch","buildPatch","generateConfirmActionHandler","actionCallback","loadingConfirmAction","originalEvent","preventDefault","handleSendMessage","target","footerContainer","closest","FOOTER_CONTAINER","textArea","MESSAGE_TEXT_AREA","val","trim","focus","handleSelectMessage","selection","window","getSelection","toString","is","element","MESSAGE","handleRetrySendMessage","stopPropagation","handleCancelEditMode","generateHandleViewContact","namespace","go","VIEW_CONTACT","handleSetFavourite","handleUnsetFavourite","handleSetMuted","handleUnsetMuted","handleDeleteMessagesForAllUsersToggle","newValue","prop","generateHandleViewGroupInfo","VIEW_GROUP_INFO","registerEventListeners","isLoadingMoreMessages","messagesContainer","headerActivateHandlers","ACTION_REQUEST_BLOCK","ACTION_REQUEST_UNBLOCK","ACTION_REQUEST_ADD_CONTACT","ACTION_REQUEST_REMOVE_CONTACT","ACTION_REQUEST_DELETE_CONVERSATION","ACTION_CANCEL_EDIT_MODE","ACTION_VIEW_CONTACT","ACTION_VIEW_GROUP_INFO","ACTION_CONFIRM_FAVOURITE","ACTION_CONFIRM_MUTE","ACTION_CONFIRM_UNFAVOURITE","ACTION_CONFIRM_UNMUTE","bodyActivateHandlers","ACTION_CANCEL_CONFIRM","ACTION_CONFIRM_BLOCK","ACTION_CONFIRM_UNBLOCK","ACTION_CONFIRM_ADD_CONTACT","ACTION_CONFIRM_REMOVE_CONTACT","ACTION_CONFIRM_DELETE_SELECTED_MESSAGES","ACTION_CONFIRM_DELETE_CONVERSATION","ACTION_ACCEPT_CONTACT_REQUEST","ACTION_DECLINE_CONTACT_REQUEST","DELETE_MESSAGES_FOR_ALL_USERS_TOGGLE","RETRY_SEND","footerActivateHandlers","SEND_MESSAGE_BUTTON","ACTION_REQUEST_DELETE_SELECTED_MESSAGES","init","events","activate","enter","scrollTop","scrollLock","on","hasMembers","handler","selector","handlerFunction","enterToSend","subscribe","ROUTE_CHANGED","newRouteData","route","VIEW_CONVERSATION","stop","getIncrementalCallback","messagePollMin","messagePollMax","messagePollAfterMax","start","resetState","resetNoConversation","resetNoConversationPromise","getConversationBetweenUsers","getSelfConversation","resetByConversation","resetById","cache","show","conversationOrId","action","isNaN","CAN_RECEIVE_FOCUS","first","currentOtherUserId","description"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the conversation page in the message drawer.\n *\n * This function handles all of the user actions that the user can take\n * when interacting with the conversation page.\n *\n * It maintains a view state which is a data representation of the view\n * and only operates on that data.\n *\n * The view state is immutable and should never be modified directly. Instead\n * all changes to the view state should be done using the StateManager which\n * will generate a new version of the view state with the requested changes.\n *\n * After any changes to the view state the module will call the render function\n * to ask the renderer to update the UI.\n *\n * General rules for this module:\n * 1.) Never modify viewState directly. All changes should be via the StateManager.\n * 2.) Call render() with the new state when you want to update the UI\n * 3.) Never modify the UI directly in this module. This module is only concerned\n *     with the data in the view state.\n *\n * The general flow for a user interaction will be something like:\n * User interaction: User clicks \"confirm block\" button to block the other user\n *      1.) This module is hears the click\n *      2.) This module sends a request to the server to block the user\n *      3.) The server responds with the new user profile\n *      4.) This module generates a new state using the StateManager with the updated\n *          user profile.\n *      5.) This module asks the Patcher to generate a patch from the current state and\n *          the newly generated state. This patch tells the renderer what has changed\n *          between the states.\n *      6.) This module gives the Renderer the generated patch. The renderer updates\n *          the UI with changes according to the patch.\n *\n * @module     core_message/message_drawer_view_conversation\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n[\n    'jquery',\n    'core/auto_rows',\n    'core/backoff_timer',\n    'core/custom_interaction_events',\n    'core/notification',\n    'core/pubsub',\n    'core/str',\n    'core_message/message_repository',\n    'core_message/message_drawer_events',\n    'core_message/message_drawer_view_conversation_constants',\n    'core_message/message_drawer_view_conversation_patcher',\n    'core_message/message_drawer_view_conversation_renderer',\n    'core_message/message_drawer_view_conversation_state_manager',\n    'core_message/message_drawer_router',\n    'core_message/message_drawer_routes',\n],\nfunction(\n    $,\n    AutoRows,\n    BackOffTimer,\n    CustomEvents,\n    Notification,\n    PubSub,\n    Str,\n    Repository,\n    MessageDrawerEvents,\n    Constants,\n    Patcher,\n    Renderer,\n    StateManager,\n    MessageDrawerRouter,\n    MessageDrawerRoutes\n) {\n\n    // Contains a cache of all view states that have been loaded so far\n    // which saves us having to reload stuff with network requests when\n    // switching between conversations.\n    var stateCache = {};\n    // The current data representation of the view.\n    var viewState = null;\n    var loadedAllMessages = false;\n    var messagesOffset = 0;\n    var newMessagesPollTimer = null;\n    var isRendering = false;\n    var renderBuffer = [];\n    // If the UI is currently resetting.\n    var isResetting = true;\n    // If the UI is currently sending a message.\n    var isSendingMessage = false;\n    // A buffer of messages to send.\n    var sendMessageBuffer = [];\n    // These functions which will be generated when this module is\n    // first called. See generateRenderFunction for details.\n    var render = null;\n    // The list of renderers that have been registered to render\n    // this conversation. See generateRenderFunction for details.\n    var renderers = [];\n\n    var NEWEST_FIRST = Constants.NEWEST_MESSAGES_FIRST;\n    var LOAD_MESSAGE_LIMIT = Constants.LOAD_MESSAGE_LIMIT;\n    var MILLISECONDS_IN_SEC = Constants.MILLISECONDS_IN_SEC;\n    var SELECTORS = Constants.SELECTORS;\n    var CONVERSATION_TYPES = Constants.CONVERSATION_TYPES;\n\n    /**\n     * Get the other user userid.\n     *\n     * @return {Number} Userid.\n     */\n    var getOtherUserId = function() {\n        if (!viewState || viewState.type == CONVERSATION_TYPES.PUBLIC) {\n            return null;\n        }\n\n        var loggedInUserId = viewState.loggedInUserId;\n        if (viewState.type == CONVERSATION_TYPES.SELF) {\n            // It's a self-conversation, so the other user is the one logged in.\n            return loggedInUserId;\n        }\n\n        var otherUserIds = Object.keys(viewState.members).filter(function(userId) {\n            return loggedInUserId != userId;\n        });\n\n        return otherUserIds.length ? otherUserIds[0] : null;\n    };\n\n    /**\n     * Search the cache to see if we've already loaded a private conversation\n     * with the given user id.\n     *\n     * @param {Number} userId The id of the other user.\n     * @return {Number|null} Conversation id.\n     */\n    var getCachedPrivateConversationIdFromUserId = function(userId) {\n        return Object.keys(stateCache).reduce(function(carry, id) {\n            if (!carry) {\n                var state = stateCache[id].state;\n\n                if (state.type != CONVERSATION_TYPES.PUBLIC) {\n                    if (userId in state.members) {\n                        // We've found a cached conversation for this user!\n                        carry = state.id;\n                    }\n                }\n            }\n\n            return carry;\n        }, null);\n    };\n\n    /**\n     * Get profile info for logged in user.\n     *\n     * @param {Object} body Conversation body container element.\n     * @return {Object}\n     */\n    var getLoggedInUserProfile = function(body) {\n        return {\n            id: parseInt(body.attr('data-user-id'), 10),\n            fullname: null,\n            profileimageurl: null,\n            profileimageurlsmall: null,\n            isonline:  null,\n            showonlinestatus: null,\n            isblocked: null,\n            iscontact: null,\n            isdeleted: null,\n            canmessage:  null,\n            requirescontact: null,\n            contactrequests: []\n        };\n    };\n\n    /**\n     * Get the messages offset value to load more messages.\n     *\n     * @return {Number}\n     */\n    var getMessagesOffset = function() {\n        return messagesOffset;\n    };\n\n    /**\n     * Set the messages offset value for loading more messages.\n     *\n     * @param {Number} value The offset value\n     */\n    var setMessagesOffset = function(value) {\n        messagesOffset = value;\n        stateCache[viewState.id].messagesOffset = value;\n    };\n\n    /**\n     * Check if all messages have been loaded.\n     *\n     * @return {Bool}\n     */\n    var hasLoadedAllMessages = function() {\n        return loadedAllMessages;\n    };\n\n    /**\n     * Set whether all messages have been loaded or not.\n     *\n     * @param {Bool} value If all messages have been loaded.\n     */\n    var setLoadedAllMessages = function(value) {\n        loadedAllMessages = value;\n        stateCache[viewState.id].loadedAllMessages = value;\n    };\n\n    /**\n     * Get the messages container element.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @return {Object} The messages container element.\n     */\n    var getMessagesContainer = function(body) {\n        return body.find(SELECTORS.MESSAGES_CONTAINER);\n    };\n\n    /**\n     * Reformat the conversation for an event payload.\n     *\n     * @param  {Object} state The view state.\n     * @return {Object} New formatted conversation.\n     */\n    var formatConversationForEvent = function(state) {\n        return {\n            id: state.id,\n            name: state.name,\n            subname: state.subname,\n            imageUrl: state.imageUrl,\n            isFavourite: state.isFavourite,\n            isMuted: state.isMuted,\n            type: state.type,\n            totalMemberCount: state.totalMemberCount,\n            loggedInUserId: state.loggedInUserId,\n            messages: state.messages.map(function(message) {\n                return $.extend({}, message);\n            }),\n            members: Object.keys(state.members).map(function(id) {\n                var formattedMember = $.extend({}, state.members[id]);\n                formattedMember.contactrequests = state.members[id].contactrequests.map(function(request) {\n                    return $.extend({}, request);\n                });\n                return formattedMember;\n            })\n        };\n    };\n\n    /**\n     * Load up an empty private conversation between the logged in user and the\n     * other user. Sets all of the conversation details based on the other user.\n     *\n     * A conversation isn't created until the user sends the first message.\n     *\n     * @param  {Object} loggedInUserProfile The logged in user profile.\n     * @param  {Number} otherUserId The other user id.\n     * @return {Object} Profile returned from repository.\n     */\n    var loadEmptyPrivateConversation = function(loggedInUserProfile, otherUserId) {\n        var loggedInUserId = loggedInUserProfile.id;\n        // If the other user id is the same as the logged in user then this is a self\n        // conversation.\n        var conversationType = loggedInUserId == otherUserId ? CONVERSATION_TYPES.SELF : CONVERSATION_TYPES.PRIVATE;\n        var newState = StateManager.setLoadingMembers(viewState, true);\n        newState = StateManager.setLoadingMessages(newState, true);\n        render(newState);\n\n        return Repository.getMemberInfo(loggedInUserId, [otherUserId], true, true)\n            .then(function(profiles) {\n                if (profiles.length) {\n                    return profiles[0];\n                } else {\n                    throw new Error('Unable to load other user profile');\n                }\n            })\n            .then(function(profile) {\n                // If the conversation is a self conversation then the profile loaded is the\n                // logged in user so only add that to the members array.\n                var members = conversationType == CONVERSATION_TYPES.SELF ? [profile] : [profile, loggedInUserProfile];\n                var newState = StateManager.addMembers(viewState, members);\n                newState = StateManager.setLoadingMembers(newState, false);\n                newState = StateManager.setLoadingMessages(newState, false);\n                newState = StateManager.setName(newState, profile.fullname);\n                newState = StateManager.setType(newState, conversationType);\n                newState = StateManager.setImageUrl(newState, profile.profileimageurl);\n                newState = StateManager.setTotalMemberCount(newState, members.length);\n                render(newState);\n                return profile;\n            })\n            .catch(function(error) {\n                var newState = StateManager.setLoadingMembers(viewState, false);\n                render(newState);\n                Notification.exception(error);\n            });\n    };\n\n    /**\n     * Create a new state from a conversation object.\n     *\n     * @param {Object} conversation The conversation object.\n     * @param {Number} loggedInUserId The logged in user id.\n     * @return {Object} new state.\n     */\n    var updateStateFromConversation = function(conversation, loggedInUserId) {\n        var otherUser = null;\n        if (conversation.type == CONVERSATION_TYPES.PRIVATE) {\n            // For private conversations, remove current logged in user from the members list to get the other user.\n            var otherUsers = conversation.members.filter(function(member) {\n                return member.id != loggedInUserId;\n            });\n            otherUser = otherUsers.length ? otherUsers[0] : null;\n        } else if (conversation.type == CONVERSATION_TYPES.SELF) {\n            // Self-conversations have only one member.\n            otherUser = conversation.members[0];\n        }\n\n        var name = conversation.name;\n        var imageUrl = conversation.imageurl;\n\n        if (conversation.type != CONVERSATION_TYPES.PUBLIC) {\n            name = name || otherUser ? otherUser.fullname : '';\n            imageUrl = imageUrl || otherUser ? otherUser.profileimageurl : '';\n        }\n\n        var newState = StateManager.addMembers(viewState, conversation.members);\n        newState = StateManager.setName(newState, name);\n        newState = StateManager.setSubname(newState, conversation.subname);\n        newState = StateManager.setType(newState, conversation.type);\n        newState = StateManager.setImageUrl(newState, imageUrl);\n        newState = StateManager.setTotalMemberCount(newState, conversation.membercount);\n        newState = StateManager.setIsFavourite(newState, conversation.isfavourite);\n        newState = StateManager.setIsMuted(newState, conversation.ismuted);\n        newState = StateManager.addMessages(newState, conversation.messages);\n        newState = StateManager.setCanDeleteMessagesForAllUsers(newState, conversation.candeletemessagesforallusers);\n        return newState;\n    };\n\n    /**\n     * Get the details for a conversation from the conversation id.\n     *\n     * @param  {Number} conversationId The conversation id.\n     * @param  {Object} loggedInUserProfile The logged in user profile.\n     * @param  {Number} messageLimit The number of messages to include.\n     * @param  {Number} messageOffset The number of messages to skip.\n     * @param  {Bool} newestFirst Order messages newest first.\n     * @return {Object} Promise resolved when loaded.\n     */\n    var loadNewConversation = function(\n        conversationId,\n        loggedInUserProfile,\n        messageLimit,\n        messageOffset,\n        newestFirst\n    ) {\n        var loggedInUserId = loggedInUserProfile.id;\n        var newState = StateManager.setLoadingMembers(viewState, true);\n        newState = StateManager.setLoadingMessages(newState, true);\n        render(newState);\n\n        return Repository.getConversation(\n            loggedInUserId,\n            conversationId,\n            true,\n            true,\n            0,\n            0,\n            messageLimit + 1,\n            messageOffset,\n            newestFirst\n        )\n            .then(function(conversation) {\n                if (conversation.messages.length > messageLimit) {\n                    conversation.messages = conversation.messages.slice(1);\n                } else {\n                    setLoadedAllMessages(true);\n                }\n\n                setMessagesOffset(messageOffset + messageLimit);\n\n                return conversation;\n            })\n            .then(function(conversation) {\n                var hasLoggedInUser = conversation.members.filter(function(member) {\n                    return member.id == loggedInUserProfile.id;\n                });\n\n                if (hasLoggedInUser.length < 1) {\n                    conversation.members = conversation.members.concat([loggedInUserProfile]);\n                }\n\n                var newState = updateStateFromConversation(conversation, loggedInUserProfile.id);\n                newState = StateManager.setLoadingMembers(newState, false);\n                newState = StateManager.setLoadingMessages(newState, false);\n                return render(newState)\n                    .then(function() {\n                        return conversation;\n                    });\n            })\n            .then(function() {\n                return markConversationAsRead(conversationId);\n            })\n            .catch(function(error) {\n                var newState = StateManager.setLoadingMembers(viewState, false);\n                newState = StateManager.setLoadingMessages(newState, false);\n                render(newState);\n                Notification.exception(error);\n            });\n    };\n\n    /**\n     * Get the details for a conversation from and existing conversation object.\n     *\n     * @param  {Object} conversation The conversation object.\n     * @param  {Object} loggedInUserProfile The logged in user profile.\n     * @param  {Number} messageLimit The number of messages to include.\n     * @param  {Bool} newestFirst Order messages newest first.\n     * @return {Object} Promise resolved when loaded.\n     */\n    var loadExistingConversation = function(\n        conversation,\n        loggedInUserProfile,\n        messageLimit,\n        newestFirst\n    ) {\n        var hasLoggedInUser = conversation.members.filter(function(member) {\n            return member.id == loggedInUserProfile.id;\n        });\n\n        if (hasLoggedInUser.length < 1) {\n            conversation.members = conversation.members.concat([loggedInUserProfile]);\n        }\n\n        var messageCount = conversation.messages.length;\n        var hasLoadedEnoughMessages = messageCount >= messageLimit;\n        var newState = updateStateFromConversation(conversation, loggedInUserProfile.id);\n        newState = StateManager.setLoadingMembers(newState, false);\n        newState = StateManager.setLoadingMessages(newState, !hasLoadedEnoughMessages);\n        var renderPromise = render(newState);\n\n        return renderPromise.then(function() {\n                if (!hasLoadedEnoughMessages) {\n                    // We haven't got enough messages so let's load some more.\n                    return loadMessages(conversation.id, messageLimit, messageCount, newestFirst, []);\n                } else {\n                    // We've got enough messages. No need to load any more for now.\n                    return {messages: conversation.messages};\n                }\n            })\n            .then(function() {\n                var messages = viewState.messages;\n                // Update the offset to reflect the number of messages we've loaded.\n                setMessagesOffset(messages.length);\n                markConversationAsRead(viewState.id);\n\n                return messages;\n            })\n            .catch(Notification.exception);\n    };\n\n    /**\n     * Load messages for this conversation and pass them to the renderer.\n     *\n     * @param  {Number} conversationId Conversation id.\n     * @param  {Number} limit Number of messages to load.\n     * @param  {Number} offset Get messages from offset.\n     * @param  {Bool} newestFirst Get newest messages first.\n     * @param  {Array} ignoreList Ignore any messages with ids in this list.\n     * @param  {Number|null} timeFrom Only get messages from this time onwards.\n     * @return {Promise} renderer promise.\n     */\n    var loadMessages = function(conversationId, limit, offset, newestFirst, ignoreList, timeFrom) {\n        return Repository.getMessages(\n                viewState.loggedInUserId,\n                conversationId,\n                limit ? limit + 1 : limit,\n                offset,\n                newestFirst,\n                timeFrom\n            )\n            .then(function(result) {\n                if (result.messages.length && ignoreList.length) {\n                    result.messages = result.messages.filter(function(message) {\n                        // Skip any messages in our ignore list.\n                        return ignoreList.indexOf(parseInt(message.id, 10)) < 0;\n                    });\n                }\n\n                return result;\n            })\n            .then(function(result) {\n                if (!limit) {\n                    return result;\n                } else if (result.messages.length > limit) {\n                    // Ignore the last result which was just to test if there are more\n                    // to load.\n                    result.messages = result.messages.slice(0, -1);\n                } else {\n                    setLoadedAllMessages(true);\n                }\n\n                return result;\n            })\n            .then(function(result) {\n                var membersToAdd = result.members.filter(function(member) {\n                    return !(member.id in viewState.members);\n                });\n                var newState = StateManager.addMembers(viewState, membersToAdd);\n                newState = StateManager.addMessages(newState, result.messages);\n                newState = StateManager.setLoadingMessages(newState, false);\n                return render(newState)\n                    .then(function() {\n                        return result;\n                    });\n            })\n            .catch(function(error) {\n                var newState = StateManager.setLoadingMessages(viewState, false);\n                render(newState);\n                // Re-throw the error for other error handlers.\n                throw error;\n            });\n    };\n\n    /**\n     * Create a callback function for getting new messages for this conversation.\n     *\n     * @param  {Number} conversationId Conversation id.\n     * @param  {Bool} newestFirst Show newest messages first\n     * @return {Function} Callback function that returns a renderer promise.\n     */\n    var getLoadNewMessagesCallback = function(conversationId, newestFirst) {\n        return function() {\n            var messages = viewState.messages;\n            var mostRecentMessage = messages.length ? messages[messages.length - 1] : null;\n            var lastTimeCreated = mostRecentMessage ? mostRecentMessage.timeCreated : null;\n\n            if (lastTimeCreated && !isResetting && !isSendingMessage) {\n                // There may be multiple messages with the same time created value since\n                // the accuracy is only down to the second. The server will include these\n                // messages in the result (since it does a >= comparison on time from) so\n                // we need to filter them back out of the result so that we're left only\n                // with the new messages.\n                var ignoreMessageIds = [];\n                for (var i = messages.length - 1; i >= 0; i--) {\n                    var message = messages[i];\n                    if (message.timeCreated === lastTimeCreated) {\n                        ignoreMessageIds.push(message.id);\n                    } else {\n                        // Since the messages are ordered in ascending order of time created\n                        // we can break as soon as we hit a message with a different time created\n                        // because we know all other messages will have lower values.\n                        break;\n                    }\n                }\n\n                return loadMessages(\n                        conversationId,\n                        0,\n                        0,\n                        newestFirst,\n                        ignoreMessageIds,\n                        lastTimeCreated\n                    )\n                    .then(function(result) {\n                        if (result.messages.length) {\n                            // If we found some results then restart the polling timer\n                            // because the other user might be sending messages.\n                            newMessagesPollTimer.restart();\n                            // We've also got a new last message so publish that for other\n                            // components to update.\n                            var conversation = formatConversationForEvent(viewState);\n                            PubSub.publish(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, conversation);\n                            return markConversationAsRead(conversationId);\n                        } else {\n                            return result;\n                        }\n                    });\n            }\n\n            return $.Deferred().resolve().promise();\n        };\n    };\n\n    /**\n     * Mark a conversation as read.\n     *\n     * @param  {Number} conversationId The conversation id.\n     * @return {Promise} The renderer promise.\n     */\n    var markConversationAsRead = function(conversationId) {\n        var loggedInUserId = viewState.loggedInUserId;\n\n        return Repository.markAllConversationMessagesAsRead(loggedInUserId, conversationId)\n            .then(function() {\n                var newState = StateManager.markMessagesAsRead(viewState, viewState.messages);\n                PubSub.publish(MessageDrawerEvents.CONVERSATION_READ, conversationId);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager there is request to block a user and run the renderer\n     * to show the block user dialogue.\n     *\n     * @param {Number} userId User id.\n     */\n    var requestBlockUser = function(userId) {\n        cancelRequest(userId);\n        var newState = StateManager.addPendingBlockUsersById(viewState, [userId]);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to block a user, update the statemanager and publish\n     * a contact has been blocked.\n     *\n     * @param  {Number} userId User id of user to block.\n     * @return {Promise} Renderer promise.\n     */\n    var blockUser = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.blockUser(viewState.loggedInUserId, userId)\n            .then(function(profile) {\n                var newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.removePendingBlockUsersById(newState, [userId]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONTACT_BLOCKED, userId);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to unblock a user and run the renderer\n     * to show the unblock user dialogue.\n     *\n     * @param {Number} userId User id of user to unblock.\n     */\n    var requestUnblockUser = function(userId) {\n        cancelRequest(userId);\n        var newState = StateManager.addPendingUnblockUsersById(viewState, [userId]);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to unblock a user, update the statemanager and publish\n     * a contact has been unblocked.\n     *\n     * @param  {Number} userId User id of user to unblock.\n     * @return {Promise} Renderer promise.\n     */\n    var unblockUser = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.unblockUser(viewState.loggedInUserId, userId)\n            .then(function(profile) {\n                var newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.removePendingUnblockUsersById(newState, [userId]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONTACT_UNBLOCKED, userId);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to remove a user from the contact list\n     * and run the renderer to show the remove user from contacts dialogue.\n     *\n     * @param {Number} userId User id of user to remove from contacts.\n     */\n    var requestRemoveContact = function(userId) {\n        cancelRequest(userId);\n        var newState = StateManager.addPendingRemoveContactsById(viewState, [userId]);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to remove a user from the contacts list. update the statemanager\n     * and publish a contact has been removed.\n     *\n     * @param  {Number} userId User id of user to remove from contacts.\n     * @return {Promise} Renderer promise.\n     */\n    var removeContact = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.deleteContacts(viewState.loggedInUserId, [userId])\n            .then(function(profiles) {\n                var newState = StateManager.addMembers(viewState, profiles);\n                newState = StateManager.removePendingRemoveContactsById(newState, [userId]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONTACT_REMOVED, userId);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to add a user to the contact list\n     * and run the renderer to show the add user to contacts dialogue.\n     *\n     * @param {Number} userId User id of user to add to contacts.\n     */\n    var requestAddContact = function(userId) {\n        cancelRequest(userId);\n        var newState = StateManager.addPendingAddContactsById(viewState, [userId]);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to add a user to the contacts list. update the statemanager\n     * and publish a contact has been added.\n     *\n     * @param  {Number} userId User id of user to add to contacts.\n     * @return {Promise} Renderer promise.\n     */\n    var addContact = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.createContactRequest(viewState.loggedInUserId, userId)\n            .then(function(response) {\n                if (!response.request) {\n                    throw new Error(response.warnings[0].message);\n                }\n\n                return response.request;\n            })\n            .then(function(request) {\n                var newState = StateManager.removePendingAddContactsById(viewState, [userId]);\n                newState = StateManager.addContactRequests(newState, [request]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                return render(newState);\n            });\n    };\n\n    /**\n     * Set the current conversation as a favourite conversation.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var setFavourite = function() {\n        var userId = viewState.loggedInUserId;\n        var conversationId = viewState.id;\n\n        return Repository.setFavouriteConversations(userId, [conversationId])\n            .then(function() {\n                var newState = StateManager.setIsFavourite(viewState, true);\n                return render(newState);\n            })\n            .then(function() {\n                return PubSub.publish(\n                    MessageDrawerEvents.CONVERSATION_SET_FAVOURITE,\n                    formatConversationForEvent(viewState)\n                );\n            });\n    };\n\n    /**\n     * Unset the current conversation as a favourite conversation.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var unsetFavourite = function() {\n        var userId = viewState.loggedInUserId;\n        var conversationId = viewState.id;\n\n        return Repository.unsetFavouriteConversations(userId, [conversationId])\n            .then(function() {\n                var newState = StateManager.setIsFavourite(viewState, false);\n                return render(newState);\n            })\n            .then(function() {\n                return PubSub.publish(\n                    MessageDrawerEvents.CONVERSATION_UNSET_FAVOURITE,\n                    formatConversationForEvent(viewState)\n                );\n            });\n    };\n\n    /**\n     * Set the current conversation as a muted conversation.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var setMuted = function() {\n        var userId = viewState.loggedInUserId;\n        var conversationId = viewState.id;\n\n        return Repository.setMutedConversations(userId, [conversationId])\n            .then(function() {\n                var newState = StateManager.setIsMuted(viewState, true);\n                return render(newState);\n            })\n            .then(function() {\n                return PubSub.publish(\n                    MessageDrawerEvents.CONVERSATION_SET_MUTED,\n                    formatConversationForEvent(viewState)\n                );\n            });\n    };\n\n    /**\n     * Unset the current conversation as a muted conversation.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var unsetMuted = function() {\n        var userId = viewState.loggedInUserId;\n        var conversationId = viewState.id;\n\n        return Repository.unsetMutedConversations(userId, [conversationId])\n            .then(function() {\n                var newState = StateManager.setIsMuted(viewState, false);\n                return render(newState);\n            })\n            .then(function() {\n                return PubSub.publish(\n                    MessageDrawerEvents.CONVERSATION_UNSET_MUTED,\n                    formatConversationForEvent(viewState)\n                );\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to delete the selected messages\n     * and run the renderer to show confirm delete messages dialogue.\n     *\n     * @param {Number} userId User id.\n     */\n    var requestDeleteSelectedMessages = function(userId) {\n        var selectedMessageIds = viewState.selectedMessageIds;\n        cancelRequest(userId);\n        var newState = StateManager.addPendingDeleteMessagesById(viewState, selectedMessageIds);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to delete the messages pending deletion. Update the statemanager\n     * and publish a message deletion event.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var deleteSelectedMessages = function() {\n        var messageIds = viewState.pendingDeleteMessageIds;\n        var sentMessages = viewState.messages.filter(function(message) {\n            // If a message sendState is null then it means it was loaded from the server or if it's\n            // set to sent then it means the user has successfully sent it in this page load.\n            return messageIds.indexOf(message.id) >= 0 && (message.sendState == 'sent' || message.sendState === null);\n        });\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n\n        render(newState);\n\n        var deleteMessagesPromise = $.Deferred().resolve().promise();\n\n        if (sentMessages.length) {\n            // We only need to send a request to the server if we're trying to delete messages that\n            // have successfully been sent.\n            var sentMessageIds = sentMessages.map(function(message) {\n                return message.id;\n            });\n            if (newState.deleteMessagesForAllUsers) {\n                deleteMessagesPromise = Repository.deleteMessagesForAllUsers(viewState.loggedInUserId, sentMessageIds);\n            } else {\n                deleteMessagesPromise = Repository.deleteMessages(viewState.loggedInUserId, sentMessageIds);\n            }\n        }\n\n        return deleteMessagesPromise.then(function() {\n                var newState = StateManager.removeMessagesById(viewState, messageIds);\n                newState = StateManager.removePendingDeleteMessagesById(newState, messageIds);\n                newState = StateManager.removeSelectedMessagesById(newState, messageIds);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                newState = StateManager.setDeleteMessagesForAllUsers(newState, false);\n\n                var prevLastMessage = viewState.messages[viewState.messages.length - 1];\n                var newLastMessage = newState.messages.length ? newState.messages[newState.messages.length - 1] : null;\n\n                if (newLastMessage && newLastMessage.id != prevLastMessage.id) {\n                    var conversation = formatConversationForEvent(newState);\n                    PubSub.publish(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, conversation);\n                } else if (!newState.messages.length) {\n                    PubSub.publish(MessageDrawerEvents.CONVERSATION_DELETED, newState.id);\n                }\n\n                return render(newState);\n            })\n            .catch(Notification.exception);\n    };\n\n    /**\n     * Tell the statemanager there is a request to delete a conversation\n     * and run the renderer to show confirm delete conversation dialogue.\n     *\n     * @param {Number} userId User id of other user.\n     */\n    var requestDeleteConversation = function(userId) {\n        cancelRequest(userId);\n        var newState = StateManager.setPendingDeleteConversation(viewState, true);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to delete a conversation. Update the statemanager\n     * and publish a conversation deleted event.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var deleteConversation = function() {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.deleteConversation(viewState.loggedInUserId, viewState.id)\n            .then(function() {\n                var newState = StateManager.removeMessages(viewState, viewState.messages);\n                newState = StateManager.removeSelectedMessagesById(newState, viewState.selectedMessageIds);\n                newState = StateManager.setPendingDeleteConversation(newState, false);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONVERSATION_DELETED, newState.id);\n\n                return render(newState);\n            });\n    };\n\n    /**\n     * Tell the statemanager to cancel all pending actions.\n     *\n     * @param  {Number} userId User id.\n     */\n    var cancelRequest = function(userId) {\n        var pendingDeleteMessageIds = viewState.pendingDeleteMessageIds;\n        var newState = StateManager.removePendingAddContactsById(viewState, [userId]);\n        newState = StateManager.removePendingRemoveContactsById(newState, [userId]);\n        newState = StateManager.removePendingUnblockUsersById(newState, [userId]);\n        newState = StateManager.removePendingBlockUsersById(newState, [userId]);\n        newState = StateManager.removePendingDeleteMessagesById(newState, pendingDeleteMessageIds);\n        newState = StateManager.setPendingDeleteConversation(newState, false);\n        newState = StateManager.setDeleteMessagesForAllUsers(newState, false);\n        render(newState);\n    };\n\n    /**\n     * Accept the contact request from the given user.\n     *\n     * @param  {Number} userId User id of other user.\n     * @return {Promise} Renderer promise.\n     */\n    var acceptContactRequest = function(userId) {\n        // Search the list of the logged in user's contact requests to find the\n        // one from this user.\n        var loggedInUserId = viewState.loggedInUserId;\n        var requests = viewState.members[userId].contactrequests.filter(function(request) {\n            return request.requesteduserid == loggedInUserId;\n        });\n        var request = requests[0];\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.acceptContactRequest(userId, loggedInUserId)\n            .then(function(profile) {\n                var newState = StateManager.removeContactRequests(viewState, [request]);\n                newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                return render(newState);\n            })\n            .then(function() {\n                PubSub.publish(MessageDrawerEvents.CONTACT_ADDED, viewState.members[userId]);\n                PubSub.publish(MessageDrawerEvents.CONTACT_REQUEST_ACCEPTED, request);\n                return;\n            });\n    };\n\n    /**\n     * Decline the contact request from the given user.\n     *\n     * @param  {Number} userId User id of other user.\n     * @return {Promise} Renderer promise.\n     */\n    var declineContactRequest = function(userId) {\n        // Search the list of the logged in user's contact requests to find the\n        // one from this user.\n        var loggedInUserId = viewState.loggedInUserId;\n        var requests = viewState.members[userId].contactrequests.filter(function(request) {\n            return request.requesteduserid == loggedInUserId;\n        });\n        var request = requests[0];\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.declineContactRequest(userId, loggedInUserId)\n            .then(function(profile) {\n                var newState = StateManager.removeContactRequests(viewState, [request]);\n                newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                return render(newState);\n            })\n            .then(function() {\n                PubSub.publish(MessageDrawerEvents.CONTACT_REQUEST_DECLINED, request);\n                return;\n            });\n    };\n\n    /**\n     * Send all of the messages in the buffer to the server to be created. Update the\n     * UI with the newly created message information.\n     *\n     * This function will recursively call itself in order to make sure the buffer is\n     * always being processed.\n     */\n    var processSendMessageBuffer = function() {\n        if (isSendingMessage) {\n            // We're already sending messages so nothing to do.\n            return;\n        }\n        if (!sendMessageBuffer.length) {\n            // No messages waiting to send. Nothing to do.\n            return;\n        }\n\n        // Flag that we're processing the queue.\n        isSendingMessage = true;\n        // Grab all of the messages in the buffer.\n        var messagesToSend = sendMessageBuffer.slice();\n        // Empty the buffer since we're processing it.\n        sendMessageBuffer = [];\n        var conversationId = viewState.id;\n        var newConversationId = null;\n        var messagesText = messagesToSend.map(function(message) {\n            return message.text;\n        });\n        var messageIds = messagesToSend.map(function(message) {\n            return message.id;\n        });\n        var sendMessagePromise = null;\n        var newCanDeleteMessagesForAllUsers = null;\n        if (!conversationId && (viewState.type != CONVERSATION_TYPES.PUBLIC)) {\n            // If it's a new private conversation then we need to use the old\n            // web service function to create the conversation.\n            var otherUserId = getOtherUserId();\n            sendMessagePromise = Repository.sendMessagesToUser(otherUserId, messagesText)\n                .then(function(messages) {\n                    if (messages.length) {\n                        newConversationId = parseInt(messages[0].conversationid, 10);\n                        newCanDeleteMessagesForAllUsers = messages[0].candeletemessagesforallusers;\n                    }\n                    return messages;\n                });\n        } else {\n            sendMessagePromise = Repository.sendMessagesToConversation(conversationId, messagesText);\n        }\n\n        sendMessagePromise\n            .then(function(messages) {\n                var newMessageIds = messages.map(function(message) {\n                    return message.id;\n                });\n                var data = [];\n                var selectedToRemove = [];\n                var selectedToAdd = [];\n\n                messagesToSend.forEach(function(oldMessage, index) {\n                    var newMessage = messages[index];\n                    // Update messages expects and array of arrays where the first value\n                    // is the old message to update and the second value is the new values\n                    // to set.\n                    data.push([oldMessage, newMessage]);\n\n                    if (viewState.selectedMessageIds.indexOf(oldMessage.id) >= 0) {\n                        // If the message was added to the \"selected messages\" list while it was still\n                        // being sent then we should update it's id in that list now to make sure future\n                        // actions work.\n                        selectedToRemove.push(oldMessage.id);\n                        selectedToAdd.push(newMessage.id);\n                    }\n                });\n                var newState = StateManager.updateMessages(viewState, data);\n                newState = StateManager.setMessagesSendSuccessById(newState, newMessageIds);\n\n                if (selectedToRemove.length) {\n                    newState = StateManager.removeSelectedMessagesById(newState, selectedToRemove);\n                }\n\n                if (selectedToAdd.length) {\n                    newState = StateManager.addSelectedMessagesById(newState, selectedToAdd);\n                }\n\n                var conversation = formatConversationForEvent(newState);\n\n                if (!newState.id) {\n                    // If this message created the conversation then save the conversation\n                    // id.\n                    newState = StateManager.setId(newState, newConversationId);\n                    conversation.id = newConversationId;\n                    resetMessagePollTimer(newConversationId);\n                    PubSub.publish(MessageDrawerEvents.CONVERSATION_CREATED, conversation);\n                    newState = StateManager.setCanDeleteMessagesForAllUsers(newState, newCanDeleteMessagesForAllUsers);\n                }\n\n                // Update the UI with the new message values from the server.\n                render(newState);\n                // Recurse just in case there has been more messages added to the buffer.\n                isSendingMessage = false;\n                processSendMessageBuffer();\n                PubSub.publish(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, conversation);\n                return;\n            })\n            .catch(function(e) {\n                if (e.message) {\n                    var errorMessage =  $.Deferred().resolve(e.message).promise();\n                } else {\n                    var errorMessage =  Str.get_string('unknownerror', 'core');\n                }\n\n                var handleFailedMessages = function(errorMessage) {\n                    // We failed to create messages so remove the old messages from the pending queue\n                    // and update the UI to indicate that the message failed.\n                    var newState = StateManager.setMessagesSendFailById(viewState, messageIds, errorMessage);\n                    render(newState);\n                    isSendingMessage = false;\n                    processSendMessageBuffer();\n                };\n\n                errorMessage.then(handleFailedMessages)\n                    .catch(function(e) {\n                        // Hrmm, we can't even load the error messages string! We'll have to\n                        // hard code something in English here if we still haven't got a message\n                        // to show.\n                        var finalError = e.message || 'Something went wrong!';\n                        handleFailedMessages(finalError);\n                    });\n            });\n    };\n\n    /**\n     * Buffers messages to be sent to the server. We use a buffer here to allow the\n     * user to freely input messages without blocking the interface for them.\n     *\n     * Instead we just queue all of their messages up and send them as fast as we can.\n     *\n     * @param {String} text Text to send.\n     */\n    var sendMessage = function(text) {\n        var id = 'temp' + Date.now();\n        var message = {\n            id: id,\n            useridfrom: viewState.loggedInUserId,\n            text: text,\n            timecreated: null\n        };\n        var newState = StateManager.addMessages(viewState, [message]);\n        render(newState);\n        sendMessageBuffer.push(message);\n        processSendMessageBuffer();\n    };\n\n    /**\n     * Retry sending a message that failed.\n     *\n     * @param {Object} message The message to send.\n     */\n    var retrySendMessage = function(message) {\n        var newState = StateManager.setMessagesSendPendingById(viewState, [message.id]);\n        render(newState);\n        sendMessageBuffer.push(message);\n        processSendMessageBuffer();\n    };\n\n    /**\n     * Toggle the selected messages update the statemanager and render the result.\n     *\n     * @param  {Number} messageId The id of the message to be toggled\n     */\n    var toggleSelectMessage = function(messageId) {\n        var newState = viewState;\n\n        if (viewState.selectedMessageIds.indexOf(messageId) > -1) {\n            newState = StateManager.removeSelectedMessagesById(viewState, [messageId]);\n        } else {\n            newState = StateManager.addSelectedMessagesById(viewState, [messageId]);\n        }\n\n        render(newState);\n    };\n\n    /**\n     * Cancel edit mode (selecting the messages).\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var cancelEditMode = function() {\n        cancelRequest(getOtherUserId());\n        var newState = StateManager.removeSelectedMessagesById(viewState, viewState.selectedMessageIds);\n        render(newState);\n    };\n\n    /**\n     * Process the patches in the render buffer one at a time in order until the\n     * buffer is empty.\n     *\n     * @param {Object} header The conversation header container element.\n     * @param {Object} body The conversation body container element.\n     * @param {Object} footer The conversation footer container element.\n     */\n    var processRenderBuffer = function(header, body, footer) {\n        if (isRendering) {\n            return;\n        }\n\n        if (!renderBuffer.length) {\n            return;\n        }\n\n        isRendering = true;\n        var renderable = renderBuffer.shift();\n        var renderPromises = renderers.map(function(renderFunc) {\n            return renderFunc(renderable.patch);\n        });\n\n        $.when.apply(null, renderPromises)\n            .then(function() {\n                isRendering = false;\n                renderable.deferred.resolve(true);\n                // Keep processing the buffer until it's empty.\n                processRenderBuffer(header, body, footer);\n            })\n            .catch(function(error) {\n                isRendering = false;\n                renderable.deferred.reject(error);\n                Notification.exception(error);\n            });\n    };\n\n    /**\n     * Create a function to render the Conversation.\n     *\n     * @param  {Object} header The conversation header container element.\n     * @param  {Object} body The conversation body container element.\n     * @param  {Object} footer The conversation footer container element.\n     * @param  {Bool} isNewConversation Has someone else already initialised a conversation?\n     * @return {Promise} Renderer promise.\n     */\n    var generateRenderFunction = function(header, body, footer, isNewConversation) {\n        var rendererFunc = function(patch) {\n            return Renderer.render(header, body, footer, patch);\n        };\n\n        if (!isNewConversation) {\n            // Looks like someone got here before us! We'd better update our\n            // UI to make sure it matches.\n            var initialState = StateManager.buildInitialState(viewState.midnight, viewState.loggedInUserId, viewState.id);\n            var syncPatch = Patcher.buildPatch(initialState, viewState);\n            rendererFunc(syncPatch);\n        }\n\n        renderers.push(rendererFunc);\n\n        return function(newState) {\n            var patch = Patcher.buildPatch(viewState, newState);\n            var deferred = $.Deferred();\n\n            // Check if the patch has any data. Ignore empty patches.\n            if (Object.keys(patch).length) {\n                // Add the patch to the render buffer which gets processed in order.\n                renderBuffer.push({\n                    patch: patch,\n                    deferred: deferred\n                });\n            } else {\n                deferred.resolve(true);\n            }\n            // This is a great place to add in some console logging if you need\n            // to debug something. You can log the current state, the next state,\n            // and the generated patch and see exactly what will be updated.\n\n            // Optimistically update the state. We're going to assume that the rendering\n            // will always succeed. The rendering is asynchronous (annoyingly) so it's buffered\n            // but it'll reach eventual consistency with the current state.\n            viewState = newState;\n            if (newState.id) {\n                // Only cache created conversations.\n                stateCache[newState.id] = {\n                    state: newState,\n                    messagesOffset: getMessagesOffset(),\n                    loadedAllMessages: hasLoadedAllMessages()\n                };\n            }\n\n            // Start processing the buffer.\n            processRenderBuffer(header, body, footer);\n\n            return deferred.promise();\n        };\n    };\n\n    /**\n     * Create a confirm action function.\n     *\n     * @param {Function} actionCallback The callback function.\n     * @return {Function} Confirm action handler.\n     */\n    var generateConfirmActionHandler = function(actionCallback) {\n        return function(e, data) {\n            if (!viewState.loadingConfirmAction) {\n                actionCallback(getOtherUserId());\n                var newState = StateManager.setLoadingConfirmAction(viewState, false);\n                render(newState);\n            }\n            data.originalEvent.preventDefault();\n        };\n    };\n\n    /**\n     * Send message event handler.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleSendMessage = function(e, data) {\n        var target = $(e.target);\n        var footerContainer = target.closest(SELECTORS.FOOTER_CONTAINER);\n        var textArea = footerContainer.find(SELECTORS.MESSAGE_TEXT_AREA);\n        var text = textArea.val().trim();\n\n        if (text !== '') {\n            sendMessage(text);\n            textArea.val('');\n            textArea.focus();\n        }\n\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Select message event handler.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleSelectMessage = function(e, data) {\n        var selection = window.getSelection();\n        var target = $(e.target);\n\n        if (selection.toString() != '') {\n            // Bail if we're selecting.\n            return;\n        }\n\n        if (target.is('a')) {\n            // Clicking on a link in the message so ignore it.\n            return;\n        }\n\n        var element = target.closest(SELECTORS.MESSAGE);\n        var messageId = element.attr('data-message-id');\n\n        toggleSelectMessage(messageId);\n\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Handle retry sending of message.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleRetrySendMessage = function(e, data) {\n        var target = $(e.target);\n        var element = target.closest(SELECTORS.MESSAGE);\n        var messageId = element.attr('data-message-id');\n        var messages = viewState.messages.filter(function(message) {\n            return message.id == messageId;\n        });\n        var message = messages.length ? messages[0] : null;\n\n        if (message) {\n            retrySendMessage(message);\n        }\n\n        data.originalEvent.preventDefault();\n        data.originalEvent.stopPropagation();\n        e.stopPropagation();\n    };\n\n    /**\n     * Cancel edit mode event handler.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleCancelEditMode = function(e, data) {\n        cancelEditMode();\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Show the view contact page.\n     *\n     * @param {String} namespace Unique identifier for the Routes\n     * @return {Function} View contact handler.\n     */\n    var generateHandleViewContact = function(namespace) {\n        return function(e, data) {\n            var otherUserId = getOtherUserId();\n            var otherUser = viewState.members[otherUserId];\n            MessageDrawerRouter.go(namespace, MessageDrawerRoutes.VIEW_CONTACT, otherUser);\n            data.originalEvent.preventDefault();\n        };\n    };\n\n    /**\n     * Set this conversation as a favourite.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleSetFavourite = function(e, data) {\n        setFavourite().catch(Notification.exception);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Unset this conversation as a favourite.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleUnsetFavourite = function(e, data) {\n        unsetFavourite().catch(Notification.exception);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Show the view group info page.\n     * Set this conversation as muted.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleSetMuted = function(e, data) {\n        setMuted().catch(Notification.exception);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Unset this conversation as muted.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleUnsetMuted = function(e, data) {\n        unsetMuted().catch(Notification.exception);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Handle clicking on the checkbox that toggles deleting messages for\n     * all users.\n     *\n     * @param {Object} e Element this event handler is called on.\n     */\n    var handleDeleteMessagesForAllUsersToggle = function(e) {\n        var newValue = $(e.target).prop('checked');\n        var newState = StateManager.setDeleteMessagesForAllUsers(viewState, newValue);\n        render(newState);\n    };\n\n    /**\n     * Show the view contact page.\n     *\n     * @param {String} namespace Unique identifier for the Routes\n     * @return {Function} View group info handler.\n     */\n    var generateHandleViewGroupInfo = function(namespace) {\n        return function(e, data) {\n            MessageDrawerRouter.go(\n                namespace,\n                MessageDrawerRoutes.VIEW_GROUP_INFO,\n                {\n                    id: viewState.id,\n                    name: viewState.name,\n                    subname: viewState.subname,\n                    imageUrl: viewState.imageUrl,\n                    totalMemberCount: viewState.totalMemberCount\n                },\n                viewState.loggedInUserId\n            );\n            data.originalEvent.preventDefault();\n        };\n    };\n\n    /**\n     * Listen to, and handle events for conversations.\n     *\n     * @param {string} namespace The route namespace.\n     * @param {Object} header Conversation header container element.\n     * @param {Object} body Conversation body container element.\n     * @param {Object} footer Conversation footer container element.\n     */\n    var registerEventListeners = function(namespace, header, body, footer) {\n        var isLoadingMoreMessages = false;\n        var messagesContainer = getMessagesContainer(body);\n        var headerActivateHandlers = [\n            [SELECTORS.ACTION_REQUEST_BLOCK, generateConfirmActionHandler(requestBlockUser)],\n            [SELECTORS.ACTION_REQUEST_UNBLOCK, generateConfirmActionHandler(requestUnblockUser)],\n            [SELECTORS.ACTION_REQUEST_ADD_CONTACT, generateConfirmActionHandler(requestAddContact)],\n            [SELECTORS.ACTION_REQUEST_REMOVE_CONTACT, generateConfirmActionHandler(requestRemoveContact)],\n            [SELECTORS.ACTION_REQUEST_DELETE_CONVERSATION, generateConfirmActionHandler(requestDeleteConversation)],\n            [SELECTORS.ACTION_CANCEL_EDIT_MODE, handleCancelEditMode],\n            [SELECTORS.ACTION_VIEW_CONTACT, generateHandleViewContact(namespace)],\n            [SELECTORS.ACTION_VIEW_GROUP_INFO, generateHandleViewGroupInfo(namespace)],\n            [SELECTORS.ACTION_CONFIRM_FAVOURITE, handleSetFavourite],\n            [SELECTORS.ACTION_CONFIRM_MUTE, handleSetMuted],\n            [SELECTORS.ACTION_CONFIRM_UNFAVOURITE, handleUnsetFavourite],\n            [SELECTORS.ACTION_CONFIRM_UNMUTE, handleUnsetMuted]\n        ];\n        var bodyActivateHandlers = [\n            [SELECTORS.ACTION_CANCEL_CONFIRM, generateConfirmActionHandler(cancelRequest)],\n            [SELECTORS.ACTION_CONFIRM_BLOCK, generateConfirmActionHandler(blockUser)],\n            [SELECTORS.ACTION_CONFIRM_UNBLOCK, generateConfirmActionHandler(unblockUser)],\n            [SELECTORS.ACTION_CONFIRM_ADD_CONTACT, generateConfirmActionHandler(addContact)],\n            [SELECTORS.ACTION_CONFIRM_REMOVE_CONTACT, generateConfirmActionHandler(removeContact)],\n            [SELECTORS.ACTION_CONFIRM_DELETE_SELECTED_MESSAGES, generateConfirmActionHandler(deleteSelectedMessages)],\n            [SELECTORS.ACTION_CONFIRM_DELETE_CONVERSATION, generateConfirmActionHandler(deleteConversation)],\n            [SELECTORS.ACTION_REQUEST_ADD_CONTACT, generateConfirmActionHandler(requestAddContact)],\n            [SELECTORS.ACTION_ACCEPT_CONTACT_REQUEST, generateConfirmActionHandler(acceptContactRequest)],\n            [SELECTORS.ACTION_DECLINE_CONTACT_REQUEST, generateConfirmActionHandler(declineContactRequest)],\n            [SELECTORS.MESSAGE, handleSelectMessage],\n            [SELECTORS.DELETE_MESSAGES_FOR_ALL_USERS_TOGGLE, handleDeleteMessagesForAllUsersToggle],\n            [SELECTORS.RETRY_SEND, handleRetrySendMessage]\n        ];\n        var footerActivateHandlers = [\n            [SELECTORS.SEND_MESSAGE_BUTTON, handleSendMessage],\n            [SELECTORS.ACTION_REQUEST_DELETE_SELECTED_MESSAGES, generateConfirmActionHandler(requestDeleteSelectedMessages)],\n            [SELECTORS.ACTION_REQUEST_ADD_CONTACT, generateConfirmActionHandler(requestAddContact)],\n            [SELECTORS.ACTION_REQUEST_UNBLOCK, generateConfirmActionHandler(requestUnblockUser)],\n        ];\n\n        AutoRows.init(footer);\n\n        CustomEvents.define(header, [\n            CustomEvents.events.activate\n        ]);\n        CustomEvents.define(body, [\n            CustomEvents.events.activate\n        ]);\n        CustomEvents.define(footer, [\n            CustomEvents.events.activate,\n            CustomEvents.events.enter\n        ]);\n        CustomEvents.define(messagesContainer, [\n            CustomEvents.events.scrollTop,\n            CustomEvents.events.scrollLock\n        ]);\n\n        messagesContainer.on(CustomEvents.events.scrollTop, function(e, data) {\n            var hasMembers = Object.keys(viewState.members).length > 1;\n\n            if (!isResetting && !isLoadingMoreMessages && !hasLoadedAllMessages() && hasMembers) {\n                isLoadingMoreMessages = true;\n                var newState = StateManager.setLoadingMessages(viewState, true);\n                render(newState);\n\n                loadMessages(viewState.id, LOAD_MESSAGE_LIMIT, getMessagesOffset(), NEWEST_FIRST, [])\n                    .then(function() {\n                        isLoadingMoreMessages = false;\n                        setMessagesOffset(getMessagesOffset() + LOAD_MESSAGE_LIMIT);\n                        return;\n                    })\n                    .catch(function(error) {\n                        isLoadingMoreMessages = false;\n                        Notification.exception(error);\n                    });\n            }\n\n            data.originalEvent.preventDefault();\n        });\n\n        headerActivateHandlers.forEach(function(handler) {\n            var selector = handler[0];\n            var handlerFunction = handler[1];\n            header.on(CustomEvents.events.activate, selector, handlerFunction);\n        });\n\n        bodyActivateHandlers.forEach(function(handler) {\n            var selector = handler[0];\n            var handlerFunction = handler[1];\n            body.on(CustomEvents.events.activate, selector, handlerFunction);\n        });\n\n        footerActivateHandlers.forEach(function(handler) {\n            var selector = handler[0];\n            var handlerFunction = handler[1];\n            footer.on(CustomEvents.events.activate, selector, handlerFunction);\n        });\n\n        footer.on(CustomEvents.events.enter, SELECTORS.MESSAGE_TEXT_AREA, function(e, data) {\n            var enterToSend = footer.attr('data-enter-to-send');\n            if (enterToSend && enterToSend != 'false' && enterToSend != '0') {\n                handleSendMessage(e, data);\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.ROUTE_CHANGED, function(newRouteData) {\n            if (newMessagesPollTimer) {\n                if (newRouteData.route != MessageDrawerRoutes.VIEW_CONVERSATION) {\n                    newMessagesPollTimer.stop();\n                }\n            }\n        });\n    };\n\n    /**\n     * Reset the timer that polls for new messages.\n     *\n     * @param  {Number} conversationId The conversation id\n     */\n    var resetMessagePollTimer = function(conversationId) {\n        if (newMessagesPollTimer) {\n            newMessagesPollTimer.stop();\n        }\n\n        newMessagesPollTimer = new BackOffTimer(\n            getLoadNewMessagesCallback(conversationId, NEWEST_FIRST),\n            BackOffTimer.getIncrementalCallback(\n                viewState.messagePollMin * MILLISECONDS_IN_SEC,\n                MILLISECONDS_IN_SEC,\n                viewState.messagePollMax * MILLISECONDS_IN_SEC,\n                viewState.messagePollAfterMax * MILLISECONDS_IN_SEC\n            )\n        );\n\n        newMessagesPollTimer.start();\n    };\n\n    /**\n     * Reset the state to the initial state and render the UI.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Number|null} conversationId The conversation id.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     */\n    var resetState = function(body, conversationId, loggedInUserProfile) {\n        // Reset all of the states back to the beginning if we're loading a new\n        // conversation.\n        loadedAllMessages = false;\n        messagesOffset = 0;\n        newMessagesPollTimer = null;\n        isRendering = false;\n        renderBuffer = [];\n        isResetting = true;\n        isSendingMessage = false;\n        sendMessageBuffer = [];\n\n        var loggedInUserId = loggedInUserProfile.id;\n        var midnight = parseInt(body.attr('data-midnight'), 10);\n        var messagePollMin = parseInt(body.attr('data-message-poll-min'), 10);\n        var messagePollMax = parseInt(body.attr('data-message-poll-max'), 10);\n        var messagePollAfterMax = parseInt(body.attr('data-message-poll-after-max'), 10);\n        var initialState = StateManager.buildInitialState(\n            midnight,\n            loggedInUserId,\n            conversationId,\n            messagePollMin,\n            messagePollMax,\n            messagePollAfterMax\n        );\n\n        if (!viewState) {\n            viewState = initialState;\n        }\n\n        if (newMessagesPollTimer) {\n            newMessagesPollTimer.stop();\n        }\n\n        render(initialState);\n    };\n\n    /**\n     * Load a new empty private conversation between two users or self-conversation.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     * @param  {Int} otherUserId The other user's id.\n     * @return {Promise} Renderer promise.\n     */\n    var resetNoConversation = function(body, loggedInUserProfile, otherUserId) {\n        // Always reset the state back to the initial state so that the\n        // state manager and patcher can work correctly.\n        resetState(body, null, loggedInUserProfile);\n\n        var resetNoConversationPromise = null;\n\n        if (loggedInUserProfile.id != otherUserId) {\n            // Private conversation between two different users.\n            resetNoConversationPromise = Repository.getConversationBetweenUsers(\n                loggedInUserProfile.id,\n                otherUserId,\n                true,\n                true,\n                0,\n                0,\n                LOAD_MESSAGE_LIMIT,\n                0,\n                NEWEST_FIRST\n            );\n        } else {\n            // Self conversation.\n            resetNoConversationPromise = Repository.getSelfConversation(\n                loggedInUserProfile.id,\n                LOAD_MESSAGE_LIMIT,\n                0,\n                NEWEST_FIRST\n            );\n        }\n\n        return resetNoConversationPromise.then(function(conversation) {\n                // Looks like we have a conversation after all! Let's use that.\n                return resetByConversation(body, conversation, loggedInUserProfile);\n            })\n            .catch(function() {\n                // Can't find a conversation. Oh well. Just load up a blank one.\n                return loadEmptyPrivateConversation(loggedInUserProfile, otherUserId);\n            });\n    };\n\n    /**\n     * Load new messages into the conversation based on a time interval.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Number} conversationId The conversation id.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     * @return {Promise} Renderer promise.\n     */\n    var resetById = function(body, conversationId, loggedInUserProfile) {\n        var cache = null;\n        if (conversationId in stateCache) {\n            cache = stateCache[conversationId];\n        }\n\n        // Always reset the state back to the initial state so that the\n        // state manager and patcher can work correctly.\n        resetState(body, conversationId, loggedInUserProfile);\n\n        var promise = $.Deferred().resolve({}).promise();\n        if (cache) {\n            // We've seen this conversation before so there is no need to\n            // send any network requests.\n            var newState = cache.state;\n            // Reset some loading states just in case they were left weirdly.\n            newState = StateManager.setLoadingMessages(newState, false);\n            newState = StateManager.setLoadingMembers(newState, false);\n            setMessagesOffset(cache.messagesOffset);\n            setLoadedAllMessages(cache.loadedAllMessages);\n            render(newState);\n        } else {\n            promise = loadNewConversation(\n                conversationId,\n                loggedInUserProfile,\n                LOAD_MESSAGE_LIMIT,\n                0,\n                NEWEST_FIRST\n            );\n        }\n\n        return promise.then(function() {\n            return resetMessagePollTimer(conversationId);\n        });\n    };\n\n    /**\n     * Load new messages into the conversation based on a time interval.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Object} conversation The conversation.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     * @return {Promise} Renderer promise.\n     */\n    var resetByConversation = function(body, conversation, loggedInUserProfile) {\n        var cache = null;\n        if (conversation.id in stateCache) {\n            cache = stateCache[conversation.id];\n        }\n\n        // Always reset the state back to the initial state so that the\n        // state manager and patcher can work correctly.\n        resetState(body, conversation.id, loggedInUserProfile);\n\n        var promise = $.Deferred().resolve({}).promise();\n        if (cache) {\n            // We've seen this conversation before so there is no need to\n            // send any network requests.\n            var newState = cache.state;\n            // Reset some loading states just in case they were left weirdly.\n            newState = StateManager.setLoadingMessages(newState, false);\n            newState = StateManager.setLoadingMembers(newState, false);\n            setMessagesOffset(cache.messagesOffset);\n            setLoadedAllMessages(cache.loadedAllMessages);\n            render(newState);\n        } else {\n            promise = loadExistingConversation(\n                conversation,\n                loggedInUserProfile,\n                LOAD_MESSAGE_LIMIT,\n                NEWEST_FIRST\n            );\n        }\n\n        return promise.then(function() {\n            return resetMessagePollTimer(conversation.id);\n        });\n    };\n\n    /**\n     * Setup the conversation page. This is a rather complex function because there are a\n     * few combinations of arguments that can be provided to this function to show the\n     * conversation.\n     *\n     * There are:\n     * 1.) A conversation object with no action or other user id (e.g. from the overview page)\n     * 2.) A conversation id with no action or other user id (e.g. from the contacts page)\n     * 3.) No conversation/id with an action and other other user id. (e.g. from contact page)\n     *\n     * @param {string} namespace The route namespace.\n     * @param {Object} header Conversation header container element.\n     * @param {Object} body Conversation body container element.\n     * @param {Object} footer Conversation footer container element.\n     * @param {Object|Number|null} conversationOrId Conversation or id or null\n     * @param {String} action An action to take on the conversation\n     * @param {Number} otherUserId The other user id for a private conversation\n     * @return {Object} jQuery promise\n     */\n    var show = function(namespace, header, body, footer, conversationOrId, action, otherUserId) {\n        var conversation = null;\n        var conversationId = null;\n\n        // Check what we were given to identify the conversation.\n        if (conversationOrId && conversationOrId !== null && typeof conversationOrId == 'object') {\n            conversation = conversationOrId;\n            conversationId = parseInt(conversation.id, 10);\n        } else {\n            conversation = null;\n            conversationId = parseInt(conversationOrId, 10);\n            conversationId = isNaN(conversationId) ? null : conversationId;\n        }\n\n        if (!conversationId && action && otherUserId) {\n            // If we didn't get a conversation id got a user id then let's see if we've\n            // previously loaded a private conversation with this user.\n            conversationId = getCachedPrivateConversationIdFromUserId(otherUserId);\n        }\n\n        // This is a new conversation if:\n        // 1. We don't already have a state\n        // 2. The given conversation doesn't match the one currently loaded\n        // 3. We have a view state without a conversation id and we weren't given one\n        //    but we were given a different other user id. This happens when the user\n        //    goes from viewing a user that they haven't yet initialised a conversation\n        //    with to viewing a different user that they also haven't initialised a\n        //    conversation with.\n        var isNewConversation = !viewState || (viewState.id != conversationId) || (otherUserId && otherUserId != getOtherUserId());\n\n        if (!body.attr('data-init')) {\n            // Generate the render function to bind the header, body, and footer\n            // elements to it so that we don't need to pass them around this module.\n            render = generateRenderFunction(header, body, footer, isNewConversation);\n            registerEventListeners(namespace, header, body, footer);\n            body.attr('data-init', true);\n        }\n\n        if (isNewConversation) {\n            var renderPromise = null;\n            var loggedInUserProfile = getLoggedInUserProfile(body);\n\n            if (conversation) {\n                renderPromise = resetByConversation(body, conversation, loggedInUserProfile, otherUserId);\n            } else if (conversationId) {\n                renderPromise = resetById(body, conversationId, loggedInUserProfile, otherUserId);\n            } else {\n                renderPromise = resetNoConversation(body, loggedInUserProfile, otherUserId);\n            }\n\n            return renderPromise\n                .then(function() {\n                    isResetting = false;\n                    // Focus the first element that can receieve it in the header.\n                    header.find(Constants.SELECTORS.CAN_RECEIVE_FOCUS).first().focus();\n                    return;\n                })\n                .catch(function(error) {\n                    isResetting = false;\n                    Notification.exception(error);\n                });\n        }\n\n        // We're not loading a new conversation so we should reset the poll timer to try to load\n        // new messages.\n        resetMessagePollTimer(conversationId);\n\n        if (viewState.type == CONVERSATION_TYPES.PRIVATE && action) {\n            // There are special actions that the user can perform in a private (aka 1-to-1)\n            // conversation.\n            var currentOtherUserId = getOtherUserId();\n\n            switch (action) {\n                case 'block':\n                    return requestBlockUser(currentOtherUserId);\n                case 'unblock':\n                    return requestUnblockUser(currentOtherUserId);\n                case 'add-contact':\n                    return requestAddContact(currentOtherUserId);\n                case 'remove-contact':\n                    return requestRemoveContact(currentOtherUserId);\n            }\n        }\n\n        // Final fallback to return a promise if we didn't need to do anything.\n        return $.Deferred().resolve().promise();\n    };\n\n    /**\n     * String describing this page used for aria-labels.\n     *\n     * @return {Object} jQuery promise\n     */\n    var description = function() {\n        return Str.get_string('messagedrawerviewconversation', 'core_message', viewState.name);\n    };\n\n    return {\n        show: show,\n        description: description\n    };\n});\n"],"file":"message_drawer_view_conversation.min.js"}