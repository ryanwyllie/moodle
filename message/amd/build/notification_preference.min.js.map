{"version":3,"sources":["../src/notification_preference.js"],"names":["define","$","Ajax","Notification","NotificationProcessor","SELECTORS","PROCESSOR","STATE_INPUTS","NotificationPreference","element","userId","root","prototype","getPreferenceKey","attr","getLoggedInPreferenceKey","getLoggedOffPreferenceKey","getProcessors","find","map","index","startLoading","addClass","prop","stopLoading","removeClass","isLoading","hasClass","save","Deferred","resolve","loggedInValue","loggedOffValue","each","processor","isLoggedInEnabled","getName","isLoggedOffEnabled","args","userid","preferences","type","value","call","methodname","fail","exception","always","bind"],"mappings":"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","file":"notification_preference.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the preference for an individual notification type on the\n * message preference page.\n *\n * @module     core_message/notification_preference\n * @class      notification_preference\n * @package    message\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/ajax', 'core/notification', 'core_message/notification_processor'],\n        function($, Ajax, Notification, NotificationProcessor) {\n\n    var SELECTORS = {\n        PROCESSOR: '[data-processor-name]',\n        STATE_INPUTS: '[data-state] input',\n    };\n\n    /**\n     * Constructor for the Preference.\n     *\n     * @param {object} element jQuery object root element of the preference\n     * @param {int} userId The current user id\n     */\n    var NotificationPreference = function(element, userId) {\n        this.root = $(element);\n        this.userId = userId;\n    };\n\n    /**\n     * Get the unique prefix key that identifies this user preference.\n     *\n     * @method getPreferenceKey\n     * @return {string}\n     */\n    NotificationPreference.prototype.getPreferenceKey = function() {\n        return this.root.attr('data-preference-key');\n    };\n\n    /**\n     * Get the unique key for the logged in preference.\n     *\n     * @method getLoggedInPreferenceKey\n     * @return {string}\n     */\n    NotificationPreference.prototype.getLoggedInPreferenceKey = function() {\n        return this.getPreferenceKey() + '_loggedin';\n    };\n\n    /**\n     * Get the unique key for the logged off preference.\n     *\n     * @method getLoggedOffPreferenceKey\n     * @return {string}\n     */\n    NotificationPreference.prototype.getLoggedOffPreferenceKey = function() {\n        return this.getPreferenceKey() + '_loggedoff';\n    };\n\n    /**\n     * Get the list of Processors available for this preference.\n     *\n     * @method getProcessors\n     * @return {array}\n     */\n    NotificationPreference.prototype.getProcessors = function() {\n        return this.root.find(SELECTORS.PROCESSOR).map(function(index, element) {\n            return new NotificationProcessor($(element));\n        });\n    };\n\n    /**\n     * Flag the preference as loading.\n     *\n     * @method startLoading\n     */\n    NotificationPreference.prototype.startLoading = function() {\n        this.root.addClass('loading');\n        this.root.find(SELECTORS.STATE_INPUTS).prop('disabled', true);\n    };\n\n    /**\n     * Remove the loading flag for this preference.\n     *\n     * @method stopLoading\n     */\n    NotificationPreference.prototype.stopLoading = function() {\n        this.root.removeClass('loading');\n        this.root.find(SELECTORS.STATE_INPUTS).prop('disabled', false);\n    };\n\n    /**\n     * Check if the preference is loading.\n     *\n     * @method isLoading\n     * @return {Boolean}\n     */\n    NotificationPreference.prototype.isLoading = function() {\n        return this.root.hasClass('loading');\n    };\n\n    /**\n     * Persist the current state of the processors for this preference.\n     *\n     * @method save\n     * @return {object} jQuery promise\n     */\n    NotificationPreference.prototype.save = function() {\n        if (this.isLoading()) {\n            return $.Deferred().resolve();\n        }\n\n        this.startLoading();\n\n        var loggedInValue = '';\n        var loggedOffValue = '';\n\n        this.getProcessors().each(function(index, processor) {\n            if (processor.isLoggedInEnabled()) {\n                if (loggedInValue === '') {\n                    loggedInValue = processor.getName();\n                } else {\n                    loggedInValue += ',' + processor.getName();\n                }\n            }\n\n            if (processor.isLoggedOffEnabled()) {\n                if (loggedOffValue === '') {\n                    loggedOffValue = processor.getName();\n                } else {\n                    loggedOffValue += ',' + processor.getName();\n                }\n            }\n        });\n\n        if (loggedInValue === '') {\n            loggedInValue = 'none';\n        }\n\n        if (loggedOffValue === '') {\n            loggedOffValue = 'none';\n        }\n\n        var args = {\n            userid: this.userId,\n            preferences: [\n                {\n                    type: this.getLoggedInPreferenceKey(),\n                    value: loggedInValue,\n                },\n                {\n                    type: this.getLoggedOffPreferenceKey(),\n                    value: loggedOffValue,\n                },\n            ],\n        };\n\n        var request = {\n            methodname: 'core_user_update_user_preferences',\n            args: args,\n        };\n\n        return Ajax.call([request])[0]\n            .fail(Notification.exception)\n            .always(function() {\n                this.stopLoading();\n            }.bind(this));\n    };\n\n    return NotificationPreference;\n});\n"]}