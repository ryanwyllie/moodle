{"version":3,"sources":["../src/message_area_messages.js"],"names":["define","$","Ajax","Templates","Notification","CustomEvents","AutoRows","Actions","ModalFactory","ModalEvents","Str","Events","BackOffTimer","Messages","messageArea","_init","MESSAGES_AREA_DEFAULT_HEIGHT","SELECTORS","BLOCKTIME","CANCELDELETEMESSAGES","CONTACT","CONVERSATIONS","DELETEALLMESSAGES","DELETEMESSAGES","LOADINGICON","MESSAGE","MESSAGERESPONSE","MESSAGES","MESSAGESAREA","MESSAGINGAREA","SENDMESSAGE","SENDMESSAGETEXT","SHOWCONTACTS","STARTDELETEMESSAGES","prototype","_isSendingMessage","_isLoadingMessages","_numMessagesDisplayed","_messageQueue","_numMessagesToRetrieve","_confirmationModal","_latestMessageTimestamp","_backoffTimer","node","events","activate","up","down","enter","window","height","init","onCustomEvent","CONVERSATIONSELECTED","_viewMessages","bind","CHOOSEMESSAGESTODELETE","_chooseMessagesToDelete","_hideDeleteAction","onDelegateEvent","_sendMessage","_startDeleting","_deleteMessages","_deleteAllMessages","_triggerCancelMessagesToDelete","_toggleMessage","_hideMessagingArea","_selectPreviousMessage","_selectNextMessage","_setMessaging","_clearMessaging","document","on","ROW_CHANGE","_adjustMessagesAreaHeight","messages","find","length","_addScrollEventListener","data","_loadNewMessages","getIncrementalCallback","pollmin","pollmax","polltimeout","start","event","userid","stop","markMessagesAsRead","call","methodname","args","useridto","getCurrentUserId","useridfrom","numberreceived","render","then","html","js","replaceNodeContents","conversationnode","hasClass","removeClass","trigger","_getMessages","restart","focus","fail","exception","_loadMessages","prependNodeContents","_getUserId","remove","newHtml","_hasMatchingBlockTime","oldheight","scrollHeight","newheight","scrollTop","shouldScrollBottom","innerHeight","_addMessagesToDom","always","fromTimestamp","currentuserid","otheruserid","limitfrom","limitnum","newest","timefrom","promises","latestMessage","timecreated","ex","element","text","val","trim","touserid","prop","response","Error","errormessage","MESSAGESENT","_addLastMessageToDom","addClass","attr","checkboxes","requests","messagestoremove","each","id","messageid","isread","push","read","when","updatemessage","lastmessage","last","lastremovedmessage","key","message","blocktime","MESSAGESDELETED","catch","_scrollBottom","show","stringsPromise","get_strings","component","deleteModalPromise","create","type","types","SAVE_CANCEL","s","modal","setTitle","setBody","setSaveButtonText","getRoot","save","otherUserId","request","empty","CONVERSATIONDELETED","removeAttr","messagesArea","filter","result","appendNodeContents","e","currentMessage","target","closest","prev","is","originalEvent","preventDefault","stopPropagation","next","actions","chooseMessagesToDelete","_isEditing","messagesResponse","currentMessageResponseHeight","outerHeight","newMessagesAreaHeight","_sendMessageHandler","domHtml","loadingPreviousMessages","blockTime","blockTimePos","newBlockTime","newBlockTimePos"],"mappings":"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","file":"message_area_messages.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module handles the message area of the messaging area.\n *\n * @module     core_message/message_area_messages\n * @package    core_message\n * @copyright  2016 Mark Nelson <markn@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/ajax', 'core/templates', 'core/notification', 'core/custom_interaction_events',\n        'core/auto_rows', 'core_message/message_area_actions', 'core/modal_factory', 'core/modal_events',\n        'core/str', 'core_message/message_area_events', 'core/backoff_timer'],\n    function($, Ajax, Templates, Notification, CustomEvents, AutoRows, Actions, ModalFactory,\n             ModalEvents, Str, Events, BackOffTimer) {\n\n        /** @type {int} The message area default height. */\n        var MESSAGES_AREA_DEFAULT_HEIGHT = 500;\n\n        /** @type {int} The response default height. */\n        var MESSAGES_RESPONSE_DEFAULT_HEIGHT = 50;\n\n        /** @type {Object} The list of selectors for the message area. */\n        var SELECTORS = {\n            BLOCKTIME: \"[data-region='blocktime']\",\n            CANCELDELETEMESSAGES: \"[data-action='cancel-delete-messages']\",\n            CONTACT: \"[data-region='contact']\",\n            CONVERSATIONS: \"[data-region='contacts'][data-region-content='conversations']\",\n            DELETEALLMESSAGES: \"[data-action='delete-all-messages']\",\n            DELETEMESSAGES: \"[data-action='delete-messages']\",\n            LOADINGICON: '.loading-icon',\n            MESSAGE: \"[data-region='message']\",\n            MESSAGERESPONSE: \"[data-region='response']\",\n            MESSAGES: \"[data-region='messages']\",\n            MESSAGESAREA: \"[data-region='messages-area']\",\n            MESSAGINGAREA: \"[data-region='messaging-area']\",\n            SENDMESSAGE: \"[data-action='send-message']\",\n            SENDMESSAGETEXT: \"[data-region='send-message-txt']\",\n            SHOWCONTACTS: \"[data-action='show-contacts']\",\n            STARTDELETEMESSAGES: \"[data-action='start-delete-messages']\",\n        };\n\n        /** @type {int} The number of milliseconds in a second. */\n        var MILLISECONDSINSEC = 1000;\n\n        /**\n         * Messages class.\n         *\n         * @param {Messagearea} messageArea The messaging area object.\n         */\n        function Messages(messageArea) {\n            this.messageArea = messageArea;\n            this._init();\n        }\n\n        /** @type {Boolean} checks if we are sending a message */\n        Messages.prototype._isSendingMessage = false;\n\n        /** @type {Boolean} checks if we are currently loading messages */\n        Messages.prototype._isLoadingMessages = false;\n\n        /** @type {int} the number of messagess displayed */\n        Messages.prototype._numMessagesDisplayed = 0;\n\n        /** @type {array} the messages displayed or about to be displayed on the page */\n        Messages.prototype._messageQueue = [];\n\n        /** @type {int} the number of messages to retrieve */\n        Messages.prototype._numMessagesToRetrieve = 20;\n\n        /** @type {Modal} the confirmation modal */\n        Messages.prototype._confirmationModal = null;\n\n        /** @type {int} the timestamp for the most recent visible message */\n        Messages.prototype._latestMessageTimestamp = 0;\n\n        /** @type {BackOffTimer} the backoff timer */\n        Messages.prototype._backoffTimer = null;\n\n        /** @type {Messagearea} The messaging area object. */\n        Messages.prototype.messageArea = null;\n\n        /**\n         * Initialise the event listeners.\n         *\n         * @private\n         */\n        Messages.prototype._init = function() {\n            CustomEvents.define(this.messageArea.node, [\n                CustomEvents.events.activate,\n                CustomEvents.events.up,\n                CustomEvents.events.down,\n                CustomEvents.events.enter,\n            ]);\n\n            // We have a responsive media query based on height that reduces this size on screens shorter than 670.\n            if ($(window).height() <= 670) {\n                MESSAGES_AREA_DEFAULT_HEIGHT = 400;\n            }\n\n            AutoRows.init(this.messageArea.node);\n\n            this.messageArea.onCustomEvent(Events.CONVERSATIONSELECTED, this._viewMessages.bind(this));\n            this.messageArea.onCustomEvent(Events.SENDMESSAGE, this._viewMessages.bind(this));\n            this.messageArea.onCustomEvent(Events.CHOOSEMESSAGESTODELETE, this._chooseMessagesToDelete.bind(this));\n            this.messageArea.onCustomEvent(Events.CANCELDELETEMESSAGES, this._hideDeleteAction.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.activate, SELECTORS.SENDMESSAGE,\n                this._sendMessage.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.activate, SELECTORS.STARTDELETEMESSAGES,\n                this._startDeleting.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.activate, SELECTORS.DELETEMESSAGES,\n                this._deleteMessages.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.activate, SELECTORS.DELETEALLMESSAGES,\n                this._deleteAllMessages.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.activate, SELECTORS.CANCELDELETEMESSAGES,\n                this._triggerCancelMessagesToDelete.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.activate, SELECTORS.MESSAGE,\n                this._toggleMessage.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.activate, SELECTORS.SHOWCONTACTS,\n                this._hideMessagingArea.bind(this));\n\n            this.messageArea.onDelegateEvent(CustomEvents.events.up, SELECTORS.MESSAGE,\n                this._selectPreviousMessage.bind(this));\n            this.messageArea.onDelegateEvent(CustomEvents.events.down, SELECTORS.MESSAGE,\n                this._selectNextMessage.bind(this));\n\n            this.messageArea.onDelegateEvent('focus', SELECTORS.SENDMESSAGETEXT, this._setMessaging.bind(this));\n            this.messageArea.onDelegateEvent('blur', SELECTORS.SENDMESSAGETEXT, this._clearMessaging.bind(this));\n\n            $(document).on(AutoRows.events.ROW_CHANGE, this._adjustMessagesAreaHeight.bind(this));\n\n            // Check if any messages have been displayed on page load.\n            var messages = this.messageArea.find(SELECTORS.MESSAGES);\n            if (messages.length) {\n                this._addScrollEventListener(messages.find(SELECTORS.MESSAGE).length);\n                this._latestMessageTimestamp = messages.find(SELECTORS.MESSAGE + ':last').data('timecreated');\n            }\n\n            // Create a timer to poll the server for new messages.\n            this._backoffTimer = new BackOffTimer(this._loadNewMessages.bind(this),\n                BackOffTimer.getIncrementalCallback(this.messageArea.pollmin * MILLISECONDSINSEC, MILLISECONDSINSEC,\n                    this.messageArea.pollmax * MILLISECONDSINSEC, this.messageArea.polltimeout * MILLISECONDSINSEC));\n\n            // Start the timer.\n            this._backoffTimer.start();\n        };\n\n        /**\n         * View the message panel.\n         *\n         * @param {Event} event\n         * @param {int} userid\n         * @return {Promise} The promise resolved when the messages have been loaded.\n         * @private\n         */\n        Messages.prototype._viewMessages = function(event, userid) {\n            // We are viewing another user, or re-loading the panel, so set number of messages displayed to 0.\n            this._numMessagesDisplayed = 0;\n            // Stop the existing timer so we can set up the new user's messages.\n            this._backoffTimer.stop();\n            // Reset the latest timestamp when we change the messages view.\n            this._latestMessageTimestamp = 0;\n\n            // Mark all the messages as read.\n            var markMessagesAsRead = Ajax.call([{\n                methodname: 'core_message_mark_all_messages_as_read',\n                args: {\n                    useridto: this.messageArea.getCurrentUserId(),\n                    useridfrom: userid\n                }\n            }]);\n\n            // Keep track of the number of messages received.\n            var numberreceived = 0;\n            // Show loading template.\n            return Templates.render('core/loading', {}).then(function(html, js) {\n                Templates.replaceNodeContents(this.messageArea.find(SELECTORS.MESSAGESAREA), html, js);\n                return markMessagesAsRead[0];\n            }.bind(this)).then(function() {\n                var conversationnode = this.messageArea.find(SELECTORS.CONVERSATIONS + \" \" +\n                    SELECTORS.CONTACT + \"[data-userid='\" + userid + \"']\");\n                if (conversationnode.hasClass('unread')) {\n                    // Remove the class.\n                    conversationnode.removeClass('unread');\n                    // Trigger an event letting the notification popover (and whoever else) know.\n                    $(document).trigger('messagearea:conversationselected', userid);\n                }\n                return this._getMessages(userid);\n            }.bind(this)).then(function(data) {\n                numberreceived = data.messages.length;\n                // We have the data - lets render the template with it.\n                return Templates.render('core_message/message_area_messages_area', data);\n            }).then(function(html, js) {\n                Templates.replaceNodeContents(this.messageArea.find(SELECTORS.MESSAGESAREA), html, js);\n                this._addScrollEventListener(numberreceived);\n                // Restart the poll timer.\n                this._backoffTimer.restart();\n                this.messageArea.find(SELECTORS.SENDMESSAGETEXT).focus();\n            }.bind(this)).fail(Notification.exception);\n        };\n\n        /**\n         * Loads messages while scrolling.\n         *\n         * @return {Promise|boolean} The promise resolved when the messages have been loaded.\n         * @private\n         */\n        Messages.prototype._loadMessages = function() {\n            if (this._isLoadingMessages) {\n                return false;\n            }\n\n            this._isLoadingMessages = true;\n\n            // Keep track of the number of messages received.\n            var numberreceived = 0;\n            // Show loading template.\n            return Templates.render('core/loading', {}).then(function(html, js) {\n                Templates.prependNodeContents(this.messageArea.find(SELECTORS.MESSAGES),\n                    \"<div style='text-align:center'>\" + html + \"</div>\", js);\n                return this._getMessages(this._getUserId());\n            }.bind(this)).then(function(data) {\n                numberreceived = data.messages.length;\n                // We have the data - lets render the template with it.\n                return Templates.render('core_message/message_area_messages', data);\n            }).then(function(html, js) {\n                // Remove the loading icon.\n                this.messageArea.find(SELECTORS.MESSAGES + \" \" +\n                    SELECTORS.LOADINGICON).remove();\n                // Check if we got something to do.\n                if (numberreceived > 0) {\n                    var newHtml = $('<div>' + html + '</div>');\n                    if (this._hasMatchingBlockTime(this.messageArea.node, newHtml, true)) {\n                        this.messageArea.node.find(SELECTORS.BLOCKTIME + ':first').remove();\n                    }\n                    // Get height before we add the messages.\n                    var oldheight = this.messageArea.find(SELECTORS.MESSAGES)[0].scrollHeight;\n                    // Show the new content.\n                    Templates.prependNodeContents(this.messageArea.find(SELECTORS.MESSAGES), html, js);\n                    // Get height after we add the messages.\n                    var newheight = this.messageArea.find(SELECTORS.MESSAGES)[0].scrollHeight;\n                    // Make sure scroll bar is at the location before we loaded more messages.\n                    this.messageArea.find(SELECTORS.MESSAGES).scrollTop(newheight - oldheight);\n                    // Increment the number of messages displayed.\n                    this._numMessagesDisplayed += numberreceived;\n                }\n                // Mark that we are no longer busy loading data.\n                this._isLoadingMessages = false;\n            }.bind(this)).fail(Notification.exception);\n        };\n\n        /**\n         * Loads and renders messages newer than the most recently seen messages.\n         *\n         * @return {Promise|boolean} The promise resolved when the messages have been loaded.\n         * @private\n         */\n        Messages.prototype._loadNewMessages = function() {\n            if (this._isLoadingMessages) {\n                return false;\n            }\n\n            // If we have no user id yet then bail early.\n            if (!this._getUserId()) {\n                return false;\n            }\n\n            this._isLoadingMessages = true;\n\n            // Only scroll the message window if the user hasn't scrolled up.\n            var shouldScrollBottom = false;\n            var messages = this.messageArea.find(SELECTORS.MESSAGES);\n            if (messages.length !== 0) {\n                var scrollTop = messages.scrollTop();\n                var innerHeight = messages.innerHeight();\n                var scrollHeight = messages[0].scrollHeight;\n\n                if (scrollTop + innerHeight >= scrollHeight) {\n                    shouldScrollBottom = true;\n                }\n            }\n\n            // Keep track of the number of messages received.\n            return this._getMessages(this._getUserId(), true).then(function(data) {\n                return this._addMessagesToDom(data.messages, shouldScrollBottom);\n            }.bind(this)).always(function() {\n                // Mark that we are no longer busy loading data.\n                this._isLoadingMessages = false;\n            }.bind(this)).fail(Notification.exception);\n        };\n\n        /**\n         * Handles returning a list of messages to display.\n         *\n         * @param {int} userid\n         * @param {bool} fromTimestamp Load messages from the latest known timestamp\n         * @return {Promise} The promise resolved when the contact area has been rendered\n         * @private\n         */\n        Messages.prototype._getMessages = function(userid, fromTimestamp) {\n            var args = {\n                currentuserid: this.messageArea.getCurrentUserId(),\n                otheruserid: userid,\n                limitfrom: this._numMessagesDisplayed,\n                limitnum: this._numMessagesToRetrieve,\n                newest: true\n            };\n\n            // If we're trying to load new messages since the message UI was\n            // rendered. Used for ajax polling while user is on the message UI.\n            if (fromTimestamp) {\n                args.timefrom = this._latestMessageTimestamp;\n                // Remove limit and offset. We want all new messages.\n                args.limitfrom = 0;\n                args.limitnum = 0;\n            }\n\n            // Call the web service to get our data.\n            var promises = Ajax.call([{\n                methodname: 'core_message_data_for_messagearea_messages',\n                args: args,\n            }]);\n\n            // Do stuff when we get data back.\n            return promises[0].then(function(data) {\n                var messages = data.messages;\n\n                // Did we get any new messages?\n                if (messages && messages.length) {\n                    var latestMessage = messages[messages.length - 1];\n\n                    // Update our record of the latest known message for future requests.\n                    if (latestMessage.timecreated > this._latestMessageTimestamp) {\n                        // Next request should be for the second after the most recent message we've seen.\n                        this._latestMessageTimestamp = latestMessage.timecreated + 1;\n                    }\n                }\n\n                return data;\n            }.bind(this)).fail(function(ex) {\n                // Stop the timer if we received an error so that we don't keep spamming the server.\n                this._backoffTimer.stop();\n                Notification.exception(ex);\n            }.bind(this));\n        };\n\n        /**\n         * Handles sending a message.\n         *\n         * @return {Promise|boolean} The promise resolved once the message has been sent.\n         * @private\n         */\n        Messages.prototype._sendMessage = function() {\n            var element = this.messageArea.find(SELECTORS.SENDMESSAGETEXT);\n            var text = element.val().trim();\n\n            // Do not do anything if it is empty.\n            if (text === '') {\n                return false;\n            }\n\n            // If we are sending a message, don't do anything, be patient!\n            if (this._isSendingMessage) {\n                return false;\n            }\n\n            // Ok, mark that we are sending a message.\n            this._isSendingMessage = true;\n\n            // Call the web service to save our message.\n            var promises = Ajax.call([{\n                methodname: 'core_message_send_instant_messages',\n                args: {\n                    messages: [\n                        {\n                            touserid: this._getUserId(),\n                            text: text\n                        }\n                    ]\n                }\n            }]);\n\n            element.prop('disabled', true);\n\n            // Update the DOM when we get some data back.\n            return promises[0].then(function(response) {\n                if (response.length < 0) {\n                    // Even errors should return valid data.\n                    throw new Error('Invalid response');\n                }\n                if (response[0].errormessage) {\n                    throw new Error(response[0].errormessage);\n                }\n                // Fire an event to say the message was sent.\n                this.messageArea.trigger(Events.MESSAGESENT, [this._getUserId(), text]);\n                // Update the messaging area.\n                return this._addLastMessageToDom();\n            }.bind(this)).then(function() {\n                // Ok, we are no longer sending a message.\n                this._isSendingMessage = false;\n            }.bind(this)).always(function() {\n                element.prop('disabled', false);\n                element.focus();\n            }).fail(Notification.exception);\n        };\n\n        /**\n         * Handles selecting messages to delete.\n         *\n         * @private\n         */\n        Messages.prototype._chooseMessagesToDelete = function() {\n            this.messageArea.find(SELECTORS.MESSAGESAREA).addClass('editing');\n            this.messageArea.find(SELECTORS.MESSAGE)\n                .attr('role', 'checkbox')\n                .attr('aria-checked', 'false');\n        };\n\n        /**\n         * Handles deleting messages.\n         *\n         * @private\n         */\n        Messages.prototype._deleteMessages = function() {\n            var userid = this.messageArea.getCurrentUserId();\n            var checkboxes = this.messageArea.find(SELECTORS.MESSAGE + \"[aria-checked='true']\");\n            var requests = [];\n            var messagestoremove = [];\n\n            // Go through all the checked checkboxes and prepare them for deletion.\n            checkboxes.each(function(id, element) {\n                var node = $(element);\n                var messageid = node.data('messageid');\n                var isread = node.data('messageread') ? 1 : 0;\n                messagestoremove.push(node);\n                requests.push({\n                    methodname: 'core_message_delete_message',\n                    args: {\n                        messageid: messageid,\n                        userid: userid,\n                        read: isread\n                    }\n                });\n            });\n            if (requests.length > 0) {\n                $.when(Ajax.call(requests)).then(function() {\n                    // Store the last message on the page, and the last message being deleted.\n                    var updatemessage = null;\n                    var messages = this.messageArea.find(SELECTORS.MESSAGE);\n                    var lastmessage = messages.last();\n                    var lastremovedmessage = messagestoremove[messagestoremove.length - 1];\n                    // Remove the messages from the DOM.\n                    $.each(messagestoremove, function(key, message) {\n                        // Remove the message.\n                        message.remove();\n                    });\n                    // If the last message was deleted then we need to provide the new last message.\n                    if (lastmessage.data('id') === lastremovedmessage.data('id')) {\n                        updatemessage = this.messageArea.find(SELECTORS.MESSAGE).last();\n                    }\n                    // Now we have removed all the messages from the DOM lets remove any block times we may need to as well.\n                    $.each(messagestoremove, function(key, message) {\n                        // First - let's make sure there are no more messages in that time block.\n                        var blocktime = message.data('blocktime');\n                        if (this.messageArea.find(SELECTORS.MESSAGE +\n                            \"[data-blocktime='\" + blocktime + \"']\").length === 0) {\n                            this.messageArea.find(SELECTORS.BLOCKTIME +\n                                \"[data-blocktime='\" + blocktime + \"']\").remove();\n                        }\n                    }.bind(this));\n\n                    // If there are no messages at all, then remove conversation panel.\n                    if (this.messageArea.find(SELECTORS.MESSAGE).length === 0) {\n                        this.messageArea.find(SELECTORS.CONVERSATIONS + \" \" +\n                            SELECTORS.CONTACT + \"[data-userid='\" + this._getUserId() + \"']\").remove();\n                    }\n\n                    // Trigger event letting other modules know messages were deleted.\n                    this.messageArea.trigger(Events.MESSAGESDELETED, [this._getUserId(), updatemessage]);\n                }.bind(this)).catch(Notification.exception);\n            } else {\n                // Trigger event letting other modules know messages were deleted.\n                this.messageArea.trigger(Events.MESSAGESDELETED, this._getUserId());\n            }\n\n            // Hide the items responsible for deleting messages.\n            this._hideDeleteAction();\n        };\n\n        /**\n         * Handles adding a scrolling event listener.\n         *\n         * @param {int} numberreceived The number of messages received\n         * @private\n         */\n        Messages.prototype._addScrollEventListener = function(numberreceived) {\n            // Scroll to the bottom.\n            this._scrollBottom();\n            // Set the number of messages displayed.\n            this._numMessagesDisplayed = numberreceived;\n            // Now enable the ability to infinitely scroll through messages.\n            CustomEvents.define(this.messageArea.find(SELECTORS.MESSAGES), [\n                CustomEvents.events.scrollTop\n            ]);\n            // Assign the event for scrolling.\n            this.messageArea.onCustomEvent(CustomEvents.events.scrollTop, this._loadMessages.bind(this));\n        };\n\n        /**\n         * Handles deleting a conversation.\n         *\n         * @private\n         */\n        Messages.prototype._deleteAllMessages = function() {\n            if (this._confirmationModal) {\n                // Just show the existing modal.\n                this._confirmationModal.show();\n                return;\n            }\n\n            var stringsPromise = Str.get_strings([\n                {key: 'confirm'},\n                {key: 'deleteallconfirm', component: 'message'},\n                {key: 'delete'}\n            ]);\n            var deleteModalPromise = ModalFactory.create(\n                {\n                    type: ModalFactory.types.SAVE_CANCEL\n                },\n                this.messageArea.find(SELECTORS.DELETEALLMESSAGES)\n            );\n\n            $.when(stringsPromise, deleteModalPromise).then(function(s, modal) {\n                modal.setTitle(s[0]);\n                modal.setBody(s[1]);\n                modal.setSaveButtonText(s[2]);\n\n                this._confirmationModal = modal;\n                // Only delete the conversation if the user agreed in the confirmation modal.\n                modal.getRoot().on(ModalEvents.save, function() {\n                    var otherUserId = this._getUserId();\n                    var request = {\n                        methodname: 'core_message_delete_conversation',\n                        args: {\n                            userid: this.messageArea.getCurrentUserId(),\n                            otheruserid: otherUserId\n                        }\n                    };\n\n                    // Delete the conversation.\n                    Ajax.call([request])[0].then(function() {\n                        // Clear the message area.\n                        this.messageArea.find(SELECTORS.MESSAGESAREA).empty();\n                        // Let the app know a conversation was deleted.\n                        this.messageArea.trigger(Events.CONVERSATIONDELETED, otherUserId);\n                        this._hideDeleteAction();\n                    }.bind(this)).catch(Notification.exception);\n                }.bind(this));\n\n                // Display the confirmation.\n                modal.show();\n            }.bind(this)).catch(Notification.exception);\n        };\n\n        /**\n         * Handles hiding the delete checkboxes and replacing the response area.\n         *\n         * @private\n         */\n        Messages.prototype._hideDeleteAction = function() {\n            this.messageArea.find(SELECTORS.MESSAGE)\n                .removeAttr('role')\n                .removeAttr('aria-checked');\n            this.messageArea.find(SELECTORS.MESSAGESAREA).removeClass('editing');\n        };\n\n        /**\n         * Triggers the CANCELDELETEMESSAGES event.\n         *\n         * @private\n         */\n        Messages.prototype._triggerCancelMessagesToDelete = function() {\n            // Trigger event letting other modules know message deletion was canceled.\n            this.messageArea.trigger(Events.CANCELDELETEMESSAGES);\n        };\n\n        /**\n         * Handles adding messages to the DOM.\n         *\n         * @param {array} messages An array of messages to be added to the DOM.\n         * @param {boolean} shouldScrollBottom True will scroll to the bottom of the message window and show the new messages.\n         * @return {Promise} The promise resolved when the messages have been added to the DOM.\n         * @private\n         */\n        Messages.prototype._addMessagesToDom = function(messages, shouldScrollBottom) {\n            var numberreceived = 0;\n            var messagesArea = this.messageArea.find(SELECTORS.MESSAGES);\n            messages = messages.filter(function(message) {\n                var id = \"\" + message.id + message.isread;\n                // If the message is already queued to be rendered, remove from the list of messages.\n                if (this._messageQueue[id]) {\n                    return false;\n                }\n                // Filter out any messages already rendered.\n                var result = messagesArea.find(SELECTORS.MESSAGE + '[data-id=\"' + id + '\"]');\n                // Any message we are rendering should go in the messageQueue.\n                if (!result.length) {\n                    this._messageQueue[id] = true;\n                }\n                return !result.length;\n            }.bind(this));\n            numberreceived = messages.length;\n            // We have the data - lets render the template with it.\n            return Templates.render('core_message/message_area_messages', {messages: messages}).then(function(html, js) {\n                // Check if we got something to do.\n                if (numberreceived > 0) {\n                    var newHtml = $('<div>' + html + '</div>');\n                    if (this._hasMatchingBlockTime(this.messageArea.node, newHtml, false)) {\n                        newHtml.find(SELECTORS.BLOCKTIME + ':first').remove();\n                    }\n                    // Show the new content.\n                    Templates.appendNodeContents(this.messageArea.find(SELECTORS.MESSAGES), newHtml, js);\n                    // Scroll the new message into view.\n                    if (shouldScrollBottom) {\n                        this._scrollBottom();\n                    }\n                    // Increment the number of messages displayed.\n                    this._numMessagesDisplayed += numberreceived;\n                    // Reset the poll timer because the user may be active.\n                    this._backoffTimer.restart();\n                }\n            }.bind(this));\n        };\n\n        /**\n         * Handles adding the last message to the DOM.\n         *\n         * @return {Promise} The promise resolved when the message has been added to the DOM.\n         * @private\n         */\n        Messages.prototype._addLastMessageToDom = function() {\n            // Call the web service to return how the message should look.\n            var promises = Ajax.call([{\n                methodname: 'core_message_data_for_messagearea_get_most_recent_message',\n                args: {\n                    currentuserid: this.messageArea.getCurrentUserId(),\n                    otheruserid: this._getUserId()\n                }\n            }]);\n\n            // Add the message.\n            return promises[0].then(function(data) {\n                return this._addMessagesToDom([data], true);\n            }.bind(this)).always(function() {\n                // Empty the response text area.text\n                this.messageArea.find(SELECTORS.SENDMESSAGETEXT).val('').trigger('input');\n            }.bind(this)).fail(Notification.exception);\n        };\n\n        /**\n         * Returns the ID of the other user in the conversation.\n         *\n         * @return {int} The user id\n         * @private\n         */\n        Messages.prototype._getUserId = function() {\n            return this.messageArea.find(SELECTORS.MESSAGES).data('userid');\n        };\n\n        /**\n         * Scrolls to the bottom of the messages.\n         *\n         * @private\n         */\n        Messages.prototype._scrollBottom = function() {\n            // Scroll to the bottom.\n            var messages = this.messageArea.find(SELECTORS.MESSAGES);\n            if (messages.length !== 0) {\n                messages.scrollTop(messages[0].scrollHeight);\n            }\n        };\n\n        /**\n         * Select the previous message in the list.\n         *\n         * @param {event} e The jquery event\n         * @param {object} data Extra event data\n         * @private\n         */\n        Messages.prototype._selectPreviousMessage = function(e, data) {\n            var currentMessage = $(e.target).closest(SELECTORS.MESSAGE);\n\n            do {\n                currentMessage = currentMessage.prev();\n            } while (currentMessage.length && !currentMessage.is(SELECTORS.MESSAGE));\n\n            currentMessage.focus();\n\n            data.originalEvent.preventDefault();\n            data.originalEvent.stopPropagation();\n        };\n\n        /**\n         * Select the next message in the list.\n         *\n         * @param {event} e The jquery event\n         * @param {object} data Extra event data\n         * @private\n         */\n        Messages.prototype._selectNextMessage = function(e, data) {\n            var currentMessage = $(e.target).closest(SELECTORS.MESSAGE);\n\n            do {\n                currentMessage = currentMessage.next();\n            } while (currentMessage.length && !currentMessage.is(SELECTORS.MESSAGE));\n\n            currentMessage.focus();\n\n            data.originalEvent.preventDefault();\n            data.originalEvent.stopPropagation();\n        };\n\n        /**\n         * Flag the response area as messaging.\n         *\n         * @param {event} e The jquery event\n         * @private\n         */\n        Messages.prototype._setMessaging = function(e) {\n            $(e.target).closest(SELECTORS.MESSAGERESPONSE).addClass('messaging');\n        };\n\n        /**\n         * Clear the response area as messaging flag.\n         *\n         * @param {event} e The jquery event\n         * @private\n         */\n        Messages.prototype._clearMessaging = function(e) {\n            $(e.target).closest(SELECTORS.MESSAGERESPONSE).removeClass('messaging');\n        };\n\n        /**\n         * Turn on delete message mode.\n         *\n         * @param {event} e The jquery event\n         * @private\n         */\n        Messages.prototype._startDeleting = function(e) {\n            var actions = new Actions(this.messageArea);\n            actions.chooseMessagesToDelete();\n\n            e.preventDefault();\n        };\n\n        /**\n         * Check if the message area is in editing mode.\n         *\n         * @return {bool}\n         * @private\n         */\n        Messages.prototype._isEditing = function() {\n            return this.messageArea.find(SELECTORS.MESSAGESAREA).hasClass('editing');\n        };\n\n        /**\n         * Check or uncheck the message if the message area is in editing mode.\n         *\n         * @param {event} e The jquery event\n         * @private\n         */\n        Messages.prototype._toggleMessage = function(e) {\n            if (!this._isEditing()) {\n                return;\n            }\n\n            var message = $(e.target).closest(SELECTORS.MESSAGE);\n\n            if (message.attr('aria-checked') === 'true') {\n                message.attr('aria-checked', 'false');\n            } else {\n                message.attr('aria-checked', 'true');\n            }\n        };\n\n        /**\n         * Adjust the height of the messages area to match the changed height of\n         * the response area.\n         *\n         * @private\n         */\n        Messages.prototype._adjustMessagesAreaHeight = function() {\n            var messagesArea = this.messageArea.find(SELECTORS.MESSAGES);\n            var messagesResponse = this.messageArea.find(SELECTORS.MESSAGERESPONSE);\n\n            var currentMessageResponseHeight = messagesResponse.outerHeight();\n            var diffResponseHeight = currentMessageResponseHeight - MESSAGES_RESPONSE_DEFAULT_HEIGHT;\n            var newMessagesAreaHeight = MESSAGES_AREA_DEFAULT_HEIGHT - diffResponseHeight;\n\n            messagesArea.outerHeight(newMessagesAreaHeight);\n        };\n\n        /**\n         * Handle the event that triggers sending a message from the messages area.\n         *\n         * @param {event} e The jquery event\n         * @param {object} data Additional event data\n         * @private\n         */\n        Messages.prototype._sendMessageHandler = function(e, data) {\n            data.originalEvent.preventDefault();\n\n            this._sendMessage();\n        };\n\n        /**\n         * Hide the messaging area. This only applies on smaller screen resolutions.\n         *\n         * @private\n         */\n        Messages.prototype._hideMessagingArea = function() {\n            this.messageArea.find(SELECTORS.MESSAGINGAREA)\n                .removeClass('show-messages')\n                .addClass('hide-messages');\n        };\n\n        /**\n         * Checks if a day separator needs to be removed.\n         *\n         * Example - scrolling up and loading previous messages that belong to the\n         * same day as the last message that was previously shown, meaning we can\n         * remove the original separator.\n         *\n         * @param {jQuery} domHtml The HTML in the DOM.\n         * @param {jQuery} newHtml The HTML to compare to the DOM\n         * @param {boolean} loadingPreviousMessages Are we loading previous messages?\n         * @return {boolean}\n         * @private\n         */\n        Messages.prototype._hasMatchingBlockTime = function(domHtml, newHtml, loadingPreviousMessages) {\n            var blockTime, blockTimePos, newBlockTime, newBlockTimePos;\n\n            if (loadingPreviousMessages) {\n                blockTimePos = ':first';\n                newBlockTimePos = ':last';\n            } else {\n                blockTimePos = ':last';\n                newBlockTimePos = ':first';\n            }\n\n            blockTime = domHtml.find(SELECTORS.BLOCKTIME + blockTimePos);\n            newBlockTime = newHtml.find(SELECTORS.BLOCKTIME + newBlockTimePos);\n\n            if (blockTime.length && newBlockTime.length) {\n                return blockTime.data('blocktime') == newBlockTime.data('blocktime');\n            }\n\n            return false;\n        };\n\n        return Messages;\n    }\n);\n"]}