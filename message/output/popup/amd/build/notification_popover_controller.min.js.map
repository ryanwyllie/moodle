{"version":3,"sources":["../src/notification_popover_controller.js"],"names":["define","$","Ajax","Templates","Str","URL","DebugNotification","CustomEvents","PopoverController","NotificationRepo","NotificationAreaEvents","SELECTORS","MARK_ALL_READ_BUTTON","ALL_NOTIFICATIONS_CONTAINER","NOTIFICATION","UNREAD_NOTIFICATION","NOTIFICATION_LINK","EMPTY_MESSAGE","COUNT_CONTAINER","NotificationPopoverController","element","call","markAllReadButton","root","find","unreadCount","userId","attr","container","limit","offset","loadedAll","initialLoad","html","prototype","Object","create","constructor","updateButtonAriaLabel","isMenuOpen","get_string","done","string","menuToggle","bind","getContent","getOffset","incrementOffset","hasDoneInitialLoad","hasLoadedAllContent","setLoadedAllContent","val","renderUnreadCount","text","removeClass","addClass","hideUnreadCount","getNotificationElement","id","length","renderNotifications","notifications","promises","each","index","notification","viewmoreurl","relativeUrl","notificationid","notificationurlparams","contexturl","redirecturl","promise","render","then","js","push","when","apply","arguments","argument","append","runTemplateJS","loadMoreNotifications","isLoading","Deferred","resolve","startLoading","request","useridto","query","result","unreadcount","always","stopLoading","markAllAsRead","registerEventListeners","events","activate","on","e","data","stopPropagation","originalEvent","preventDefault","target","closest","hasClass","menuOpened","menuClosed","getContentContainer","scrollBottom","scrollLock","document","notificationShown","read"],"mappings":"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","file":"notification_popover_controller.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the notification popover in the nav bar.\n *\n * See template: message_popup/notification_popover\n *\n * @module     message_popup/notification_popover_controller\n * @class      notification_popover_controller\n * @package    message_popup\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/ajax', 'core/templates', 'core/str', 'core/url',\n            'core/notification', 'core/custom_interaction_events', 'core/popover_region_controller',\n            'message_popup/notification_repository', 'message_popup/notification_area_events'],\n        function($, Ajax, Templates, Str, URL, DebugNotification, CustomEvents,\n            PopoverController, NotificationRepo, NotificationAreaEvents) {\n\n    var SELECTORS = {\n        MARK_ALL_READ_BUTTON: '[data-action=\"mark-all-read\"]',\n        ALL_NOTIFICATIONS_CONTAINER: '[data-region=\"all-notifications\"]',\n        NOTIFICATION: '[data-region=\"notification-content-item-container\"]',\n        UNREAD_NOTIFICATION: '[data-region=\"notification-content-item-container\"].unread',\n        NOTIFICATION_LINK: '[data-action=\"content-item-link\"]',\n        EMPTY_MESSAGE: '[data-region=\"empty-message\"]',\n        COUNT_CONTAINER: '[data-region=\"count-container\"]',\n    };\n\n    /**\n     * Constructor for the NotificationPopoverController.\n     * Extends PopoverRegionController.\n     *\n     * @param {object} element jQuery object root element of the popover\n     */\n    var NotificationPopoverController = function(element) {\n        // Initialise base class.\n        PopoverController.call(this, element);\n\n        this.markAllReadButton = this.root.find(SELECTORS.MARK_ALL_READ_BUTTON);\n        this.unreadCount = 0;\n        this.userId = this.root.attr('data-userid');\n        this.container = this.root.find(SELECTORS.ALL_NOTIFICATIONS_CONTAINER);\n        this.limit = 20;\n        this.offset = 0;\n        this.loadedAll = false;\n        this.initialLoad = false;\n\n        // Let's find out how many unread notifications there are.\n        this.unreadCount = this.root.find(SELECTORS.COUNT_CONTAINER).html();\n    };\n\n    /**\n     * Clone the parent prototype.\n     */\n    NotificationPopoverController.prototype = Object.create(PopoverController.prototype);\n\n    /**\n     * Make sure the constructor is set correctly.\n     */\n    NotificationPopoverController.prototype.constructor = NotificationPopoverController;\n\n    /**\n     * Set the correct aria label on the menu toggle button to be read out by screen\n     * readers. The message will indicate the state of the unread notifications.\n     *\n     * @method updateButtonAriaLabel\n     */\n    NotificationPopoverController.prototype.updateButtonAriaLabel = function() {\n        if (this.isMenuOpen()) {\n            Str.get_string('hidenotificationwindow', 'message').done(function(string) {\n                this.menuToggle.attr('aria-label', string);\n            }.bind(this));\n        } else {\n            if (this.unreadCount) {\n                Str.get_string('shownotificationwindowwithcount', 'message', this.unreadCount).done(function(string) {\n                    this.menuToggle.attr('aria-label', string);\n                }.bind(this));\n            } else {\n                Str.get_string('shownotificationwindownonew', 'message').done(function(string) {\n                    this.menuToggle.attr('aria-label', string);\n                }.bind(this));\n            }\n        }\n    };\n\n    /**\n     * Return the jQuery element with the content. This will return either\n     * the unread notification container or the all notification container\n     * depending on which is currently visible.\n     *\n     * @method getContent\n     * @return {object} jQuery object currently visible content contianer\n     */\n    NotificationPopoverController.prototype.getContent = function() {\n        return this.container;\n    };\n\n    /**\n     * Get the offset value for the current state of the popover in order\n     * to sent to the backend to correctly paginate the notifications.\n     *\n     * @method getOffset\n     * @return {int} current offset\n     */\n    NotificationPopoverController.prototype.getOffset = function() {\n        return this.offset;\n    };\n\n    /**\n     * Increment the offset for the current state, if required.\n     *\n     * @method incrementOffset\n     */\n    NotificationPopoverController.prototype.incrementOffset = function() {\n        this.offset += this.limit;\n    };\n\n    /**\n     * Check if the first load of notification has been triggered for the current\n     * state of the popover.\n     *\n     * @method hasDoneInitialLoad\n     * @return {bool} true if first notification loaded, false otherwise\n     */\n    NotificationPopoverController.prototype.hasDoneInitialLoad = function() {\n        return this.initialLoad;\n    };\n\n    /**\n     * Check if we've loaded all of the notifications for the current popover\n     * state.\n     *\n     * @method hasLoadedAllContent\n     * @return {bool} true if all notifications loaded, false otherwise\n     */\n    NotificationPopoverController.prototype.hasLoadedAllContent = function() {\n        return this.loadedAll;\n    };\n\n    /**\n     * Set the state of the loaded all content property for the current state\n     * of the popover.\n     *\n     * @method setLoadedAllContent\n     * @param {bool} val True if all content is loaded, false otherwise\n     */\n    NotificationPopoverController.prototype.setLoadedAllContent = function(val) {\n        this.loadedAll = val;\n    };\n\n    /**\n     * Show the unread notification count badge on the menu toggle if there\n     * are unread notifications, otherwise hide it.\n     *\n     * @method renderUnreadCount\n     */\n    NotificationPopoverController.prototype.renderUnreadCount = function() {\n        var element = this.root.find(SELECTORS.COUNT_CONTAINER);\n\n        if (this.unreadCount) {\n            element.text(this.unreadCount);\n            element.removeClass('hidden');\n        } else {\n            element.addClass('hidden');\n        }\n    };\n\n    /**\n     * Hide the unread notification count badge on the menu toggle.\n     *\n     * @method hideUnreadCount\n     */\n    NotificationPopoverController.prototype.hideUnreadCount = function() {\n        this.root.find(SELECTORS.COUNT_CONTAINER).addClass('hidden');\n    };\n\n    /**\n     * Find the notification element for the given id.\n     *\n     * @param {int} id\n     * @method getNotificationElement\n     * @return {object|null} The notification element\n     */\n    NotificationPopoverController.prototype.getNotificationElement = function(id) {\n        var element = this.root.find(SELECTORS.NOTIFICATION + '[data-id=\"' + id + '\"]');\n        return element.length == 1 ? element : null;\n    };\n\n    /**\n     * Render the notification data with the appropriate template and add it to the DOM.\n     *\n     * @method renderNotifications\n     * @param {array} notifications Notification data\n     * @param {object} container jQuery object the container to append the rendered notifications\n     * @return {object} jQuery promise that is resolved when all notifications have been\n     *                  rendered and added to the DOM\n     */\n    NotificationPopoverController.prototype.renderNotifications = function(notifications, container) {\n        var promises = [];\n\n        $.each(notifications, function(index, notification) {\n            // Determine what the offset was when loading this notification.\n            var offset = this.getOffset() - this.limit;\n            // Update the view more url to contain the offset to allow the notifications\n            // page to load to the correct position in the list of notifications.\n            notification.viewmoreurl = URL.relativeUrl('/message/output/popup/notifications.php', {\n                notificationid: notification.id,\n                offset: offset,\n            });\n\n            // Link to mark read page before loading the actual link.\n            var notificationurlparams = {\n                notificationid: notification.id\n            };\n            if (notification.contexturl) {\n                notificationurlparams.redirecturl = notification.contexturl;\n            }\n            notification.contexturl = URL.relativeUrl('message/output/popup/mark_notification_read.php', notificationurlparams);\n\n            var promise = Templates.render('message_popup/notification_content_item', notification)\n            .then(function(html, js) {\n                return {html: html, js: js};\n            });\n            promises.push(promise);\n        }.bind(this));\n\n        return $.when.apply($, promises).then(function() {\n            // Each of the promises in the when will pass its results as an argument to the function.\n            // The order of the arguments will be the order that the promises are passed to when()\n            // i.e. the first promise's results will be in the first argument.\n            $.each(arguments, function(index, argument) {\n                container.append(argument.html);\n                Templates.runTemplateJS(argument.js);\n            });\n            return;\n        });\n    };\n\n    /**\n     * Send a request for more notifications from the server, if we aren't already\n     * loading some and haven't already loaded all of them.\n     *\n     * Takes into account the current mode of the popover and will request only\n     * unread notifications if required.\n     *\n     * All notifications are marked as read by the server when they are returned.\n     *\n     * @method loadMoreNotifications\n     * @return {object} jQuery promise that is resolved when notifications have been\n     *                        retrieved and added to the DOM\n     */\n    NotificationPopoverController.prototype.loadMoreNotifications = function() {\n        if (this.isLoading || this.hasLoadedAllContent()) {\n            return $.Deferred().resolve();\n        }\n\n        this.startLoading();\n        var request = {\n            limit: this.limit,\n            offset: this.getOffset(),\n            useridto: this.userId,\n        };\n\n        var container = this.getContent();\n        return NotificationRepo.query(request).then(function(result) {\n            var notifications = result.notifications;\n            this.unreadCount = result.unreadcount;\n            this.setLoadedAllContent(!notifications.length || notifications.length < this.limit);\n            this.initialLoad = true;\n            this.updateButtonAriaLabel();\n\n            if (notifications.length) {\n                this.incrementOffset();\n                return this.renderNotifications(notifications, container);\n            }\n\n            return false;\n        }.bind(this))\n        .always(function() {\n            this.stopLoading();\n        }.bind(this));\n    };\n\n    /**\n     * Send a request to the server to mark all unread notifications as read and update\n     * the unread count and unread notification elements appropriately.\n     *\n     * @return {Promise}\n     * @method markAllAsRead\n     */\n    NotificationPopoverController.prototype.markAllAsRead = function() {\n        this.markAllReadButton.addClass('loading');\n\n        return NotificationRepo.markAllAsRead({useridto: this.userId})\n            .then(function() {\n                this.unreadCount = 0;\n                this.root.find(SELECTORS.UNREAD_NOTIFICATION).removeClass('unread');\n            }.bind(this))\n            .always(function() {\n                this.markAllReadButton.removeClass('loading');\n            }.bind(this));\n    };\n\n    /**\n     * Add all of the required event listeners for this notification popover.\n     *\n     * @method registerEventListeners\n     */\n    NotificationPopoverController.prototype.registerEventListeners = function() {\n        CustomEvents.define(this.root, [\n            CustomEvents.events.activate,\n        ]);\n\n        // Mark all notifications read if the user activates the mark all as read button.\n        this.root.on(CustomEvents.events.activate, SELECTORS.MARK_ALL_READ_BUTTON, function(e, data) {\n            this.markAllAsRead();\n            e.stopPropagation();\n            data.originalEvent.preventDefault();\n        }.bind(this));\n\n        // Mark individual notification read if the user activates it.\n        this.root.on(CustomEvents.events.activate, SELECTORS.NOTIFICATION_LINK, function(e) {\n            var element = $(e.target).closest(SELECTORS.NOTIFICATION);\n\n            if (element.hasClass('unread')) {\n                this.unreadCount--;\n                element.removeClass('unread');\n            }\n\n            e.stopPropagation();\n        }.bind(this));\n\n        // Update the notification information when the menu is opened.\n        this.root.on(this.events().menuOpened, function() {\n            this.hideUnreadCount();\n            this.updateButtonAriaLabel();\n\n            if (!this.hasDoneInitialLoad()) {\n                this.loadMoreNotifications();\n            }\n        }.bind(this));\n\n        // Update the unread notification count when the menu is closed.\n        this.root.on(this.events().menuClosed, function() {\n            this.renderUnreadCount();\n            this.updateButtonAriaLabel();\n        }.bind(this));\n\n        // Set aria attributes when popover is loading.\n        this.root.on(this.events().startLoading, function() {\n            this.getContent().attr('aria-busy', 'true');\n        }.bind(this));\n\n        // Set aria attributes when popover is finished loading.\n        this.root.on(this.events().stopLoading, function() {\n            this.getContent().attr('aria-busy', 'false');\n        }.bind(this));\n\n        // Load more notifications if the user has scrolled to the end of content\n        // item list.\n        this.getContentContainer().on(CustomEvents.events.scrollBottom, function() {\n            if (!this.isLoading && !this.hasLoadedAllContent()) {\n                this.loadMoreNotifications();\n            }\n        }.bind(this));\n\n        // Stop mouse scroll from propagating to the window element and\n        // scrolling the page.\n        CustomEvents.define(this.getContentContainer(), [\n            CustomEvents.events.scrollLock\n        ]);\n\n        // Listen for when a notification is shown in the notifications page and mark\n        // it as read, if it's unread.\n        $(document).on(NotificationAreaEvents.notificationShown, function(e, notification) {\n            if (!notification.read) {\n                var element = this.getNotificationElement(notification.id);\n\n                if (element) {\n                    element.removeClass('unread');\n                }\n\n                this.unreadCount--;\n                this.renderUnreadCount();\n            }\n        }.bind(this));\n    };\n\n    return NotificationPopoverController;\n});\n"]}