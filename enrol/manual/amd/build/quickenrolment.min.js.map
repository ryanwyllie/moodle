{"version":3,"sources":["../src/quickenrolment.js"],"names":["define","Template","$","Str","Config","Notification","ModalFactory","ModalEvents","Fragment","SELECTORS","COHORTSELECT","TRIGGERBUTTONS","UNWANTEDHIDDENFIELDS","QuickEnrolment","options","contextid","initModal","prototype","courseid","modal","triggerButtons","when","get_strings","key","component","create","type","types","SAVE_CANCEL","large","then","strings","setTitle","setSaveButtonText","getRoot","on","save","submitForm","bind","submitFormAjax","hidden","setBody","shown","bodyPromise","getBody","html","stringIndex","find","length","fail","exception","e","preventDefault","submit","form","each","remove","formData","serialize","hide","script","wwwroot","ajax","processData","contentType","response","error","addNotification","message","window","M","core_formchangechecker","reset_form_dirty_state","location","reload","loadFragment","getFooter","render","init","config"],"mappings":"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","file":"quickenrolment.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Quick enrolment AMD module.\n *\n * @module     enrol_manual/quickenrolment\n * @copyright  2016 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/templates',\n         'jquery',\n         'core/str',\n         'core/config',\n         'core/notification',\n         'core/modal_factory',\n         'core/modal_events',\n         'core/fragment',\n       ],\n       function(Template, $, Str, Config, Notification, ModalFactory, ModalEvents, Fragment) {\n\n    /** @type {Object} The list of selectors for the quick enrolment modal. */\n    var SELECTORS = {\n        COHORTSELECT: \"#id_cohortlist\",\n        TRIGGERBUTTONS: \".enrolusersbutton.enrol_manual_plugin [type='submit']\",\n        UNWANTEDHIDDENFIELDS: \":input[value='_qf__force_multiselect_submission']\"\n    };\n\n    /**\n     * Constructor\n     *\n     * @param {Object} options Object containing options. The only valid option at this time is contextid.\n     * Each call to templates.render gets it's own instance of this class.\n     */\n    var QuickEnrolment = function(options) {\n        this.contextid = options.contextid;\n\n        this.initModal();\n    };\n    // Class variables and functions.\n\n    /** @var {number} courseid - */\n    QuickEnrolment.prototype.courseid = 0;\n\n    /** @var {Modal} modal */\n    QuickEnrolment.prototype.modal = null;\n\n    /**\n     * Private method\n     *\n     * @method initModal\n     * @private\n     */\n    QuickEnrolment.prototype.initModal = function() {\n        var triggerButtons = $(SELECTORS.TRIGGERBUTTONS);\n\n        $.when(\n            Str.get_strings([\n                {key: 'enroluserscohorts', component: 'enrol_manual'},\n                {key: 'enrolusers', component: 'enrol_manual'},\n            ]),\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                large: true,\n            }, triggerButtons)\n        )\n        .then(function(strings, modal) {\n            this.modal = modal;\n\n            modal.setTitle(strings[1]);\n            modal.setSaveButtonText(strings[1]);\n\n            modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n            modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n            // We want the reset the form every time it is opened.\n            modal.getRoot().on(ModalEvents.hidden, function() {\n                modal.setBody('');\n            });\n\n            modal.getRoot().on(ModalEvents.shown, function() {\n                var bodyPromise = this.getBody();\n                bodyPromise.then(function(html) {\n                    var stringIndex = $(html).find(SELECTORS.COHORTSELECT).length ? 0 : 1;\n                    modal.setSaveButtonText(strings[stringIndex]);\n\n                    return;\n                })\n                .fail(Notification.exception);\n\n                modal.setBody(bodyPromise);\n            }.bind(this));\n\n            return;\n        }.bind(this))\n        .fail(Notification.exception);\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    QuickEnrolment.prototype.submitForm = function(e) {\n        e.preventDefault();\n        this.modal.getRoot().find('form').submit();\n    };\n\n    /**\n     * Private method\n     *\n     * @method submitForm\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    QuickEnrolment.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n\n        var form = this.modal.getRoot().find('form');\n\n        // Before send the data through AJAX, we need to parse and remove some unwanted hidden fields.\n        // This hidden fields are added automatically by mforms and when it reaches the AJAX we get an error.\n        var hidden = form.find(SELECTORS.UNWANTEDHIDDENFIELDS);\n        hidden.each(function() {\n            $(this).remove();\n        });\n\n        var formData = form.serialize();\n\n        this.modal.hide();\n\n        var settings = {\n            type: 'GET',\n            processData: false,\n            contentType: \"application/json\"\n        };\n\n        var script = Config.wwwroot + '/enrol/manual/ajax.php?' + formData;\n        $.ajax(script, settings)\n            .then(function(response) {\n\n                if (response.error) {\n                    Notification.addNotification({\n                        message: response.error,\n                        type: \"error\"\n                    });\n                } else {\n                    // Reload the page, don't show changed data warnings.\n                    if (typeof window.M.core_formchangechecker !== \"undefined\") {\n                        window.M.core_formchangechecker.reset_form_dirty_state();\n                    }\n                    window.location.reload();\n                }\n                return;\n            })\n            .fail(Notification.exception);\n    };\n\n    /**\n     * Private method\n     *\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    QuickEnrolment.prototype.getBody = function() {\n        return Fragment.loadFragment('enrol_manual', 'enrol_users_form', this.contextid, {}).fail(Notification.exception);\n    };\n\n    /**\n     * Private method\n     *\n     * @method getFooter\n     * @private\n     * @return {Promise}\n     */\n    QuickEnrolment.prototype.getFooter = function() {\n        return Template.render('enrol_manual/enrol_modal_footer', {});\n    };\n\n    return /** @alias module:enrol_manual/quickenrolment */ {\n        // Public variables and functions.\n        /**\n         * Every call to init creates a new instance of the class with it's own event listeners etc.\n         *\n         * @method init\n         * @public\n         * @param {object} config - config variables for the module.\n         */\n        init: function(config) {\n            (new QuickEnrolment(config));\n        }\n    };\n});\n"]}