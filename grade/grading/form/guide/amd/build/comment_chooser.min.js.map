{"version":3,"sources":["../src/comment_chooser.js"],"names":["define","$","templates","notification","initialise","criterionId","buttonId","remarkId","commentOptions","displayChooserDialog","compiledSource","comments","titleLabel","M","util","get_string","cancelButtonId","cancelButton","chooserDialog","core","dialogue","modal","headerContent","bodyContent","footerContent","focusAfterHide","id","click","hide","each","index","comment","commentOptionId","remarkTextArea","remarkText","val","trim","description","document","off","on","keyCode","event","which","after","e","prevVal","newVal","destroy","show","generateCommentsChooser","render","done","fail","exception","preventDefault"],"mappings":"aAwBAA,2CAAO,CAAC,QAAD,CAAW,gBAAX,CAA6B,mBAA7B,CAAkD,UAAlD,CAAP,CAAsE,SAASC,CAAT,CAAYC,SAAZ,CAAuBC,YAAvB,CAAqC,CAIvG,MAA8D,CAa1DC,WAAY,oBAASC,WAAT,CAAsBC,QAAtB,CAAgCC,QAAhC,CAA0CC,cAA1C,CAA0D,CAQlE,QAASC,qBAAT,CAA8BC,cAA9B,CAA8CC,QAA9C,CAAwD,IAChDC,YAAa,UAAYC,EAAEC,IAAF,CAAOC,UAAP,CAAkB,eAAlB,CAAmC,mBAAnC,CAAZ,CAAsE,UADnC,CAEhDC,eAAiB,mBAAqBX,WAArB,CAAmC,SAFJ,CAGhDY,aAAe,eAAiBD,cAAjB,CAAkC,IAAlC,CAAyCH,EAAEC,IAAF,CAAOC,UAAP,CAAkB,QAAlB,CAA4B,QAA5B,CAAzC,CAAiF,WAHhD,CAMhDG,cAAgB,GAAIL,GAAEM,IAAF,CAAOC,QAAX,CAAoB,CACpCC,QADoC,CAEpCC,cAAeV,UAFqB,CAGpCW,YAAab,cAHuB,CAIpCc,cAAeP,YAJqB,CAKpCQ,eAAgB,IAAMlB,QALc,CAMpCmB,GAAI,2BAA6BrB,WANG,CAApB,CANgC,CAgBpDJ,EAAE,IAAMe,cAAR,EAAwBW,KAAxB,CAA8B,UAAW,CACrCT,cAAcU,IAAd,EACH,CAFD,CAhBoD,CAqBpD3B,EAAE4B,IAAF,CAAOlB,QAAP,CAAiB,SAASmB,KAAT,CAAgBC,OAAhB,CAAyB,CACtC,GAAIC,iBAAkB,mBAAqB3B,WAArB,CAAmC,GAAnC,CAAyC0B,QAAQL,EAAvE,CAGAzB,EAAE+B,eAAF,EAAmBL,KAAnB,CAAyB,UAAW,IAC5BM,gBAAiBhC,EAAE,IAAMM,QAAR,CADW,CAE5B2B,WAAaD,eAAeE,GAAf,EAFe,CAKL,EAAvB,KAAEC,IAAF,CAAOF,UAAP,CAL4B,GAM5BA,YAAc,IANc,EAQhCA,YAAcH,QAAQM,WARU,CAUhCJ,eAAeE,GAAf,CAAmBD,UAAnB,CAVgC,CAYhChB,cAAcU,IAAd,EACH,CAbD,CAJsC,CAoBtC3B,EAAEqC,QAAF,EAAYC,GAAZ,CAAgB,UAAhB,CAA4BP,eAA5B,EAA6CQ,EAA7C,CAAgD,UAAhD,CAA4DR,eAA5D,CAA6E,UAAW,CACpF,GAAIS,SAAUC,MAAMC,KAAN,EAAeD,MAAMD,OAAnC,CADoF,CAIrE,EAAX,WAA4B,EAAX,SAJ+D,GAMhFxC,EAAE+B,eAAF,EAAmBL,KAAnB,EAEP,CARD,CASH,CA7BD,CArBoD,CAsDpDT,cAAc0B,KAAd,CAAoB,eAApB,CAAqC,SAASC,CAAT,CAAY,CAEzCA,EAAEC,OAAF,EAAa,CAACD,EAAEE,MAFyB,EAGzC,KAAKC,OAAL,EAEP,CALD,CAKG9B,aALH,CAtDoD,CA8DpDA,cAAc+B,IAAd,EACH,CAKD,QAASC,wBAAT,EAAmC,CAQ/BhD,UAAUiD,MAAV,CAAiB,mCAAjB,CANc,CACV9C,YAAaA,WADH,CAEVM,SAAUH,cAFA,CAMd,EACK4C,IADL,CACU,SAAS1C,cAAT,CAAyB,CAC3BD,qBAAqBC,cAArB,CAAqCF,cAArC,CACH,CAHL,EAIK6C,IAJL,CAIUlD,aAAamD,SAJvB,CAKH,CAGDrD,EAAE,IAAMK,QAAR,EAAkBqB,KAAlB,CAAwB,SAASkB,CAAT,CAAY,CAChCA,EAAEU,cAAF,EADgC,CAEhCL,yBACH,CAHD,CAIH,CA7GyD,CA+GjE,CAnHD,C","file":"comment_chooser.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD code for the frequently used comments chooser for the marking guide grading form.\n *\n * @module     gradingform_guide/comment_chooser\n * @class      comment_chooser\n * @package    core\n * @copyright  2015 Jun Pataleta <jun@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n  */\ndefine(['jquery', 'core/templates', 'core/notification', 'core/yui'], function($, templates, notification) {\n\n    // Private variables and functions.\n\n    return /** @alias module:gradingform_guide/comment_chooser */ {\n        // Public variables and functions.\n        /**\n         * Initialises the module.\n         *\n         * Basically, it performs the binding and handling of the button click event for\n         * the 'Insert frequently used comment' button.\n         *\n         * @param {Integer} criterionId The criterion ID.\n         * @param {String} buttonId The element ID of the button which the handler will be bound to.\n         * @param {String} remarkId The element ID of the remark text area where the text of the selected comment will be copied to.\n         * @param {Array} commentOptions The array of frequently used comments to be used as options.\n         */\n        initialise: function(criterionId, buttonId, remarkId, commentOptions) {\n            /**\n             * Display the chooser dialog using the compiled HTML from the mustache template\n             * and binds onclick events for the generated comment options.\n             *\n             * @param {String} compiledSource The compiled HTML from the mustache template\n             * @param {Array} comments Array containing comments.\n             */\n            function displayChooserDialog(compiledSource, comments) {\n                var titleLabel = '<label>' + M.util.get_string('insertcomment', 'gradingform_guide') + '</label>';\n                var cancelButtonId = 'comment-chooser-' + criterionId + '-cancel';\n                var cancelButton = '<button id=\"' + cancelButtonId + '\">' + M.util.get_string('cancel', 'moodle') + '</button>';\n\n                // Set dialog's body content.\n                var chooserDialog = new M.core.dialogue({\n                    modal: true,\n                    headerContent: titleLabel,\n                    bodyContent: compiledSource,\n                    footerContent: cancelButton,\n                    focusAfterHide: '#' + remarkId,\n                    id: \"comments-chooser-dialog-\" + criterionId\n                });\n\n                // Bind click event to the cancel button.\n                $(\"#\" + cancelButtonId).click(function() {\n                    chooserDialog.hide();\n                });\n\n                // Loop over each comment item and bind click events.\n                $.each(comments, function(index, comment) {\n                    var commentOptionId = '#comment-option-' + criterionId + '-' + comment.id;\n\n                    // Delegate click event for the generated option link.\n                    $(commentOptionId).click(function() {\n                        var remarkTextArea = $('#' + remarkId);\n                        var remarkText = remarkTextArea.val();\n\n                        // Add line break if the current value of the remark text is not empty.\n                        if ($.trim(remarkText) !== '') {\n                            remarkText += '\\n';\n                        }\n                        remarkText += comment.description;\n\n                        remarkTextArea.val(remarkText);\n\n                        chooserDialog.hide();\n                    });\n\n                    // Handle keypress on list items.\n                    $(document).off('keypress', commentOptionId).on('keypress', commentOptionId, function() {\n                        var keyCode = event.which || event.keyCode;\n\n                        // Enter or space key.\n                        if (keyCode == 13 || keyCode == 32) {\n                            // Trigger click event.\n                            $(commentOptionId).click();\n                        }\n                    });\n                });\n\n                // Destroy the dialog when it is hidden to allow the grading section to\n                // be loaded as a fragment multiple times within the same page.\n                chooserDialog.after('visibleChange', function(e) {\n                    // Going from visible to hidden.\n                    if (e.prevVal && !e.newVal) {\n                        this.destroy();\n                    }\n                }, chooserDialog);\n\n                // Show dialog.\n                chooserDialog.show();\n            }\n\n            /**\n             * Generates the comments chooser dialog from the grading_form/comment_chooser mustache template.\n             */\n            function generateCommentsChooser() {\n                // Template context.\n                var context = {\n                    criterionId: criterionId,\n                    comments: commentOptions\n                };\n\n                // Render the template and display the comment chooser dialog.\n                templates.render('gradingform_guide/comment_chooser', context)\n                    .done(function(compiledSource) {\n                        displayChooserDialog(compiledSource, commentOptions);\n                    })\n                    .fail(notification.exception);\n            }\n\n            // Bind click event for the comments chooser button.\n            $(\"#\" + buttonId).click(function(e) {\n                e.preventDefault();\n                generateCommentsChooser();\n            });\n        }\n    };\n});\n"]}