{"version":3,"sources":["../src/competencytree.js"],"names":["define","ajax","notification","templates","Ariatree","CompOutcomes","$","competencies","competencyFrameworkId","competencyFrameworkShortName","treeSelector","currentNodeId","competencyFramworkCanManage","addChildren","parent","all","i","current","haschildren","children","length","parentid","id","push","loadCompetencies","searchtext","deferred","Deferred","render","done","loadinghtml","loadingjs","replaceNodeContents","promises","call","methodname","args","competencyframeworkid","result","competency","context","shortname","canmanage","html","js","tree","node","find","selectItem","updateFocus","resolve","fail","reject","promise","rememberCurrent","evt","params","selected","attr","init","search","selector","exception","on","eventname","handler","getChildren","each","index","getCompetencyFrameworkId","getCompetency","getCompetencyLevel","level","path","replace","split","hasChildren","hasRule","comp","ruleoutcome","OUTCOME_NONE","ruletype","reloadCompetencies","listCompetencies"],"mappings":"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","file":"competencytree.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handle selection changes on the competency tree.\n *\n * @module     tool_lp/competencyselect\n * @package    tool_lp\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/ajax', 'core/notification', 'core/templates', 'tool_lp/tree', 'tool_lp/competency_outcomes', 'jquery'],\n       function(ajax, notification, templates, Ariatree, CompOutcomes, $) {\n\n    // Private variables and functions.\n    /** @var {Object[]} competencies - Cached list of competencies */\n    var competencies = {};\n\n    /** @var {Number} competencyFrameworkId - The current framework id */\n    var competencyFrameworkId = 0;\n\n    /** @var {String} competencyFrameworkShortName - The current framework short name */\n    var competencyFrameworkShortName = '';\n\n    /** @var {String} treeSelector - The selector for the root of the tree. */\n    var treeSelector = '';\n\n    /** @var {String} currentNodeId - The data-id of the current node in the tree. */\n    var currentNodeId = '';\n\n     /** @var {Boolean} competencyFramworkCanManage - Can manage the competencies framework */\n    var competencyFramworkCanManage = false;\n\n    /**\n     * Build a tree from the flat list of competencies.\n     * @param {Object} parent The parent competency.\n     * @param {Array} all The list of all competencies.\n     */\n    var addChildren = function(parent, all) {\n        var i = 0;\n        var current = false;\n        parent.haschildren = false;\n        parent.children = [];\n        for (i = 0; i < all.length; i++) {\n            current = all[i];\n            if (current.parentid == parent.id) {\n                parent.haschildren = true;\n                parent.children.push(current);\n                addChildren(current, all);\n            }\n        }\n    };\n\n    /**\n     * Load the list of competencies via ajax. Competencies are filtered by the searchtext.\n     * @param {String} searchtext The text to filter on.\n     * @return {promise}\n     */\n    var loadCompetencies = function(searchtext) {\n        var deferred = $.Deferred();\n\n        templates.render('tool_lp/loading', {}).done(function(loadinghtml, loadingjs) {\n            templates.replaceNodeContents($(treeSelector), loadinghtml, loadingjs);\n\n            var promises = ajax.call([{\n                methodname: 'core_competency_search_competencies',\n                args: {\n                    searchtext: searchtext,\n                    competencyframeworkid: competencyFrameworkId\n                }\n            }]);\n            promises[0].done(function(result) {\n                competencies = {};\n                var i = 0;\n                for (i = 0; i < result.length; i++) {\n                    competencies[result[i].id] = result[i];\n                }\n\n                var children = [];\n                var competency = false;\n                for (i = 0; i < result.length; i++) {\n                    competency = result[i];\n                    if (parseInt(competency.parentid, 10) === 0) {\n                        children.push(competency);\n                        addChildren(competency, result);\n                    }\n                }\n                var context = {\n                    shortname: competencyFrameworkShortName,\n                    canmanage: competencyFramworkCanManage,\n                    competencies: children\n                };\n                templates.render('tool_lp/competencies_tree_root', context).done(function(html, js) {\n                    templates.replaceNodeContents($(treeSelector), $(html).html(), js);\n                    var tree = new Ariatree(treeSelector, false);\n\n                    if (currentNodeId) {\n                        var node = $(treeSelector).find('[data-id=' + currentNodeId + ']');\n                        if (node.length) {\n                            tree.selectItem(node);\n                            tree.updateFocus(node);\n                        }\n                    }\n                    deferred.resolve(competencies);\n                }).fail(deferred.reject);\n            }).fail(deferred.reject);\n        });\n\n        return deferred.promise();\n    };\n\n    /**\n     * Whenever the current item in the tree is changed - remember the \"id\".\n     * @param {Event} evt\n     * @param {Object} params The parameters for the event (This is the selected node).\n     */\n    var rememberCurrent = function(evt, params) {\n        var node = params.selected;\n        currentNodeId = node.attr('data-id');\n    };\n\n    return /** @alias module:tool_lp/competencytree */ {\n        // Public variables and functions.\n        /**\n         * Initialise the tree.\n         *\n         * @param {Number} id The competency id.\n         * @param {String} shortname The framework shortname\n         * @param {String} search The current search string\n         * @param {String} selector The selector for the tree div\n         * @param {Boolean} canmanage Can manage the competencies\n         */\n        init: function(id, shortname, search, selector, canmanage) {\n            competencyFrameworkId = id;\n            competencyFrameworkShortName = shortname;\n            competencyFramworkCanManage = canmanage;\n            treeSelector = selector;\n            loadCompetencies(search).fail(notification.exception);\n\n            this.on('selectionchanged', rememberCurrent);\n         },\n\n        /**\n         * Add an event handler for custom events emitted by the tree.\n         *\n         * @param {String} eventname The name of the event - only \"selectionchanged\" for now\n         * @param {Function} handler The handler for the event.\n         */\n        on: function(eventname, handler) {\n            // We can't use the tree on function directly\n            // because the tree gets rebuilt whenever the search string changes,\n            // instead we attach the listner to the root node of the tree which never\n            // gets destroyed (same as \"on()\" code in the tree.js).\n            $(treeSelector).on(eventname, handler);\n        },\n\n        /**\n         * Get the children of a competency.\n         *\n         * @param  {Number} id The competency ID.\n         * @return {Array}\n         * @method getChildren\n         */\n        getChildren: function(id) {\n            var children = [];\n            $.each(competencies, function(index, competency) {\n                if (competency.parentid == id) {\n                    children.push(competency);\n                }\n            });\n            return children;\n        },\n\n        /**\n         * Get the competency framework id this model was initiliased with.\n         *\n         * @return {Number}\n         */\n        getCompetencyFrameworkId: function() {\n            return competencyFrameworkId;\n        },\n\n        /**\n         * Get a competency by id\n         *\n         * @param {Number} id The competency id\n         * @return {Object}\n         */\n        getCompetency: function(id) {\n            return competencies[id];\n        },\n\n        /**\n         * Get the competency level.\n         *\n         * @param  {Number} id The competency ID.\n         * @return {Number}\n         */\n        getCompetencyLevel: function(id) {\n            var competency = this.getCompetency(id),\n                level = competency.path.replace(/^\\/|\\/$/g, '').split('/').length;\n            return level;\n        },\n\n        /**\n         * Whether a competency has children.\n         *\n         * @param  {Number} id The competency ID.\n         * @return {Boolean}\n         * @method hasChildren\n         */\n        hasChildren: function(id) {\n            return this.getChildren(id).length > 0;\n        },\n\n        /**\n         * Does the competency have a rule?\n         *\n         * @param  {Number}  id The competency ID.\n         * @return {Boolean}\n         */\n        hasRule: function(id) {\n            var comp = this.getCompetency(id);\n            if (comp) {\n                return comp.ruleoutcome != CompOutcomes.OUTCOME_NONE\n                    && comp.ruletype;\n            }\n            return false;\n        },\n\n        /**\n         * Reload all the page competencies framework competencies.\n         * @method reloadCompetencies\n         * @return {Promise}\n         */\n        reloadCompetencies: function() {\n            return loadCompetencies('').fail(notification.exception);\n        },\n\n        /**\n         * Get all competencies for this framework.\n         *\n         * @return {Object[]}\n         */\n        listCompetencies: function() {\n            return competencies;\n        },\n\n     };\n });\n"]}