'use strict';define('tool_lp/frameworkactions',['jquery','core/templates','core/ajax','core/notification','core/str'],function($,templates,ajax,notification,str){var pagecontextid=0,frameworkid=0,updatePage=function(newhtml,newjs){$('[data-region="managecompetencies"]').replaceWith(newhtml),templates.runTemplateJS(newjs)},reloadList=function(context){templates.render('tool_lp/manage_competency_frameworks_page',context).done(updatePage).fail(notification.exception)},doDuplicate=function(e){e.preventDefault(),frameworkid=$(this).attr('data-frameworkid');var requests=ajax.call([{methodname:'core_competency_duplicate_competency_framework',args:{id:frameworkid}},{methodname:'tool_lp_data_for_competency_frameworks_manage_page',args:{pagecontext:{contextid:pagecontextid}}}]);requests[1].done(reloadList).fail(notification.exception)},doDelete=function(){var requests=ajax.call([{methodname:'core_competency_delete_competency_framework',args:{id:frameworkid}},{methodname:'tool_lp_data_for_competency_frameworks_manage_page',args:{pagecontext:{contextid:pagecontextid}}}]);requests[0].done(function(success){if(!1===success){var req=ajax.call([{methodname:'core_competency_read_competency_framework',args:{id:frameworkid}}]);req[0].done(function(framework){str.get_strings([{key:'frameworkcannotbedeleted',component:'tool_lp',param:framework.shortname},{key:'cancel',component:'moodle'}]).done(function(strings){notification.alert(null,strings[0])}).fail(notification.exception)})}}).fail(notification.exception),requests[1].done(reloadList).fail(notification.exception)},confirmDelete=function(e){e.preventDefault();var id=$(this).attr('data-frameworkid');frameworkid=id;var requests=ajax.call([{methodname:'core_competency_read_competency_framework',args:{id:frameworkid}}]);requests[0].done(function(framework){str.get_strings([{key:'confirm',component:'moodle'},{key:'deletecompetencyframework',component:'tool_lp',param:framework.shortname},{key:'delete',component:'moodle'},{key:'cancel',component:'moodle'}]).done(function(strings){notification.confirm(strings[0],strings[1],strings[2],strings[3],doDelete)}).fail(notification.exception)}).fail(notification.exception)};return{deleteHandler:confirmDelete,duplicateHandler:doDuplicate,init:function init(contextid){pagecontextid=contextid}}});
//# sourceMappingURL=frameworkactions.min.js.map
