{"version":3,"sources":["../src/scaleconfig.js"],"names":["define","$","notification","templates","ajax","Dialogue","ModScaleValues","ScaleConfig","selectSelector","inputSelector","triggerSelector","originalscaleid","val","on","scaleChangeHandler","bind","change","click","showConfig","prototype","scalevalues","scaleid","popup","self","scalename","find","text","getScaleValues","done","context","scales","render","html","initScaleConfig","fail","exception","retrieveOriginalScaleConfig","jsonstring","scaleconfiguration","parseJSON","scaledetail","shift","body","getContent","currentconfig","forEach","value","scaledefault","id","attr","proficient","setScaleConfig","close","data","is","push","datastring","JSON","stringify","get_values","then","values","e","target","prop","init"],"mappings":"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","file":"scaleconfig.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handle opening a dialogue to configure scale data.\n *\n * @module     tool_lp/scaleconfig\n * @package    tool_lp\n * @copyright  2015 Adrian Greeve <adrian@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/notification', 'core/templates', 'core/ajax', 'tool_lp/dialogue', 'tool_lp/scalevalues'],\n    function($, notification, templates, ajax, Dialogue, ModScaleValues) {\n\n    /**\n     * Scale config object.\n     * @param {String} selectSelector The select box selector.\n     * @param {String} inputSelector The hidden input field selector.\n     * @param {String} triggerSelector The trigger selector.\n     */\n    var ScaleConfig = function(selectSelector, inputSelector, triggerSelector) {\n        this.selectSelector = selectSelector;\n        this.inputSelector = inputSelector;\n        this.triggerSelector = triggerSelector;\n\n        // Get the current scale ID.\n        this.originalscaleid = $(selectSelector).val();\n        $(selectSelector).on('change', this.scaleChangeHandler.bind(this)).change();\n        $(triggerSelector).click(this.showConfig.bind(this));\n    };\n\n    /** @var {String} The select box selector. */\n    ScaleConfig.prototype.selectSelector = null;\n    /** @var {String} The hidden field selector. */\n    ScaleConfig.prototype.inputSelector = null;\n    /** @var {String} The trigger selector. */\n    ScaleConfig.prototype.triggerSelector = null;\n    /** @var {Array} scalevalues ID and name of the scales. */\n    ScaleConfig.prototype.scalevalues = null;\n    /** @var {Number) originalscaleid Original scale ID when the page loads. */\n    ScaleConfig.prototype.originalscaleid = 0;\n    /** @var {Number} scaleid Current scale ID. */\n    ScaleConfig.prototype.scaleid = 0;\n    /** @var {Dialogue} Reference to the popup. */\n    ScaleConfig.prototype.popup = null;\n\n    /**\n     * Displays the scale configuration dialogue.\n     *\n     * @method showConfig\n     */\n    ScaleConfig.prototype.showConfig = function() {\n        var self = this;\n\n        this.scaleid = $(this.selectSelector).val();\n        if (this.scaleid <= 0) {\n            // This should not happen.\n            return;\n        }\n\n        var scalename = $(this.selectSelector).find(\"option:selected\").text();\n        this.getScaleValues(this.scaleid).done(function() {\n\n            var context = {\n                scalename: scalename,\n                scales: self.scalevalues\n            };\n\n            // Dish up the form.\n            templates.render('tool_lp/scale_configuration_page', context)\n                .done(function(html) {\n                    new Dialogue(\n                        scalename,\n                        html,\n                        self.initScaleConfig.bind(self)\n                    );\n                }).fail(notification.exception);\n        }).fail(notification.exception);\n    };\n\n    /**\n     * Gets the original scale configuration if it was set.\n     *\n     * @method retrieveOriginalScaleConfig\n     * @return {Object|String} scale configuration or empty string.\n     */\n    ScaleConfig.prototype.retrieveOriginalScaleConfig = function() {\n        var jsonstring = $(this.inputSelector).val();\n        if (jsonstring !== '') {\n            var scaleconfiguration = $.parseJSON(jsonstring);\n            // The first object should contain the scale ID for the configuration.\n            var scaledetail = scaleconfiguration.shift();\n            // Check that this scale id matches the one from the page before returning the configuration.\n            if (scaledetail.scaleid === this.originalscaleid) {\n                return scaleconfiguration;\n            }\n        }\n        return '';\n    };\n\n    /**\n     * Initialises the scale configuration dialogue.\n     *\n     * @method initScaleConfig\n     * @param {Dialogue} popup Dialogue object to initialise.\n     */\n    ScaleConfig.prototype.initScaleConfig = function(popup) {\n        this.popup = popup;\n        var body = $(popup.getContent());\n        if (this.originalscaleid === this.scaleid) {\n            // Set up the popup to show the current configuration.\n            var currentconfig = this.retrieveOriginalScaleConfig();\n            // Set up the form only if there is configuration settings to set.\n            if (currentconfig !== '') {\n                currentconfig.forEach(function(value) {\n                    if (value.scaledefault === 1) {\n                        body.find('[data-field=\"tool_lp_scale_default_' + value.id + '\"]').attr('checked', true);\n                    }\n                    if (value.proficient === 1) {\n                        body.find('[data-field=\"tool_lp_scale_proficient_' + value.id + '\"]').attr('checked', true);\n                    }\n                });\n            }\n        }\n        body.on('click', '[data-action=\"close\"]', function() {\n            this.setScaleConfig();\n            popup.close();\n        }.bind(this));\n        body.on('click', '[data-action=\"cancel\"]', function() {\n            popup.close();\n        });\n    };\n\n    /**\n     * Set the scale configuration back into a JSON string in the hidden element.\n     *\n     * @method setScaleConfig\n     */\n    ScaleConfig.prototype.setScaleConfig = function() {\n        var body = $(this.popup.getContent());\n        // Get the data.\n        var data = [{scaleid: this.scaleid}];\n        this.scalevalues.forEach(function(value) {\n            var scaledefault = 0;\n            var proficient = 0;\n            if (body.find('[data-field=\"tool_lp_scale_default_' + value.id + '\"]').is(':checked')) {\n                scaledefault = 1;\n            }\n            if (body.find('[data-field=\"tool_lp_scale_proficient_' + value.id + '\"]').is(':checked')) {\n                proficient = 1;\n            }\n\n            if (!scaledefault && !proficient) {\n                return;\n            }\n\n            data.push({\n                id: value.id,\n                scaledefault: scaledefault,\n                proficient: proficient\n            });\n         });\n        var datastring = JSON.stringify(data);\n        // Send to the hidden field on the form.\n        $(this.inputSelector).val(datastring);\n        // Once the configuration has been saved then the original scale ID is set to the current scale ID.\n        this.originalscaleid = this.scaleid;\n    };\n\n    /**\n     * Get the scale values for the selected scale.\n     *\n     * @method getScaleValues\n     * @param {Number} scaleid The scale ID of the selected scale.\n     * @return {Promise} A deffered object with the scale values.\n     */\n    ScaleConfig.prototype.getScaleValues = function(scaleid) {\n        return ModScaleValues.get_values(scaleid).then(function(values) {\n            this.scalevalues = values;\n            return values;\n        }.bind(this));\n    };\n\n    /**\n     * Triggered when a scale is selected.\n     *\n     * @name   scaleChangeHandler\n     * @param  {Event} e\n     * @function\n     */\n    ScaleConfig.prototype.scaleChangeHandler = function(e) {\n        if ($(e.target).val() <= 0) {\n            $(this.triggerSelector).prop('disabled', true);\n        } else {\n            $(this.triggerSelector).prop('disabled', false);\n        }\n\n    };\n\n    return {\n\n        /**\n         * Main initialisation.\n         *\n         * @param {String} selectSelector The select box selector.\n         * @param {String} inputSelector The hidden input field selector.\n         * @param {String} triggerSelector The trigger selector.\n         * @return {ScaleConfig} A new instance of ScaleConfig.\n         * @method init\n         */\n        init: function(selectSelector, inputSelector, triggerSelector) {\n            return new ScaleConfig(selectSelector, inputSelector, triggerSelector);\n        }\n    };\n});\n"]}