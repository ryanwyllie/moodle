{"version":3,"sources":["../src/competencypicker_user_plans.js"],"names":["define","$","Notification","Ajax","Templates","Str","Tree","PickerBase","Picker","userId","singlePlan","multiSelect","prototype","constructor","apply","_userId","_plans","_planId","_singlePlan","Object","create","_afterRender","self","arguments","_find","change","e","target","val","_loadCompetencies","then","_refresh","bind","catch","exception","_fetchCompetencies","planId","searchText","call","methodname","args","id","done","competencies","i","comp","tree","length","competency","shortname","toLowerCase","indexOf","children","haschildren","push","_competencies","fail","_getPlan","plan","each","f","_searchText","_loadPlans","promise","when","userid","plans","_preRender","_render","selected","context","search","render"],"mappings":"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","file":"competencypicker_user_plans.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Competency picker from user plans.\n *\n * To handle 'save' events use: picker.on('save').\n *\n * This will receive a object with either a single 'competencyId', or an array in 'competencyIds'\n * depending on the value of multiSelect.\n *\n * @package    tool_lp\n * @copyright  2015 Frédéric Massart - FMCorz.net\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery',\n        'core/notification',\n        'core/ajax',\n        'core/templates',\n        'core/str',\n        'tool_lp/tree',\n        'tool_lp/competencypicker'\n        ],\n        function($, Notification, Ajax, Templates, Str, Tree, PickerBase) {\n\n    /**\n     * Competency picker in plan class.\n     *\n     * @param {Number} userId\n     * @param {Number|false} singlePlan The ID of the plan when limited to one.\n     * @param {Boolean} multiSelect Support multi-select in the tree.\n     */\n    var Picker = function(userId, singlePlan, multiSelect) {\n        PickerBase.prototype.constructor.apply(this, [1, false, 'self', multiSelect]);\n        this._userId = userId;\n        this._plans = [];\n\n        if (singlePlan) {\n            this._planId = singlePlan;\n            this._singlePlan = true;\n        }\n    };\n    Picker.prototype = Object.create(PickerBase.prototype);\n\n    /** @type {Array} The list of plans fetched. */\n    Picker.prototype._plans = null;\n    /** @type {Number} The current plan ID. */\n    Picker.prototype._planId = null;\n    /** @type {Boolean} Whether we can browse plans or not. */\n    Picker.prototype._singlePlan = false;\n    /** @type {Number} The user the plans belongs to. */\n    Picker.prototype._userId = null;\n\n    /**\n     * Hook to executed after the view is rendered.\n     *\n     * @method _afterRender\n     */\n    Picker.prototype._afterRender = function() {\n        var self = this;\n        PickerBase.prototype._afterRender.apply(self, arguments);\n\n        // Add listener for framework change.\n        if (!self._singlePlan) {\n            self._find('[data-action=\"chooseplan\"]').change(function(e) {\n                self._planId = $(e.target).val();\n                self._loadCompetencies().then(self._refresh.bind(self))\n                .catch(Notification.exception);\n            });\n        }\n    };\n\n    /**\n     * Fetch the competencies.\n     *\n     * @param {Number} planId The planId.\n     * @param {String} searchText Limit the competencies to those matching the text.\n     * @method _fetchCompetencies\n     * @return {Promise} The promise object.\n     */\n    Picker.prototype._fetchCompetencies = function(planId, searchText) {\n        var self = this;\n\n        return Ajax.call([\n            {methodname: 'core_competency_list_plan_competencies', args: {\n                id: planId\n            }}\n        ])[0].done(function(competencies) {\n\n            // Expand the list of competencies into a fake tree.\n            var i, comp;\n            var tree = [];\n            for (i = 0; i < competencies.length; i++) {\n                comp = competencies[i].competency;\n                if (comp.shortname.toLowerCase().indexOf(searchText.toLowerCase()) < 0) {\n                    continue;\n                }\n                comp.children = [];\n                comp.haschildren = 0;\n                tree.push(comp);\n            }\n\n            self._competencies = tree;\n\n        }).fail(Notification.exception);\n    };\n\n    /**\n     * Convenience method to get a plan object.\n     *\n     * @param {Number} id The plan ID.\n     * @return {Object|undefined} The plan.\n     * @method _getPlan\n     */\n    Picker.prototype._getPlan = function(id) {\n        var plan;\n        $.each(this._plans, function(i, f) {\n            if (f.id == id) {\n                plan = f;\n                return;\n            }\n        });\n        return plan;\n    };\n\n    /**\n     * Load the competencies.\n     *\n     * @method _loadCompetencies\n     * @return {Promise}\n     */\n    Picker.prototype._loadCompetencies = function() {\n        return this._fetchCompetencies(this._planId, this._searchText);\n    };\n\n    /**\n     * Load the plans.\n     *\n     * @method _loadPlans\n     * @return {Promise}\n     */\n    Picker.prototype._loadPlans = function() {\n        var promise,\n            self = this;\n\n        // Quit early because we already have the data.\n        if (self._plans.length > 0) {\n            return $.when();\n        }\n\n        if (self._singlePlan) {\n            promise = Ajax.call([\n                {methodname: 'core_competency_read_plan', args: {\n                    id: this._planId\n                }}\n            ])[0].then(function(plan) {\n                return [plan];\n            });\n        } else {\n            promise = Ajax.call([\n                {methodname: 'core_competency_list_user_plans', args: {\n                    userid: self._userId\n                }}\n            ])[0];\n        }\n\n        return promise.done(function(plans) {\n            self._plans = plans;\n        }).fail(Notification.exception);\n    };\n\n    /**\n     * Hook to executed before render.\n     *\n     * @method _preRender\n     * @return {Promise}\n     */\n    Picker.prototype._preRender = function() {\n        var self = this;\n        return self._loadPlans().then(function() {\n            if (!self._planId && self._plans.length > 0) {\n                self._planId = self._plans[0].id;\n            }\n\n            // We could not set a framework ID, that probably means there are no frameworks accessible.\n            if (!self._planId) {\n                self._plans = [];\n                return $.when();\n            }\n\n            return self._loadCompetencies();\n        });\n    };\n\n    /**\n     * Render the dialogue.\n     *\n     * @method _render\n     * @return {Promise}\n     */\n    Picker.prototype._render = function() {\n        var self = this;\n        return self._preRender().then(function() {\n\n            if (!self._singlePlan) {\n                $.each(self._plans, function(i, plan) {\n                    if (plan.id == self._planId) {\n                        plan.selected = true;\n                    } else {\n                        plan.selected = false;\n                    }\n                });\n            }\n\n            var context = {\n                competencies: self._competencies,\n                plan: self._getPlan(self._planId),\n                plans: self._plans,\n                search: self._searchText,\n                singlePlan: self._singlePlan,\n            };\n\n            return Templates.render('tool_lp/competency_picker_user_plans', context);\n        });\n    };\n\n    return /** @alias module:tool_lp/competencypicker_user_plans */ Picker;\n\n});\n"]}