{"version":3,"sources":["../src/event_list.js"],"names":["define","$","Notification","Templates","CustomEvents","CalendarEventsRepository","SELECTORS","EMPTY_MESSAGE","ROOT","EVENT_LIST","EVENT_LIST_CONTENT","EVENT_LIST_GROUP_CONTAINER","LOADING_ICON_CONTAINER","VIEW_MORE_BUTTON","TEMPLATES","EVENT_LIST_ITEMS","COURSE_EVENT_LIST_ITEMS","setLoadedAll","root","attr","hasLoadedAll","startLoading","loadingIcon","find","viewMoreButton","addClass","removeClass","prop","stopLoading","isLoading","hasClass","setHasContent","hasContent","updateContentVisibility","eventCount","hideContent","renderGroup","group","calendarEvents","templateName","render","events","done","html","js","appendNodeContents","timeUntilEvent","timestamp","event","orderTime","timesort","eventBelongsInContainer","container","todayTime","timeUntilContainerStart","timeUntilContainerEnd","timeUntilEventNeedsAction","getFilterCallbackForContainer","renderCount","when","apply","map","filter","length","then","load","promise","limit","courseId","lastId","midnight","Deferred","resolve","args","starttime","aftereventid","courseid","queryByCourse","queryByTime","result","id","fail","exception","always","registerEventListeners","activate","on","init","rootSelector"],"mappings":"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","file":"event_list.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to load and render the list of calendar events for a\n * given day range.\n *\n * @module     block_myoverview/event_list\n * @package    block_myoverview\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/notification', 'core/templates',\n        'core/custom_interaction_events',\n        'block_myoverview/calendar_events_repository'],\n        function($, Notification, Templates, CustomEvents, CalendarEventsRepository) {\n\n    var SECONDS_IN_DAY = 60 * 60 * 24;\n\n    var SELECTORS = {\n        EMPTY_MESSAGE: '[data-region=\"empty-message\"]',\n        ROOT: '[data-region=\"event-list-container\"]',\n        EVENT_LIST: '[data-region=\"event-list\"]',\n        EVENT_LIST_CONTENT: '[data-region=\"event-list-content\"]',\n        EVENT_LIST_GROUP_CONTAINER: '[data-region=\"event-list-group-container\"]',\n        LOADING_ICON_CONTAINER: '[data-region=\"loading-icon-container\"]',\n        VIEW_MORE_BUTTON: '[data-action=\"view-more\"]'\n    };\n\n    var TEMPLATES = {\n        EVENT_LIST_ITEMS: 'block_myoverview/event-list-items',\n        COURSE_EVENT_LIST_ITEMS: 'block_myoverview/course-event-list-items'\n    };\n\n    /**\n     * Set a flag on the element to indicate that it has completed\n     * loading all event data.\n     *\n     * @method setLoadedAll\n     * @private\n     * @param {object} root The container element\n     */\n    var setLoadedAll = function(root) {\n        root.attr('data-loaded-all', true);\n    };\n\n    /**\n     * Check if all event data has finished loading.\n     *\n     * @method hasLoadedAll\n     * @private\n     * @param {object} root The container element\n     * @return {bool} if the element has completed all loading\n     */\n    var hasLoadedAll = function(root) {\n        return !!root.attr('data-loaded-all');\n    };\n\n    /**\n     * Set the element state to loading.\n     *\n     * @method startLoading\n     * @private\n     * @param {object} root The container element\n     */\n    var startLoading = function(root) {\n        var loadingIcon = root.find(SELECTORS.LOADING_ICON_CONTAINER),\n            viewMoreButton = root.find(SELECTORS.VIEW_MORE_BUTTON);\n\n        root.addClass('loading');\n        loadingIcon.removeClass('hidden');\n        viewMoreButton.prop('disabled', true);\n    };\n\n    /**\n     * Remove the loading state from the element.\n     *\n     * @method stopLoading\n     * @private\n     * @param {object} root The container element\n     */\n    var stopLoading = function(root) {\n        var loadingIcon = root.find(SELECTORS.LOADING_ICON_CONTAINER),\n            viewMoreButton = root.find(SELECTORS.VIEW_MORE_BUTTON);\n\n        root.removeClass('loading');\n        loadingIcon.addClass('hidden');\n\n        if (!hasLoadedAll(root)) {\n            // Only enable the button if we've got more events to load.\n            viewMoreButton.prop('disabled', false);\n        }\n    };\n\n    /**\n     * Check if the element is currently loading some event data.\n     *\n     * @method isLoading\n     * @private\n     * @param {object} root The container element\n     * @returns {Boolean}\n     */\n    var isLoading = function(root) {\n        return root.hasClass('loading');\n    };\n\n    /**\n     * Flag the root element to remember that it contains events.\n     *\n     * @method setHasContent\n     * @private\n     * @param {object} root The container element\n     */\n    var setHasContent = function(root) {\n        root.attr('data-has-events', true);\n    };\n\n    /**\n     * Check if the root element has had events loaded.\n     *\n     * @method hasContent\n     * @private\n     * @param {object} root The container element\n     * @return {bool}\n     */\n    var hasContent = function(root) {\n        return root.attr('data-has-events') ? true : false;\n    };\n\n    /**\n     * Update the visibility of the content area. The content area\n     * is hidden if we have no events.\n     *\n     * @method updateContentVisibility\n     * @private\n     * @param {object} root The container element\n     * @param {int} eventCount A count of the events we just received.\n     */\n    var updateContentVisibility = function(root, eventCount) {\n        if (eventCount) {\n            // We've rendered some events, let's remember that.\n            setHasContent(root);\n        } else {\n            // If this is the first time trying to load events and\n            // we don't have any then there isn't any so let's show\n            // the empty message.\n            if (!hasContent(root)) {\n                hideContent(root);\n            }\n        }\n    };\n\n    /**\n     * Hide the content area and display the empty content message.\n     *\n     * @method hideContent\n     * @private\n     * @param {object} root The container element\n     */\n    var hideContent = function(root) {\n        root.find(SELECTORS.EVENT_LIST_CONTENT).addClass('hidden');\n        root.find(SELECTORS.EMPTY_MESSAGE).removeClass('hidden');\n    };\n\n    /**\n     * Render a group of calendar events and add them to the event\n     * list.\n     *\n     * @method renderGroup\n     * @private\n     * @param {object}  group           The group container element\n     * @param {array}   calendarEvents  The list of calendar events\n     * @param {string}  templateName    The template name\n     * @return {promise} Resolved when the elements are attached to the DOM\n     */\n    var renderGroup = function(group, calendarEvents, templateName) {\n\n        group.removeClass('hidden');\n\n        return Templates.render(\n            templateName,\n            {events: calendarEvents}\n        ).done(function(html, js) {\n            Templates.appendNodeContents(group.find(SELECTORS.EVENT_LIST), html, js);\n        });\n    };\n\n    /**\n     * Determine the time (in seconds) from the given timestamp until the calendar\n     * event will need actioning.\n     *\n     * @method timeUntilEvent\n     * @private\n     * @param {int}     timestamp   The time to compare with\n     * @param {object}  event       The calendar event\n     * @return {int}\n     */\n    var timeUntilEvent = function(timestamp, event) {\n        var orderTime = event.timesort || 0;\n        return orderTime - timestamp;\n    };\n\n    /**\n     * Check if the given calendar event should be added to the given event\n     * list group container. The event list group container will specify a\n     * day range for the time boundary it is interested in.\n     *\n     * If only a start day is specified for the container then it will be treated\n     * as an open catchment for all events that begin after that time.\n     *\n     * @method eventBelongsInContainer\n     * @private\n     * @param {object} root         The root element\n     * @param {object} event        The calendar event\n     * @param {object} container    The group event list container\n     * @return {bool}\n     */\n    var eventBelongsInContainer = function(root, event, container) {\n        var todayTime = root.attr('data-midnight'),\n            timeUntilContainerStart = +container.attr('data-start-day') * SECONDS_IN_DAY,\n            timeUntilContainerEnd = +container.attr('data-end-day') * SECONDS_IN_DAY,\n            timeUntilEventNeedsAction = timeUntilEvent(todayTime, event);\n\n        if (container.attr('data-end-day') === '') {\n            return timeUntilContainerStart <= timeUntilEventNeedsAction;\n        } else {\n            return timeUntilContainerStart <= timeUntilEventNeedsAction &&\n                   timeUntilEventNeedsAction < timeUntilContainerEnd;\n        }\n    };\n\n    /**\n     * Return a function that can be used to filter a list of events based on the day\n     * range specified on the given event list group container.\n     *\n     * @method getFilterCallbackForContainer\n     * @private\n     * @param {object} root      The root element\n     * @param {object} container Event list group container\n     * @return {function}\n     */\n    var getFilterCallbackForContainer = function(root, container) {\n        return function(event) {\n            return eventBelongsInContainer(root, event, $(container));\n        };\n    };\n\n    /**\n     * Render the given calendar events in the container element. The container\n     * elements must have a day range defined using data attributes that will be\n     * used to group the calendar events according to their order time.\n     *\n     * @method render\n     * @private\n     * @param {object}  root            The container element\n     * @param {array}   calendarEvents  A list of calendar events\n     * @return {promise} Resolved with a count of the number of rendered events\n     */\n    var render = function(root, calendarEvents) {\n        var renderCount = 0;\n        var templateName = TEMPLATES.EVENT_LIST_ITEMS;\n\n        if (root.attr('data-course-id')) {\n            templateName = TEMPLATES.COURSE_EVENT_LIST_ITEMS;\n        }\n\n        // Loop over each of the element list groups and find the set of calendar events\n        // that belong to that group (as defined by the group's day range). The matching\n        // list of calendar events are rendered and added to the DOM within that group.\n        return $.when.apply($, $.map(root.find(SELECTORS.EVENT_LIST_GROUP_CONTAINER), function(container) {\n            var events = calendarEvents.filter(getFilterCallbackForContainer(root, container));\n\n            if (events.length) {\n                renderCount += events.length;\n                return renderGroup($(container), events, templateName);\n            } else {\n                return null;\n            }\n        })).then(function() {\n            return renderCount;\n        });\n    };\n\n    /**\n     * Retrieve a list of calendar events, render and append them to the end of the\n     * existing list. The events will be loaded based on the set of data attributes\n     * on the root element.\n     *\n     * This function can be provided with a jQuery promise. If it is then it won't\n     * attempt to load data by itself, instead it will use the given promise.\n     *\n     * The provided promise must resolve with an an object that has an events key\n     * and value is an array of calendar events.\n     * E.g.\n     * { events: ['event 1', 'event 2'] }\n     *\n     * @method load\n     * @param {object} root The root element of the event list\n     * @param {object} promise A jQuery promise resolved with events\n     * @return {promise} A jquery promise\n     */\n    var load = function(root, promise) {\n        root = $(root);\n        var limit = +root.attr('data-limit'),\n            courseId = +root.attr('data-course-id'),\n            lastId = root.attr('data-last-id'),\n            midnight = root.attr('data-midnight'),\n            startTime = midnight - (14 * SECONDS_IN_DAY);\n\n        // Don't load twice.\n        if (isLoading(root)) {\n            return $.Deferred().resolve();\n        }\n\n        startLoading(root);\n\n        // If we haven't been provided a promise to resolve the\n        // data then we will load our own.\n        if (typeof promise == 'undefined') {\n            var args = {\n                starttime: startTime,\n                limit: limit,\n            };\n\n            if (lastId) {\n                args.aftereventid = lastId;\n            }\n\n            // If we have a course id then we only want events from that course.\n            if (courseId) {\n                args.courseid = courseId;\n                promise = CalendarEventsRepository.queryByCourse(args);\n            } else {\n                // Otherwise we want events from any course.\n                promise = CalendarEventsRepository.queryByTime(args);\n            }\n        }\n\n        // Request data from the server.\n        return promise.then(function(result) {\n            if (!result.events.length) {\n                // No events, nothing to do.\n                setLoadedAll(root);\n                return 0;\n            }\n\n            var calendarEvents = result.events;\n\n            // Remember the last id we've seen.\n            root.attr('data-last-id', calendarEvents[calendarEvents.length - 1].id);\n\n            if (calendarEvents.length < limit) {\n                // No more events to load, disable loading button.\n                setLoadedAll(root);\n            }\n\n            // Render the events.\n            return render(root, calendarEvents).then(function(renderCount) {\n                if (renderCount < calendarEvents.length) {\n                    // If the number of events that was rendered is less than\n                    // the number we sent for rendering we can assume that there\n                    // are no groups to add them in. Since the ordering of the\n                    // events is guaranteed it means that any future requests will\n                    // also yield events that can't be rendered, so let's not bother\n                    // sending any more requests.\n                    setLoadedAll(root);\n                }\n                return calendarEvents.length;\n            });\n        }).then(function(eventCount) {\n            return updateContentVisibility(root, eventCount);\n        }).fail(\n            Notification.exception\n        ).always(function() {\n            stopLoading(root);\n        });\n    };\n\n    /**\n     * Register the event listeners for the container element.\n     *\n     * @method registerEventListeners\n     * @param {object} root The root element of the event list\n     */\n    var registerEventListeners = function(root) {\n        CustomEvents.define(root, [CustomEvents.events.activate]);\n        root.on(CustomEvents.events.activate, SELECTORS.VIEW_MORE_BUTTON, function() {\n            load(root);\n        });\n    };\n\n    return {\n        init: function(root) {\n            root = $(root);\n            load(root);\n            registerEventListeners(root);\n        },\n        registerEventListeners: registerEventListeners,\n        load: load,\n        rootSelector: SELECTORS.ROOT,\n    };\n});\n"]}