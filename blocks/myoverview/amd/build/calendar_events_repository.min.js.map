{"version":3,"sources":["../src/calendar_events_repository.js"],"names":["define","$","Ajax","Notification","queryByTime","args","hasOwnProperty","limit","limitnum","timesortfrom","starttime","timesortto","endtime","promise","call","methodname","fail","exception","queryByCourse","queryByCourses"],"mappings":"aAwBAA,qDAAO,CAAC,QAAD,CAAW,WAAX,CAAwB,mBAAxB,CAAP,CAAqD,SAASC,CAAT,CAAYC,IAAZ,CAAkBC,YAAlB,CAAgC,CA0IjF,MAAO,CACHC,YA/Bc,QAAdA,YAAc,CAASC,IAAT,CAAe,CACxBA,KAAKC,cAAL,CAAoB,OAApB,CADwB,GAEzBD,KAAKE,KAAL,GAFyB,EAK7BF,KAAKG,QAAL,CAAgBH,KAAKE,KALQ,CAM7B,MAAOF,MAAKE,KANiB,CAQzBF,KAAKC,cAAL,CAAoB,WAApB,CARyB,GASzBD,KAAKI,YAAL,CAAoBJ,KAAKK,SATA,CAUzB,MAAOL,MAAKK,SAVa,EAazBL,KAAKC,cAAL,CAAoB,SAApB,CAbyB,GAczBD,KAAKM,UAAL,CAAkBN,KAAKO,OAdE,CAezB,MAAOP,MAAKO,OAfa,KAuBzBC,SAAUX,KAAKY,IAAL,CAAU,CALV,CACVC,WAAY,6CADF,CAEVV,KAAMA,IAFI,CAKU,CAAV,EAAqB,CAArB,CAvBe,CA2B7B,MAFAQ,SAAQG,IAAR,CAAab,aAAac,SAA1B,CAEA,CAAOJ,OACV,CAEM,CAEHK,cAzHgB,QAAhBA,cAAgB,CAASb,IAAT,CAAe,CAC1BA,KAAKC,cAAL,CAAoB,OAApB,CAD0B,GAE3BD,KAAKE,KAAL,GAF2B,EAK/BF,KAAKG,QAAL,CAAgBH,KAAKE,KALU,CAM/B,MAAOF,MAAKE,KANmB,CAQ3BF,KAAKC,cAAL,CAAoB,WAApB,CAR2B,GAS3BD,KAAKI,YAAL,CAAoBJ,KAAKK,SATE,CAU3B,MAAOL,MAAKK,SAVe,EAa3BL,KAAKC,cAAL,CAAoB,SAApB,CAb2B,GAc3BD,KAAKM,UAAL,CAAkBN,KAAKO,OAdI,CAe3B,MAAOP,MAAKO,OAfe,KAuB3BC,SAAUX,KAAKY,IAAL,CAAU,CALV,CACVC,WAAY,2CADF,CAEVV,KAAMA,IAFI,CAKU,CAAV,EAAqB,CAArB,CAvBiB,CA2B/B,MAFAQ,SAAQG,IAAR,CAAab,aAAac,SAA1B,CAEA,CAAOJ,OACV,CA2FM,CAGHM,eA9EiB,QAAjBA,eAAiB,CAASd,IAAT,CAAe,CAC3BA,KAAKC,cAAL,CAAoB,OAApB,CAD2B,GAG5BD,KAAKE,KAAL,CAAa,EAHe,EAMhCF,KAAKG,QAAL,CAAgBH,KAAKE,KANW,CAOhC,MAAOF,MAAKE,KAPoB,CAS5BF,KAAKC,cAAL,CAAoB,WAApB,CAT4B,GAU5BD,KAAKI,YAAL,CAAoBJ,KAAKK,SAVG,CAW5B,MAAOL,MAAKK,SAXgB,EAc5BL,KAAKC,cAAL,CAAoB,SAApB,CAd4B,GAe5BD,KAAKM,UAAL,CAAkBN,KAAKO,OAfK,CAgB5B,MAAOP,MAAKO,OAhBgB,KAwB5BC,SAAUX,KAAKY,IAAL,CAAU,CALV,CACVC,WAAY,4CADF,CAEVV,KAAMA,IAFI,CAKU,CAAV,EAAqB,CAArB,CAxBkB,CA4BhC,MAFAQ,SAAQG,IAAR,CAAab,aAAac,SAA1B,CAEA,CAAOJ,OACV,CA8CM,CAKV,CA/ID,C","file":"calendar_events_repository.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to retrieve calendar events from the server.\n *\n * @module     block_myoverview/calendar_events_repository\n * @class      repository\n * @package    block_myoverview\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/ajax', 'core/notification'], function($, Ajax, Notification) {\n\n    var DEFAULT_LIMIT = 20;\n\n    /**\n     * Retrieve a list of calendar events for the logged in user for the\n     * given course.\n     *\n     * Valid args are:\n     * int courseid     Only get events for this course\n     * int starttime    Only get events after this time\n     * int endtime      Only get events before this time\n     * int limit        Limit the number of results returned\n     * int aftereventid Offset the result set from the given id\n     *\n     * @method queryByCourse\n     * @param {object} args The request arguments\n     * @return {promise} Resolved with an array of the calendar events\n     */\n    var queryByCourse = function(args) {\n        if (!args.hasOwnProperty('limit')) {\n            args.limit = DEFAULT_LIMIT;\n        }\n\n        args.limitnum = args.limit;\n        delete args.limit;\n\n        if (args.hasOwnProperty('starttime')) {\n            args.timesortfrom = args.starttime;\n            delete args.starttime;\n        }\n\n        if (args.hasOwnProperty('endtime')) {\n            args.timesortto = args.endtime;\n            delete args.endtime;\n        }\n\n        var request = {\n            methodname: 'core_calendar_get_action_events_by_course',\n            args: args\n        };\n\n        var promise = Ajax.call([request])[0];\n\n        promise.fail(Notification.exception);\n\n        return promise;\n    };\n\n    /**\n     * Retrieve a list of calendar events for the given courses for the\n     * logged in user.\n     *\n     * Valid args are:\n     * array courseids    Get events for these courses\n     * int   starttime    Only get events after this time\n     * int   endtime      Only get events before this time\n     * int   limit        Limit the number of results returned\n     *\n     * @method queryByCourses\n     * @param {object} args The request arguments\n     * @return {promise} Resolved with an array of the calendar events\n     */\n    var queryByCourses = function(args) {\n        if (!args.hasOwnProperty('limit')) {\n            // This is intentionally smaller than the default limit.\n            args.limit = 10;\n        }\n\n        args.limitnum = args.limit;\n        delete args.limit;\n\n        if (args.hasOwnProperty('starttime')) {\n            args.timesortfrom = args.starttime;\n            delete args.starttime;\n        }\n\n        if (args.hasOwnProperty('endtime')) {\n            args.timesortto = args.endtime;\n            delete args.endtime;\n        }\n\n        var request = {\n            methodname: 'core_calendar_get_action_events_by_courses',\n            args: args\n        };\n\n        var promise = Ajax.call([request])[0];\n\n        promise.fail(Notification.exception);\n\n        return promise;\n    };\n\n    /**\n     * Retrieve a list of calendar events for the logged in user after the given\n     * time.\n     *\n     * Valid args are:\n     * int starttime    Only get events after this time\n     * int endtime      Only get events before this time\n     * int limit        Limit the number of results returned\n     * int aftereventid Offset the result set from the given id\n     *\n     * @method queryByTime\n     * @param {object} args The request arguments\n     * @return {promise} Resolved with an array of the calendar events\n     */\n    var queryByTime = function(args) {\n        if (!args.hasOwnProperty('limit')) {\n            args.limit = DEFAULT_LIMIT;\n        }\n\n        args.limitnum = args.limit;\n        delete args.limit;\n\n        if (args.hasOwnProperty('starttime')) {\n            args.timesortfrom = args.starttime;\n            delete args.starttime;\n        }\n\n        if (args.hasOwnProperty('endtime')) {\n            args.timesortto = args.endtime;\n            delete args.endtime;\n        }\n\n        var request = {\n            methodname: 'core_calendar_get_action_events_by_timesort',\n            args: args\n        };\n\n        var promise = Ajax.call([request])[0];\n\n        promise.fail(Notification.exception);\n\n        return promise;\n    };\n\n    return {\n        queryByTime: queryByTime,\n        queryByCourse: queryByCourse,\n        queryByCourses: queryByCourses,\n    };\n});\n"]}