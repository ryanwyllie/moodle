"use strict";define("theme_boost/util",["exports","jquery"],function(exports,_jquery){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _jquery2=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(_jquery),Util=function($){function toType(obj){return{}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function getSpecialTransitionEndEvent(){return{bindType:transition.end,delegateType:transition.end,handle:function(event){return $(event.target).is(this)?event.handleObj.handler.apply(this,arguments):void 0}}}function transitionEndTest(){return!("undefined"!=typeof window&&window.QUnit)&&{end:"transitionend"}}function transitionEndEmulator(duration){var _this=this,called=!1;return $(this).one(Util.TRANSITION_END,function(){called=!0}),setTimeout(function(){called||Util.triggerTransitionEnd(_this)},duration),this}function escapeId(selector){return selector="function"==typeof $.escapeSelector?$.escapeSelector(selector).substr(1):selector.replace(/(:|\.|\[|\]|,|=|@)/g,"\\$1"),selector}var transition=!1,Util={TRANSITION_END:"bsTransitionEnd",getUID:function(prefix){do prefix+=~~(1000000*Math.random());while(document.getElementById(prefix));return prefix},getSelectorFromElement:function(element){var selector=element.getAttribute("data-target");selector&&"#"!==selector||(selector=element.getAttribute("href")||""),"#"===selector.charAt(0)&&(selector=escapeId(selector));try{var $selector=$(document).find(selector);return 0<$selector.length?selector:null}catch(err){return null}},reflow:function(element){return element.offsetHeight},triggerTransitionEnd:function(element){$(element).trigger(transition.end)},supportsTransitionEnd:function(){return!!transition},isElement:function(obj){return(obj[0]||obj).nodeType},typeCheckConfig:function(componentName,config,configTypes){for(var property in configTypes)if(Object.prototype.hasOwnProperty.call(configTypes,property)){var expectedTypes=configTypes[property],value=config[property],valueType=value&&Util.isElement(value)?"element":toType(value);if(!new RegExp(expectedTypes).test(valueType))throw new Error("".concat(componentName.toUpperCase(),": ")+"Option \"".concat(property,"\" provided type \"").concat(valueType,"\" ")+"but expected type \"".concat(expectedTypes,"\"."))}}};return function(){transition=transitionEndTest(),$.fn.emulateTransitionEnd=transitionEndEmulator,Util.supportsTransitionEnd()&&($.event.special[Util.TRANSITION_END]=getSpecialTransitionEndEvent())}(),Util}(_jquery2.default);exports.default=Util});
//# sourceMappingURL=util.min.js.map
